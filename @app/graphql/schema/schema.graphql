"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Get a single `RoomMessageAttachment`."""
  roomMessageAttachment(id: UUID!): RoomMessageAttachment

  """Get a single `RoomMessageAttachment`."""
  roomMessageAttachmentByTopicIdAndRoomMessageId(topicId: UUID!, roomMessageId: UUID!): RoomMessageAttachment

  """Get a single `RoomItemAttachment`."""
  roomItemAttachment(id: UUID!): RoomItemAttachment

  """Get a single `OrganizationMembership`."""
  organizationMembership(id: UUID!): OrganizationMembership

  """Get a single `OrganizationMembership`."""
  organizationMembershipByOrganizationIdAndUserId(organizationId: UUID!, userId: UUID!): OrganizationMembership

  """Get a single `Organization`."""
  organization(id: UUID!): Organization

  """Get a single `Organization`."""
  organizationBySlug(slug: String!): Organization

  """Get a single `UserAuthentication`."""
  userAuthentication(id: UUID!): UserAuthentication

  """Get a single `UserAuthentication`."""
  userAuthenticationByServiceAndIdentifier(service: String!, identifier: String!): UserAuthentication

  """Get a single `UserEmail`."""
  userEmail(id: UUID!): UserEmail

  """Get a single `UserEmail`."""
  userEmailByUserIdAndEmail(userId: UUID!, email: String!): UserEmail

  """Get a single `RoomMessage`."""
  roomMessage(id: UUID!): RoomMessage

  """Get a single `PdfFile`."""
  pdfFile(id: UUID!): PdfFile

  """Get a single `File`."""
  file(id: UUID!): File

  """Get a single `User`."""
  user(id: UUID!): User

  """Get a single `User`."""
  userByUsername(username: String!): User

  """Get a single `RoomSubscription`."""
  roomSubscription(id: UUID!): RoomSubscription

  """Get a single `RoomSubscription`."""
  roomSubscriptionBySubscriberIdAndRoomId(subscriberId: UUID!, roomId: UUID!): RoomSubscription

  """Get a single `RoomItem`."""
  roomItem(id: UUID!): RoomItem

  """Get a single `Topic`."""
  topic(id: UUID!): Topic

  """Get a single `Topic`."""
  topicBySlugAndOrganizationId(slug: String!, organizationId: UUID!): Topic

  """Get a single `Room`."""
  room(id: UUID!): Room

  """Handy method to get the current session ID."""
  currentSessionId: UUID
  currentUserFirstOwnedOrganizationId: UUID

  """
  Handy method to get the current user ID for use in RLS policies, etc; in GraphQL, use `currentUser{id}` instead.
  """
  currentUserId: UUID

  """Reads and enables pagination through a set of `Uuid`."""
  currentUserInvitedOrganizationIds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UUIDFilter
  ): CurrentUserInvitedOrganizationIdsConnection

  """Reads and enables pagination through a set of `Uuid`."""
  currentUserMemberOrganizationIds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UUIDFilter
  ): CurrentUserMemberOrganizationIdsConnection

  """Reads and enables pagination through a set of `Uuid`."""
  mySubscribedRoomIds(
    minimumRole: RoomRole

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UUIDFilter
  ): MySubscribedRoomIdsConnection
  organizationForInvitation(invitationId: UUID!, code: String): Organization
  fetchDraftInRoom(roomId: UUID!): RoomMessage

  """Reads and enables pagination through a set of `TextsearchMatch`."""
  globalSearch(
    term: String!
    entities: [TextsearchableEntity]

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TextsearchMatch`."""
    orderBy: [TextsearchMatchesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TextsearchMatchCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TextsearchMatchFilter
  ): TextsearchMatchesConnection

  """The currently logged in user (or null if not logged in)."""
  currentUser: User

  """Reads and enables pagination through a set of `RoomSubscription`."""
  myRoomSubscriptions(
    minimumRole: RoomRole

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomSubscriptionFilter
  ): RoomSubscriptionsConnection

  """Reads a single `RoomMessageAttachment` using its globally unique `ID`."""
  roomMessageAttachmentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RoomMessageAttachment`.
    """
    nodeId: ID!
  ): RoomMessageAttachment

  """Reads a single `RoomItemAttachment` using its globally unique `ID`."""
  roomItemAttachmentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RoomItemAttachment`.
    """
    nodeId: ID!
  ): RoomItemAttachment

  """
  Reads a single `OrganizationMembership` using its globally unique `ID`.
  """
  organizationMembershipByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OrganizationMembership`.
    """
    nodeId: ID!
  ): OrganizationMembership

  """Reads a single `Organization` using its globally unique `ID`."""
  organizationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Organization`.
    """
    nodeId: ID!
  ): Organization

  """Reads a single `UserAuthentication` using its globally unique `ID`."""
  userAuthenticationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserAuthentication`.
    """
    nodeId: ID!
  ): UserAuthentication

  """Reads a single `UserEmail` using its globally unique `ID`."""
  userEmailByNodeId(
    """The globally unique `ID` to be used in selecting a single `UserEmail`."""
    nodeId: ID!
  ): UserEmail

  """Reads a single `RoomMessage` using its globally unique `ID`."""
  roomMessageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RoomMessage`.
    """
    nodeId: ID!
  ): RoomMessage

  """Reads a single `PdfFile` using its globally unique `ID`."""
  pdfFileByNodeId(
    """The globally unique `ID` to be used in selecting a single `PdfFile`."""
    nodeId: ID!
  ): PdfFile

  """Reads a single `File` using its globally unique `ID`."""
  fileByNodeId(
    """The globally unique `ID` to be used in selecting a single `File`."""
    nodeId: ID!
  ): File

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads a single `RoomSubscription` using its globally unique `ID`."""
  roomSubscriptionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RoomSubscription`.
    """
    nodeId: ID!
  ): RoomSubscription

  """Reads a single `RoomItem` using its globally unique `ID`."""
  roomItemByNodeId(
    """The globally unique `ID` to be used in selecting a single `RoomItem`."""
    nodeId: ID!
  ): RoomItem

  """Reads a single `Topic` using its globally unique `ID`."""
  topicByNodeId(
    """The globally unique `ID` to be used in selecting a single `Topic`."""
    nodeId: ID!
  ): Topic

  """Reads a single `Room` using its globally unique `ID`."""
  roomByNodeId(
    """The globally unique `ID` to be used in selecting a single `Room`."""
    nodeId: ID!
  ): Room

  """Reads and enables pagination through a set of `RoomMessageAttachment`."""
  roomMessageAttachments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomMessageAttachment`."""
    orderBy: [RoomMessageAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageAttachmentFilter
  ): RoomMessageAttachmentsConnection

  """Reads and enables pagination through a set of `RoomItemAttachment`."""
  roomItemAttachments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomItemAttachment`."""
    orderBy: [RoomItemAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemAttachmentFilter
  ): RoomItemAttachmentsConnection

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter
  ): OrganizationMembershipsConnection

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter
  ): OrganizationsConnection

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthentications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAuthenticationFilter
  ): UserAuthenticationsConnection

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserEmailFilter
  ): UserEmailsConnection

  """Reads and enables pagination through a set of `RoomMessage`."""
  roomMessages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageFilter
  ): RoomMessagesConnection

  """Reads and enables pagination through a set of `PdfFile`."""
  pdfFiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PdfFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PdfFileFilter
  ): PdfFilesConnection

  """Reads and enables pagination through a set of `File`."""
  files(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter
  ): FilesConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads and enables pagination through a set of `RoomSubscription`."""
  roomSubscriptions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomSubscriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomSubscriptionFilter
  ): RoomSubscriptionsConnection

  """Reads and enables pagination through a set of `RoomItem`."""
  roomItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemFilter
  ): RoomItemsConnection

  """Reads and enables pagination through a set of `Topic`."""
  topics(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TopicFilter
  ): TopicsConnection

  """Reads and enables pagination through a set of `Room`."""
  rooms(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomFilter
  ): RoomsConnection
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type RoomMessageAttachment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  roomMessageId: UUID!
  topicId: UUID!
  createdAt: Datetime!

  """
  Reads a single `RoomMessage` that is related to this `RoomMessageAttachment`.
  """
  message: RoomMessage

  """
  Reads a single `Topic` that is related to this `RoomMessageAttachment`.
  """
  topic: Topic
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

type RoomMessage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  roomId: UUID!
  senderId: UUID
  answeredMessageId: UUID
  body: String
  language: String!
  createdAt: Datetime!
  sentAt: Datetime
  updatedAt: Datetime!

  """Reads a single `RoomMessage` that is related to this `RoomMessage`."""
  answeredMessage: RoomMessage

  """Reads a single `Room` that is related to this `RoomMessage`."""
  room: Room

  """Reads a single `User` that is related to this `RoomMessage`."""
  sender: User

  """Reads and enables pagination through a set of `RoomMessage`."""
  answers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageFilter
  ): RoomMessagesConnection!

  """Reads and enables pagination through a set of `RoomMessageAttachment`."""
  attachments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomMessageAttachment`."""
    orderBy: [RoomMessageAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageAttachmentFilter
  ): RoomMessageAttachmentsConnection!
}

"""
A room is a place where users meet. At the same time, it is a container for messages and handed-out materials.
"""
type Room implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  mySubscriptionId: UUID
  latestItemContributedAt: Datetime

  "\nDate of subscription or first sent message, whatever is earlier.\n"
  myFirstInteraction: Datetime
  nItems: BigInt
  nItemsSinceLastVisit: BigInt
  hasSubscriptions(minRole: RoomRole): Boolean
  nItemsSince(interval: IntervalInput!): BigInt
  nItemsSinceDate(date: Datetime!): BigInt
  nSubscriptions(minRole: RoomRole): BigInt
  latestMessage: RoomMessage
  mySubscription: RoomSubscription
  latestItem: RoomItem
  id: UUID!

  """Each room has an optional title."""
  title: String

  """Each room has an optional abstract."""
  abstract: String
  organizationId: UUID

  """
  Rooms can be visible for their subscribers only (`subscribers`), to all members of the room's organisation (`organization_members`), for all currently signed-in users (`signed_in_users`), or general in `public`.
  """
  isVisibleFor: RoomVisibility!
  itemsAreVisibleFor: RoomRole!

  """
  Sometimes you want to hide items of the room from users who join later. `since_subscription` allows subscribers to see items that were added *after* their subscription. Similarly, `since_invitation` allows subscribers to see items that were added *after* they had been invited to the room. `since_specified_date` allows all subscribers to see items after `items_are_visible_since_date`. Finally, `always` means that all items are visible for the room's audience.
  """
  itemsAreVisibleSince: RoomHistoryVisibility!
  itemsAreVisibleSinceDate: Datetime!
  draftItemsAreVisibleFor: RoomRole
  extendVisibilityOfItemsBy: Interval!
  isAnonymousPostingAllowed: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Each room can optionally belong to an organization."""
  organization: Organization

  """Reads and enables pagination through a set of `RoomSubscription`."""
  subscriptions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomSubscriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomSubscriptionFilter
  ): RoomSubscriptionsConnection!

  """Reads and enables pagination through a set of `RoomMessage`."""
  messages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageFilter
  ): RoomMessagesConnection!

  """Reads and enables pagination through a set of `RoomItem`."""
  items(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemFilter
  ): RoomItemsConnection!
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

enum RoomRole {
  BANNED
  PUBLIC
  PROSPECT
  MEMBER
  MODERATOR
  ADMIN
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
input IntervalInput {
  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of minutes."""
  minutes: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of days."""
  days: Int

  """A quantity of months."""
  months: Int

  """A quantity of years."""
  years: Int
}

"""Users can be subscribed to rooms."""
type RoomSubscription implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  roomId: UUID!

  """The subscribing user."""
  subscriberId: UUID!

  """Maintainers can manage subscriptions and delete the room."""
  role: RoomRole!
  notifications: NotificationSetting!
  lastVisitAt: Datetime
  lastNotificationAt: Datetime
  isStarred: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Room` that is related to this `RoomSubscription`."""
  room: Room

  """Reads a single `User` that is related to this `RoomSubscription`."""
  subscriber: User
}

enum NotificationSetting {
  SILENCED
  DEFAULT
  DEFERRED
  IMMEDIATE
}

"""A user who can log in to the application."""
type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  hasPassword: Boolean

  """Unique identifier for the user."""
  id: UUID!

  """Public-facing username (or 'handle') of the user."""
  username: String!

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Optional avatar URL."""
  avatarUrl: String

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  isVerified: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Users can be notified about activities in the rooms they have subscribed to. This is the default setting. You can change it for each room.
  """
  defaultHandlingOfNotifications: NotificationSetting!

  """
  If there are any delayed notifications, they are sent at this time every day.
  """
  sendingTimeForDeferredNotifications: Time!

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserEmailFilter
  ): UserEmailsConnection!

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthentications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAuthenticationFilter
  ): UserAuthenticationsConnection!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter
  ): OrganizationMembershipsConnection!

  """Reads and enables pagination through a set of `RoomSubscription`."""
  roomSubscriptionsBySubscriberId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomSubscriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomSubscriptionFilter
  ): RoomSubscriptionsConnection!

  """Reads and enables pagination through a set of `Topic`."""
  authoredTopics(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TopicFilter
  ): TopicsConnection!

  """Reads and enables pagination through a set of `RoomMessage`."""
  roomMessagesBySenderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageFilter
  ): RoomMessagesConnection!

  """Reads and enables pagination through a set of `RoomItem`."""
  roomItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemFilter
  ): RoomItemsConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByContributorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter
  ): FilesConnection!
}

"""
The exact time of day, does not include the date. May or may not have a timezone offset.
"""
scalar Time

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
  """A list of `UserEmail` objects."""
  nodes: [UserEmail!]!

  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEmail` you could get from the connection."""
  totalCount: Int!
}

"""Information about a user's email address."""
type UserEmail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  userId: UUID!

  """The users email address, in `a@b.c` format."""
  email: String!

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!
  isPrimary: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmail` at the end of the edge."""
  node: UserEmail!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `UserEmail` object types. All fields are combined with a logical ‘and.’
"""
input UserEmailFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `isVerified` field."""
  isVerified: BooleanFilter

  """Filter by the object’s `isPrimary` field."""
  isPrimary: BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Checks for all expressions in this list."""
  and: [UserEmailFilter!]

  """Checks for any expressions in this list."""
  or: [UserEmailFilter!]

  """Negates the expression."""
  not: UserEmailFilter
}

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `avatarUrl` field."""
  avatarUrl: StringFilter

  """Filter by the object’s `isAdmin` field."""
  isAdmin: BooleanFilter

  """Filter by the object’s `isVerified` field."""
  isVerified: BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `defaultHandlingOfNotifications` field."""
  defaultHandlingOfNotifications: NotificationSettingFilter

  """Filter by the object’s `sendingTimeForDeferredNotifications` field."""
  sendingTimeForDeferredNotifications: TimeFilter

  """Filter by the object’s `hasPassword` field."""
  hasPassword: BooleanFilter

  """Filter by the object’s `userEmails` relation."""
  userEmails: UserToManyUserEmailFilter

  """Some related `userEmails` exist."""
  userEmailsExist: Boolean

  """Filter by the object’s `userAuthentications` relation."""
  userAuthentications: UserToManyUserAuthenticationFilter

  """Some related `userAuthentications` exist."""
  userAuthenticationsExist: Boolean

  """Filter by the object’s `organizationMemberships` relation."""
  organizationMemberships: UserToManyOrganizationMembershipFilter

  """Some related `organizationMemberships` exist."""
  organizationMembershipsExist: Boolean

  """Filter by the object’s `roomSubscriptionsBySubscriberId` relation."""
  roomSubscriptionsBySubscriberId: UserToManyRoomSubscriptionFilter

  """Some related `roomSubscriptionsBySubscriberId` exist."""
  roomSubscriptionsBySubscriberIdExist: Boolean

  """Filter by the object’s `authoredTopics` relation."""
  authoredTopics: UserToManyTopicFilter

  """Some related `authoredTopics` exist."""
  authoredTopicsExist: Boolean

  """Filter by the object’s `roomMessagesBySenderId` relation."""
  roomMessagesBySenderId: UserToManyRoomMessageFilter

  """Some related `roomMessagesBySenderId` exist."""
  roomMessagesBySenderIdExist: Boolean

  """Filter by the object’s `roomItems` relation."""
  roomItems: UserToManyRoomItemFilter

  """Some related `roomItems` exist."""
  roomItemsExist: Boolean

  """Filter by the object’s `filesByContributorId` relation."""
  filesByContributorId: UserToManyFileFilter

  """Some related `filesByContributorId` exist."""
  filesByContributorIdExist: Boolean

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Negates the expression."""
  not: UserFilter
}

"""
A filter to be used against NotificationSetting fields. All fields are combined with a logical ‘and.’
"""
input NotificationSettingFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: NotificationSetting

  """Not equal to the specified value."""
  notEqualTo: NotificationSetting

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: NotificationSetting

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: NotificationSetting

  """Included in the specified list."""
  in: [NotificationSetting!]

  """Not included in the specified list."""
  notIn: [NotificationSetting!]

  """Less than the specified value."""
  lessThan: NotificationSetting

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: NotificationSetting

  """Greater than the specified value."""
  greaterThan: NotificationSetting

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: NotificationSetting
}

"""
A filter to be used against Time fields. All fields are combined with a logical ‘and.’
"""
input TimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Time

  """Not equal to the specified value."""
  notEqualTo: Time

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Time

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Time

  """Included in the specified list."""
  in: [Time!]

  """Not included in the specified list."""
  notIn: [Time!]

  """Less than the specified value."""
  lessThan: Time

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Time

  """Greater than the specified value."""
  greaterThan: Time

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Time
}

"""
A filter to be used against many `UserEmail` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserEmailFilter {
  """
  Every related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserEmailFilter

  """
  Some related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserEmailFilter

  """
  No related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserEmailFilter
}

"""
A filter to be used against many `UserAuthentication` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserAuthenticationFilter {
  """
  Every related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserAuthenticationFilter

  """
  Some related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserAuthenticationFilter

  """
  No related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserAuthenticationFilter
}

"""
A filter to be used against `UserAuthentication` object types. All fields are combined with a logical ‘and.’
"""
input UserAuthenticationFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter

  """Filter by the object’s `service` field."""
  service: StringFilter

  """Filter by the object’s `identifier` field."""
  identifier: StringFilter

  """Filter by the object’s `details` field."""
  details: JSONFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Checks for all expressions in this list."""
  and: [UserAuthenticationFilter!]

  """Checks for any expressions in this list."""
  or: [UserAuthenticationFilter!]

  """Negates the expression."""
  not: UserAuthenticationFilter
}

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

"""
Represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against many `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyOrganizationMembershipFilter {
  """
  Every related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OrganizationMembershipFilter

  """
  Some related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OrganizationMembershipFilter

  """
  No related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OrganizationMembershipFilter
}

"""
A filter to be used against `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationMembershipFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter

  """Filter by the object’s `isOwner` field."""
  isOwner: BooleanFilter

  """Filter by the object’s `isBillingContact` field."""
  isBillingContact: BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `organization` relation."""
  organization: OrganizationFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Checks for all expressions in this list."""
  and: [OrganizationMembershipFilter!]

  """Checks for any expressions in this list."""
  or: [OrganizationMembershipFilter!]

  """Negates the expression."""
  not: OrganizationMembershipFilter
}

"""
A filter to be used against `Organization` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `currentUserIsBillingContact` field."""
  currentUserIsBillingContact: BooleanFilter

  """Filter by the object’s `currentUserIsOwner` field."""
  currentUserIsOwner: BooleanFilter

  """Filter by the object’s `organizationMemberships` relation."""
  organizationMemberships: OrganizationToManyOrganizationMembershipFilter

  """Some related `organizationMemberships` exist."""
  organizationMembershipsExist: Boolean

  """Filter by the object’s `rooms` relation."""
  rooms: OrganizationToManyRoomFilter

  """Some related `rooms` exist."""
  roomsExist: Boolean

  """Filter by the object’s `topics` relation."""
  topics: OrganizationToManyTopicFilter

  """Some related `topics` exist."""
  topicsExist: Boolean

  """Checks for all expressions in this list."""
  and: [OrganizationFilter!]

  """Checks for any expressions in this list."""
  or: [OrganizationFilter!]

  """Negates the expression."""
  not: OrganizationFilter
}

"""
A filter to be used against many `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationToManyOrganizationMembershipFilter {
  """
  Every related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OrganizationMembershipFilter

  """
  Some related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OrganizationMembershipFilter

  """
  No related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OrganizationMembershipFilter
}

"""
A filter to be used against many `Room` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationToManyRoomFilter {
  """
  Every related `Room` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomFilter

  """
  Some related `Room` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomFilter

  """
  No related `Room` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomFilter
}

"""
A filter to be used against `Room` object types. All fields are combined with a logical ‘and.’
"""
input RoomFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `abstract` field."""
  abstract: StringFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `isVisibleFor` field."""
  isVisibleFor: RoomVisibilityFilter

  """Filter by the object’s `itemsAreVisibleFor` field."""
  itemsAreVisibleFor: RoomRoleFilter

  """Filter by the object’s `itemsAreVisibleSince` field."""
  itemsAreVisibleSince: RoomHistoryVisibilityFilter

  """Filter by the object’s `itemsAreVisibleSinceDate` field."""
  itemsAreVisibleSinceDate: DatetimeFilter

  """Filter by the object’s `draftItemsAreVisibleFor` field."""
  draftItemsAreVisibleFor: RoomRoleFilter

  """Filter by the object’s `extendVisibilityOfItemsBy` field."""
  extendVisibilityOfItemsBy: IntervalFilter

  """Filter by the object’s `isAnonymousPostingAllowed` field."""
  isAnonymousPostingAllowed: BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `mySubscriptionId` field."""
  mySubscriptionId: UUIDFilter

  """Filter by the object’s `latestItemContributedAt` field."""
  latestItemContributedAt: DatetimeFilter

  """Filter by the object’s `myFirstInteraction` field."""
  myFirstInteraction: DatetimeFilter

  """Filter by the object’s `nItems` field."""
  nItems: BigIntFilter

  """Filter by the object’s `nItemsSinceLastVisit` field."""
  nItemsSinceLastVisit: BigIntFilter

  """Filter by the object’s `hasSubscriptions` field."""
  hasSubscriptions: BooleanFilter

  """Filter by the object’s `nSubscriptions` field."""
  nSubscriptions: BigIntFilter

  """Filter by the object’s `subscriptions` relation."""
  subscriptions: RoomToManyRoomSubscriptionFilter

  """Some related `subscriptions` exist."""
  subscriptionsExist: Boolean

  """Filter by the object’s `messages` relation."""
  messages: RoomToManyRoomMessageFilter

  """Some related `messages` exist."""
  messagesExist: Boolean

  """Filter by the object’s `items` relation."""
  items: RoomToManyRoomItemFilter

  """Some related `items` exist."""
  itemsExist: Boolean

  """Filter by the object’s `organization` relation."""
  organization: OrganizationFilter

  """A related `organization` exists."""
  organizationExists: Boolean

  """Checks for all expressions in this list."""
  and: [RoomFilter!]

  """Checks for any expressions in this list."""
  or: [RoomFilter!]

  """Negates the expression."""
  not: RoomFilter
}

"""
A filter to be used against RoomVisibility fields. All fields are combined with a logical ‘and.’
"""
input RoomVisibilityFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: RoomVisibility

  """Not equal to the specified value."""
  notEqualTo: RoomVisibility

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: RoomVisibility

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: RoomVisibility

  """Included in the specified list."""
  in: [RoomVisibility!]

  """Not included in the specified list."""
  notIn: [RoomVisibility!]

  """Less than the specified value."""
  lessThan: RoomVisibility

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: RoomVisibility

  """Greater than the specified value."""
  greaterThan: RoomVisibility

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: RoomVisibility
}

enum RoomVisibility {
  SUBSCRIBERS
  ORGANIZATION_MEMBERS
  SIGNED_IN_USERS
  PUBLIC
}

"""
A filter to be used against RoomRole fields. All fields are combined with a logical ‘and.’
"""
input RoomRoleFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: RoomRole

  """Not equal to the specified value."""
  notEqualTo: RoomRole

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: RoomRole

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: RoomRole

  """Included in the specified list."""
  in: [RoomRole!]

  """Not included in the specified list."""
  notIn: [RoomRole!]

  """Less than the specified value."""
  lessThan: RoomRole

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: RoomRole

  """Greater than the specified value."""
  greaterThan: RoomRole

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: RoomRole
}

"""
A filter to be used against RoomHistoryVisibility fields. All fields are combined with a logical ‘and.’
"""
input RoomHistoryVisibilityFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: RoomHistoryVisibility

  """Not equal to the specified value."""
  notEqualTo: RoomHistoryVisibility

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: RoomHistoryVisibility

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: RoomHistoryVisibility

  """Included in the specified list."""
  in: [RoomHistoryVisibility!]

  """Not included in the specified list."""
  notIn: [RoomHistoryVisibility!]

  """Less than the specified value."""
  lessThan: RoomHistoryVisibility

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: RoomHistoryVisibility

  """Greater than the specified value."""
  greaterThan: RoomHistoryVisibility

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: RoomHistoryVisibility
}

enum RoomHistoryVisibility {
  SUBSCRIPTION
  INVITATION
  SPECIFIED_DATE
  ALWAYS
}

"""
A filter to be used against Interval fields. All fields are combined with a logical ‘and.’
"""
input IntervalFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: IntervalInput

  """Not equal to the specified value."""
  notEqualTo: IntervalInput

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IntervalInput

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IntervalInput

  """Included in the specified list."""
  in: [IntervalInput!]

  """Not included in the specified list."""
  notIn: [IntervalInput!]

  """Less than the specified value."""
  lessThan: IntervalInput

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IntervalInput

  """Greater than the specified value."""
  greaterThan: IntervalInput

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IntervalInput
}

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt
}

"""
A filter to be used against many `RoomSubscription` object types. All fields are combined with a logical ‘and.’
"""
input RoomToManyRoomSubscriptionFilter {
  """
  Every related `RoomSubscription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomSubscriptionFilter

  """
  Some related `RoomSubscription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomSubscriptionFilter

  """
  No related `RoomSubscription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomSubscriptionFilter
}

"""
A filter to be used against `RoomSubscription` object types. All fields are combined with a logical ‘and.’
"""
input RoomSubscriptionFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `roomId` field."""
  roomId: UUIDFilter

  """Filter by the object’s `subscriberId` field."""
  subscriberId: UUIDFilter

  """Filter by the object’s `role` field."""
  role: RoomRoleFilter

  """Filter by the object’s `notifications` field."""
  notifications: NotificationSettingFilter

  """Filter by the object’s `lastVisitAt` field."""
  lastVisitAt: DatetimeFilter

  """Filter by the object’s `lastNotificationAt` field."""
  lastNotificationAt: DatetimeFilter

  """Filter by the object’s `isStarred` field."""
  isStarred: BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `room` relation."""
  room: RoomFilter

  """Filter by the object’s `subscriber` relation."""
  subscriber: UserFilter

  """Checks for all expressions in this list."""
  and: [RoomSubscriptionFilter!]

  """Checks for any expressions in this list."""
  or: [RoomSubscriptionFilter!]

  """Negates the expression."""
  not: RoomSubscriptionFilter
}

"""
A filter to be used against many `RoomMessage` object types. All fields are combined with a logical ‘and.’
"""
input RoomToManyRoomMessageFilter {
  """
  Every related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomMessageFilter

  """
  Some related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomMessageFilter

  """
  No related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomMessageFilter
}

"""
A filter to be used against `RoomMessage` object types. All fields are combined with a logical ‘and.’
"""
input RoomMessageFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `roomId` field."""
  roomId: UUIDFilter

  """Filter by the object’s `senderId` field."""
  senderId: UUIDFilter

  """Filter by the object’s `answeredMessageId` field."""
  answeredMessageId: UUIDFilter

  """Filter by the object’s `body` field."""
  body: StringFilter

  """Filter by the object’s `language` field."""
  language: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `sentAt` field."""
  sentAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `answers` relation."""
  answers: RoomMessageToManyRoomMessageFilter

  """Some related `answers` exist."""
  answersExist: Boolean

  """Filter by the object’s `attachments` relation."""
  attachments: RoomMessageToManyRoomMessageAttachmentFilter

  """Some related `attachments` exist."""
  attachmentsExist: Boolean

  """Filter by the object’s `answeredMessage` relation."""
  answeredMessage: RoomMessageFilter

  """A related `answeredMessage` exists."""
  answeredMessageExists: Boolean

  """Filter by the object’s `room` relation."""
  room: RoomFilter

  """Filter by the object’s `sender` relation."""
  sender: UserFilter

  """A related `sender` exists."""
  senderExists: Boolean

  """Checks for all expressions in this list."""
  and: [RoomMessageFilter!]

  """Checks for any expressions in this list."""
  or: [RoomMessageFilter!]

  """Negates the expression."""
  not: RoomMessageFilter
}

"""
A filter to be used against many `RoomMessage` object types. All fields are combined with a logical ‘and.’
"""
input RoomMessageToManyRoomMessageFilter {
  """
  Every related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomMessageFilter

  """
  Some related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomMessageFilter

  """
  No related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomMessageFilter
}

"""
A filter to be used against many `RoomMessageAttachment` object types. All fields are combined with a logical ‘and.’
"""
input RoomMessageToManyRoomMessageAttachmentFilter {
  """
  Every related `RoomMessageAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomMessageAttachmentFilter

  """
  Some related `RoomMessageAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomMessageAttachmentFilter

  """
  No related `RoomMessageAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomMessageAttachmentFilter
}

"""
A filter to be used against `RoomMessageAttachment` object types. All fields are combined with a logical ‘and.’
"""
input RoomMessageAttachmentFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `roomMessageId` field."""
  roomMessageId: UUIDFilter

  """Filter by the object’s `topicId` field."""
  topicId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `message` relation."""
  message: RoomMessageFilter

  """Filter by the object’s `topic` relation."""
  topic: TopicFilter

  """Checks for all expressions in this list."""
  and: [RoomMessageAttachmentFilter!]

  """Checks for any expressions in this list."""
  or: [RoomMessageAttachmentFilter!]

  """Negates the expression."""
  not: RoomMessageAttachmentFilter
}

"""
A filter to be used against `Topic` object types. All fields are combined with a logical ‘and.’
"""
input TopicFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `authorId` field."""
  authorId: UUIDFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `license` field."""
  license: StringFilter

  """Filter by the object’s `tags` field."""
  tags: StringListFilter

  """Filter by the object’s `isVisibleFor` field."""
  isVisibleFor: TopicVisibilityFilter

  """Filter by the object’s `content` field."""
  content: JSONFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `contentAsPlainText` field."""
  contentAsPlainText: StringFilter

  """Filter by the object’s `contentPreview` field."""
  contentPreview: JSONFilter

  """Filter by the object’s `roomMessageAttachments` relation."""
  roomMessageAttachments: TopicToManyRoomMessageAttachmentFilter

  """Some related `roomMessageAttachments` exist."""
  roomMessageAttachmentsExist: Boolean

  """Filter by the object’s `roomItems` relation."""
  roomItems: TopicToManyRoomItemFilter

  """Some related `roomItems` exist."""
  roomItemsExist: Boolean

  """Filter by the object’s `roomItemAttachments` relation."""
  roomItemAttachments: TopicToManyRoomItemAttachmentFilter

  """Some related `roomItemAttachments` exist."""
  roomItemAttachmentsExist: Boolean

  """Filter by the object’s `author` relation."""
  author: UserFilter

  """A related `author` exists."""
  authorExists: Boolean

  """Filter by the object’s `organization` relation."""
  organization: OrganizationFilter

  """A related `organization` exists."""
  organizationExists: Boolean

  """Checks for all expressions in this list."""
  and: [TopicFilter!]

  """Checks for any expressions in this list."""
  or: [TopicFilter!]

  """Negates the expression."""
  not: TopicFilter
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """Contains the specified list of values."""
  contains: [String]

  """Contained by the specified list of values."""
  containedBy: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]

  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String
}

"""
A filter to be used against TopicVisibility fields. All fields are combined with a logical ‘and.’
"""
input TopicVisibilityFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: TopicVisibility

  """Not equal to the specified value."""
  notEqualTo: TopicVisibility

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: TopicVisibility

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: TopicVisibility

  """Included in the specified list."""
  in: [TopicVisibility!]

  """Not included in the specified list."""
  notIn: [TopicVisibility!]

  """Less than the specified value."""
  lessThan: TopicVisibility

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: TopicVisibility

  """Greater than the specified value."""
  greaterThan: TopicVisibility

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: TopicVisibility
}

enum TopicVisibility {
  ORGANIZATION_MEMBERS
  SIGNED_IN_USERS
  PUBLIC
}

"""
A filter to be used against many `RoomMessageAttachment` object types. All fields are combined with a logical ‘and.’
"""
input TopicToManyRoomMessageAttachmentFilter {
  """
  Every related `RoomMessageAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomMessageAttachmentFilter

  """
  Some related `RoomMessageAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomMessageAttachmentFilter

  """
  No related `RoomMessageAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomMessageAttachmentFilter
}

"""
A filter to be used against many `RoomItem` object types. All fields are combined with a logical ‘and.’
"""
input TopicToManyRoomItemFilter {
  """
  Every related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomItemFilter

  """
  Some related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomItemFilter

  """
  No related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomItemFilter
}

"""
A filter to be used against `RoomItem` object types. All fields are combined with a logical ‘and.’
"""
input RoomItemFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `type` field."""
  type: RoomItemTypeFilter

  """Filter by the object’s `roomId` field."""
  roomId: UUIDFilter

  """Filter by the object’s `parentId` field."""
  parentId: UUIDFilter

  """Filter by the object’s `contributorId` field."""
  contributorId: UUIDFilter

  """Filter by the object’s `order` field."""
  order: FloatFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `contributedAt` field."""
  contributedAt: DatetimeFilter

  """Filter by the object’s `isVisibleFor` field."""
  isVisibleFor: RoomRoleFilter

  """Filter by the object’s `isVisibleSince` field."""
  isVisibleSince: RoomHistoryVisibilityFilter

  """Filter by the object’s `isVisibleSinceDate` field."""
  isVisibleSinceDate: DatetimeFilter

  """Filter by the object’s `topicId` field."""
  topicId: UUIDFilter

  """Filter by the object’s `messageBody` field."""
  messageBody: JSONFilter

  """Filter by the object’s `nthItemSinceLastVisit` field."""
  nthItemSinceLastVisit: BigIntFilter

  """Filter by the object’s `children` relation."""
  children: RoomItemToManyRoomItemFilter

  """Some related `children` exist."""
  childrenExist: Boolean

  """Filter by the object’s `roomItemAttachments` relation."""
  roomItemAttachments: RoomItemToManyRoomItemAttachmentFilter

  """Some related `roomItemAttachments` exist."""
  roomItemAttachmentsExist: Boolean

  """Filter by the object’s `contributor` relation."""
  contributor: UserFilter

  """A related `contributor` exists."""
  contributorExists: Boolean

  """Filter by the object’s `parent` relation."""
  parent: RoomItemFilter

  """A related `parent` exists."""
  parentExists: Boolean

  """Filter by the object’s `room` relation."""
  room: RoomFilter

  """Filter by the object’s `topic` relation."""
  topic: TopicFilter

  """A related `topic` exists."""
  topicExists: Boolean

  """Checks for all expressions in this list."""
  and: [RoomItemFilter!]

  """Checks for any expressions in this list."""
  or: [RoomItemFilter!]

  """Negates the expression."""
  not: RoomItemFilter
}

"""
A filter to be used against RoomItemType fields. All fields are combined with a logical ‘and.’
"""
input RoomItemTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: RoomItemType

  """Not equal to the specified value."""
  notEqualTo: RoomItemType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: RoomItemType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: RoomItemType

  """Included in the specified list."""
  in: [RoomItemType!]

  """Not included in the specified list."""
  notIn: [RoomItemType!]

  """Less than the specified value."""
  lessThan: RoomItemType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: RoomItemType

  """Greater than the specified value."""
  greaterThan: RoomItemType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: RoomItemType
}

enum RoomItemType {
  MESSAGE
  TOPIC
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

"""
A filter to be used against many `RoomItem` object types. All fields are combined with a logical ‘and.’
"""
input RoomItemToManyRoomItemFilter {
  """
  Every related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomItemFilter

  """
  Some related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomItemFilter

  """
  No related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomItemFilter
}

"""
A filter to be used against many `RoomItemAttachment` object types. All fields are combined with a logical ‘and.’
"""
input RoomItemToManyRoomItemAttachmentFilter {
  """
  Every related `RoomItemAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomItemAttachmentFilter

  """
  Some related `RoomItemAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomItemAttachmentFilter

  """
  No related `RoomItemAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomItemAttachmentFilter
}

"""
A filter to be used against `RoomItemAttachment` object types. All fields are combined with a logical ‘and.’
"""
input RoomItemAttachmentFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `roomItemId` field."""
  roomItemId: UUIDFilter

  """Filter by the object’s `topicId` field."""
  topicId: UUIDFilter

  """Filter by the object’s `fileId` field."""
  fileId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `file` relation."""
  file: FileFilter

  """A related `file` exists."""
  fileExists: Boolean

  """Filter by the object’s `roomItem` relation."""
  roomItem: RoomItemFilter

  """Filter by the object’s `topic` relation."""
  topic: TopicFilter

  """A related `topic` exists."""
  topicExists: Boolean

  """Checks for all expressions in this list."""
  and: [RoomItemAttachmentFilter!]

  """Checks for any expressions in this list."""
  or: [RoomItemAttachmentFilter!]

  """Negates the expression."""
  not: RoomItemAttachmentFilter
}

"""
A filter to be used against `File` object types. All fields are combined with a logical ‘and.’
"""
input FileFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `contributorId` field."""
  contributorId: UUIDFilter

  """Filter by the object’s `uploadedBytes` field."""
  uploadedBytes: IntFilter

  """Filter by the object’s `totalBytes` field."""
  totalBytes: IntFilter

  """Filter by the object’s `filename` field."""
  filename: StringFilter

  """Filter by the object’s `pathOnStorage` field."""
  pathOnStorage: StringFilter

  """Filter by the object’s `mimeType` field."""
  mimeType: StringFilter

  """Filter by the object’s `sha256` field."""
  sha256: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `pdfFile` relation."""
  pdfFile: PdfFileFilter

  """A related `pdfFile` exists."""
  pdfFileExists: Boolean

  """Filter by the object’s `pdfFilesByThumbnailId` relation."""
  pdfFilesByThumbnailId: FileToManyPdfFileFilter

  """Some related `pdfFilesByThumbnailId` exist."""
  pdfFilesByThumbnailIdExist: Boolean

  """Filter by the object’s `roomItemAttachments` relation."""
  roomItemAttachments: FileToManyRoomItemAttachmentFilter

  """Some related `roomItemAttachments` exist."""
  roomItemAttachmentsExist: Boolean

  """Filter by the object’s `contributor` relation."""
  contributor: UserFilter

  """A related `contributor` exists."""
  contributorExists: Boolean

  """Checks for all expressions in this list."""
  and: [FileFilter!]

  """Checks for any expressions in this list."""
  or: [FileFilter!]

  """Negates the expression."""
  not: FileFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A filter to be used against `PdfFile` object types. All fields are combined with a logical ‘and.’
"""
input PdfFileFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `pages` field."""
  pages: IntFilter

  """Filter by the object’s `metadata` field."""
  metadata: JSONFilter

  """Filter by the object’s `contentAsPlainText` field."""
  contentAsPlainText: StringFilter

  """Filter by the object’s `thumbnailId` field."""
  thumbnailId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `file` relation."""
  file: FileFilter

  """Filter by the object’s `thumbnail` relation."""
  thumbnail: FileFilter

  """A related `thumbnail` exists."""
  thumbnailExists: Boolean

  """Checks for all expressions in this list."""
  and: [PdfFileFilter!]

  """Checks for any expressions in this list."""
  or: [PdfFileFilter!]

  """Negates the expression."""
  not: PdfFileFilter
}

"""
A filter to be used against many `PdfFile` object types. All fields are combined with a logical ‘and.’
"""
input FileToManyPdfFileFilter {
  """
  Every related `PdfFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PdfFileFilter

  """
  Some related `PdfFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PdfFileFilter

  """
  No related `PdfFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PdfFileFilter
}

"""
A filter to be used against many `RoomItemAttachment` object types. All fields are combined with a logical ‘and.’
"""
input FileToManyRoomItemAttachmentFilter {
  """
  Every related `RoomItemAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomItemAttachmentFilter

  """
  Some related `RoomItemAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomItemAttachmentFilter

  """
  No related `RoomItemAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomItemAttachmentFilter
}

"""
A filter to be used against many `RoomItemAttachment` object types. All fields are combined with a logical ‘and.’
"""
input TopicToManyRoomItemAttachmentFilter {
  """
  Every related `RoomItemAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomItemAttachmentFilter

  """
  Some related `RoomItemAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomItemAttachmentFilter

  """
  No related `RoomItemAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomItemAttachmentFilter
}

"""
A filter to be used against many `RoomItem` object types. All fields are combined with a logical ‘and.’
"""
input RoomToManyRoomItemFilter {
  """
  Every related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomItemFilter

  """
  Some related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomItemFilter

  """
  No related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomItemFilter
}

"""
A filter to be used against many `Topic` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationToManyTopicFilter {
  """
  Every related `Topic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TopicFilter

  """
  Some related `Topic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TopicFilter

  """
  No related `Topic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TopicFilter
}

"""
A filter to be used against many `RoomSubscription` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyRoomSubscriptionFilter {
  """
  Every related `RoomSubscription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomSubscriptionFilter

  """
  Some related `RoomSubscription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomSubscriptionFilter

  """
  No related `RoomSubscription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomSubscriptionFilter
}

"""
A filter to be used against many `Topic` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyTopicFilter {
  """
  Every related `Topic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TopicFilter

  """
  Some related `Topic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TopicFilter

  """
  No related `Topic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TopicFilter
}

"""
A filter to be used against many `RoomMessage` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyRoomMessageFilter {
  """
  Every related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomMessageFilter

  """
  Some related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomMessageFilter

  """
  No related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomMessageFilter
}

"""
A filter to be used against many `RoomItem` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyRoomItemFilter {
  """
  Every related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomItemFilter

  """
  Some related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomItemFilter

  """
  No related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomItemFilter
}

"""
A filter to be used against many `File` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyFileFilter {
  """
  Every related `File` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FileFilter

  """
  Some related `File` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FileFilter

  """
  No related `File` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FileFilter
}

"""A connection to a list of `UserAuthentication` values."""
type UserAuthenticationsConnection {
  """A list of `UserAuthentication` objects."""
  nodes: [UserAuthentication!]!

  """
  A list of edges which contains the `UserAuthentication` and cursor to aid in pagination.
  """
  edges: [UserAuthenticationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserAuthentication` you could get from the connection.
  """
  totalCount: Int!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  userId: UUID!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  identifier: String!

  """Additional profile details extracted from this login method"""
  details: JSON!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User
}

"""A `UserAuthentication` edge in the connection."""
type UserAuthenticationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserAuthentication` at the end of the edge."""
  node: UserAuthentication!
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  SERVICE_ASC
  SERVICE_DESC
  IDENTIFIER_ASC
  IDENTIFIER_DESC
  DETAILS_ASC
  DETAILS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `UserAuthentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserAuthenticationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `service` field."""
  service: String

  """Checks for equality with the object’s `identifier` field."""
  identifier: String

  """Checks for equality with the object’s `details` field."""
  details: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `OrganizationMembership` values."""
type OrganizationMembershipsConnection {
  """A list of `OrganizationMembership` objects."""
  nodes: [OrganizationMembership!]!

  """
  A list of edges which contains the `OrganizationMembership` and cursor to aid in pagination.
  """
  edges: [OrganizationMembershipsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationMembership` you could get from the connection.
  """
  totalCount: Int!
}

type OrganizationMembership implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  organizationId: UUID!
  userId: UUID!
  isOwner: Boolean!
  isBillingContact: Boolean!
  createdAt: Datetime!

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
}

type Organization implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  currentUserIsBillingContact: Boolean
  currentUserIsOwner: Boolean
  id: UUID!
  slug: String!
  name: String!
  createdAt: Datetime!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter
  ): OrganizationMembershipsConnection!

  """Reads and enables pagination through a set of `Room`."""
  rooms(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomFilter
  ): RoomsConnection!

  """Reads and enables pagination through a set of `Topic`."""
  topics(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TopicFilter
  ): TopicsConnection!
}

"""Methods to use when ordering `OrganizationMembership`."""
enum OrganizationMembershipsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  IS_OWNER_ASC
  IS_OWNER_DESC
  IS_BILLING_CONTACT_ASC
  IS_BILLING_CONTACT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
}

"""
A condition to be used against `OrganizationMembership` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OrganizationMembershipCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `isOwner` field."""
  isOwner: Boolean

  """Checks for equality with the object’s `isBillingContact` field."""
  isBillingContact: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""A connection to a list of `Room` values."""
type RoomsConnection {
  """A list of `Room` objects."""
  nodes: [Room!]!

  """
  A list of edges which contains the `Room` and cursor to aid in pagination.
  """
  edges: [RoomsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Room` you could get from the connection."""
  totalCount: Int!
}

"""A `Room` edge in the connection."""
type RoomsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Room` at the end of the edge."""
  node: Room!
}

"""Methods to use when ordering `Room`."""
enum RoomsOrderBy {
  NATURAL
  LATEST_ITEM_CONTRIBUTED_AT_ASC
  LATEST_ITEM_CONTRIBUTED_AT_DESC
  N_ITEMS_ASC
  N_ITEMS_DESC
  N_ITEMS_SINCE_LAST_VISIT_ASC
  N_ITEMS_SINCE_LAST_VISIT_DESC
  N_SUBSCRIPTIONS_ASC
  N_SUBSCRIPTIONS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  ABSTRACT_ASC
  ABSTRACT_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  IS_VISIBLE_FOR_ASC
  IS_VISIBLE_FOR_DESC
  ITEMS_ARE_VISIBLE_FOR_ASC
  ITEMS_ARE_VISIBLE_FOR_DESC
  ITEMS_ARE_VISIBLE_SINCE_ASC
  ITEMS_ARE_VISIBLE_SINCE_DESC
  ITEMS_ARE_VISIBLE_SINCE_DATE_ASC
  ITEMS_ARE_VISIBLE_SINCE_DATE_DESC
  DRAFT_ITEMS_ARE_VISIBLE_FOR_ASC
  DRAFT_ITEMS_ARE_VISIBLE_FOR_DESC
  EXTEND_VISIBILITY_OF_ITEMS_BY_ASC
  EXTEND_VISIBILITY_OF_ITEMS_BY_DESC
  IS_ANONYMOUS_POSTING_ALLOWED_ASC
  IS_ANONYMOUS_POSTING_ALLOWED_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `Room` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RoomCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `abstract` field."""
  abstract: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `isVisibleFor` field."""
  isVisibleFor: RoomVisibility

  """Checks for equality with the object’s `itemsAreVisibleFor` field."""
  itemsAreVisibleFor: RoomRole

  """Checks for equality with the object’s `itemsAreVisibleSince` field."""
  itemsAreVisibleSince: RoomHistoryVisibility

  """
  Checks for equality with the object’s `itemsAreVisibleSinceDate` field.
  """
  itemsAreVisibleSinceDate: Datetime

  """Checks for equality with the object’s `draftItemsAreVisibleFor` field."""
  draftItemsAreVisibleFor: RoomRole

  """
  Checks for equality with the object’s `extendVisibilityOfItemsBy` field.
  """
  extendVisibilityOfItemsBy: IntervalInput

  """
  Checks for equality with the object’s `isAnonymousPostingAllowed` field.
  """
  isAnonymousPostingAllowed: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `mySubscriptionId` field."""
  mySubscriptionId: UUID

  """Checks for equality with the object’s `latestItemContributedAt` field."""
  latestItemContributedAt: Datetime

  """Checks for equality with the object’s `myFirstInteraction` field."""
  myFirstInteraction: Datetime

  """Checks for equality with the object’s `nItems` field."""
  nItems: BigInt

  """Checks for equality with the object’s `nItemsSinceLastVisit` field."""
  nItemsSinceLastVisit: BigInt

  """Checks for equality with the object’s `hasSubscriptions` field."""
  hasSubscriptions: Boolean

  """Checks for equality with the object’s `nSubscriptions` field."""
  nSubscriptions: BigInt
}

"""A connection to a list of `Topic` values."""
type TopicsConnection {
  """A list of `Topic` objects."""
  nodes: [Topic!]!

  """
  A list of edges which contains the `Topic` and cursor to aid in pagination.
  """
  edges: [TopicsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Topic` you could get from the connection."""
  totalCount: Int!
}

"""
A topic is a short text about something. Most topics should have the scope of a micro learning unit.
"""
type Topic implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  contentAsPlainText: String
  contentPreview(nFirstItems: Int): JSON
  id: UUID!
  authorId: UUID
  organizationId: UUID

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String!

  """
  Each topic has an optional title. In case of an article, this would be the headline.
  """
  title: String

  """Each topic can optionally be licensed. Hyperlinks are allowed."""
  license: String

  """Each topic can be categorized using tags."""
  tags: [String]!

  """
  Topics can be visible to anyone (`public`), to all signed-in users (`signed_in_users`), or within an organization (`organization_members`).
  """
  isVisibleFor: TopicVisibility!

  """
  The topics contents as JSON. Can be converted to HTML with https://tiptap.dev/api/utilities/html
  """
  content: JSON!
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Each topic has an author. The field might be null when the original author has unregistered from the application.
  """
  author: User

  """Reads a single `Organization` that is related to this `Topic`."""
  organization: Organization

  """Reads and enables pagination through a set of `RoomMessageAttachment`."""
  roomMessageAttachments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomMessageAttachment`."""
    orderBy: [RoomMessageAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageAttachmentFilter
  ): RoomMessageAttachmentsConnection!

  """Reads and enables pagination through a set of `RoomItem`."""
  roomItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemFilter
  ): RoomItemsConnection!

  """Reads and enables pagination through a set of `RoomItemAttachment`."""
  roomItemAttachments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomItemAttachment`."""
    orderBy: [RoomItemAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemAttachmentFilter
  ): RoomItemAttachmentsConnection!
}

"""A connection to a list of `RoomMessageAttachment` values."""
type RoomMessageAttachmentsConnection {
  """A list of `RoomMessageAttachment` objects."""
  nodes: [RoomMessageAttachment!]!

  """
  A list of edges which contains the `RoomMessageAttachment` and cursor to aid in pagination.
  """
  edges: [RoomMessageAttachmentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RoomMessageAttachment` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RoomMessageAttachment` edge in the connection."""
type RoomMessageAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoomMessageAttachment` at the end of the edge."""
  node: RoomMessageAttachment!
}

"""Methods to use when ordering `RoomMessageAttachment`."""
enum RoomMessageAttachmentsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  ROOM_MESSAGE_ID_ASC
  ROOM_MESSAGE_ID_DESC
  TOPIC_ID_ASC
  TOPIC_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
}

"""
A condition to be used against `RoomMessageAttachment` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input RoomMessageAttachmentCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `roomMessageId` field."""
  roomMessageId: UUID

  """Checks for equality with the object’s `topicId` field."""
  topicId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""A connection to a list of `RoomItem` values."""
type RoomItemsConnection {
  """A list of `RoomItem` objects."""
  nodes: [RoomItem!]!

  """
  A list of edges which contains the `RoomItem` and cursor to aid in pagination.
  """
  edges: [RoomItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RoomItem` you could get from the connection."""
  totalCount: Int!
}

"""
Room items are messages or materials, that are accessible within a certain room.
"""
type RoomItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  nthItemSinceLastVisit: BigInt
  id: UUID!

  """The kind of room item. There are messages, pages, files, and so on."""
  type: RoomItemType!
  roomId: UUID!

  """
  The items in a room can be connected to each other, basically forming one or multiple trees. For example, you can use this to keep track of conversations.
  """
  parentId: UUID

  """The id of a user who contributed the room item."""
  contributorId: UUID

  """
  The default order is 0, but you can change it to different values to sort the items.
  """
  order: Float!
  createdAt: Datetime!
  updatedAt: Datetime!
  contributedAt: Datetime

  """
  Decides which role can see the room item. This also applies to more powerful roles. If the value is not set, the default settings of the room will be used.
  """
  isVisibleFor: RoomRole

  """
  Decides if room items are always visible or only to users who subscribed before they were added. If the value is not set, the default settings of the room will be used.
  """
  isVisibleSince: RoomHistoryVisibility
  isVisibleSinceDate: Datetime
  topicId: UUID
  messageBody: JSON

  """Reads a single `User` that is related to this `RoomItem`."""
  contributor: User

  """Room items can be related in trees."""
  parent: RoomItem

  """Reads a single `Room` that is related to this `RoomItem`."""
  room: Room

  """Reads a single `Topic` that is related to this `RoomItem`."""
  topic: Topic

  """Reads and enables pagination through a set of `RoomItem`."""
  children(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemFilter
  ): RoomItemsConnection!

  """Reads and enables pagination through a set of `RoomItemAttachment`."""
  roomItemAttachments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomItemAttachment`."""
    orderBy: [RoomItemAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemAttachmentFilter
  ): RoomItemAttachmentsConnection!
}

"""Methods to use when ordering `RoomItem`."""
enum RoomItemsOrderBy {
  NATURAL
  NTH_ITEM_SINCE_LAST_VISIT_ASC
  NTH_ITEM_SINCE_LAST_VISIT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  TYPE_ASC
  TYPE_DESC
  ROOM_ID_ASC
  ROOM_ID_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  CONTRIBUTOR_ID_ASC
  CONTRIBUTOR_ID_DESC
  ORDER_ASC
  ORDER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  CONTRIBUTED_AT_ASC
  CONTRIBUTED_AT_DESC
  IS_VISIBLE_FOR_ASC
  IS_VISIBLE_FOR_DESC
  IS_VISIBLE_SINCE_ASC
  IS_VISIBLE_SINCE_DESC
  IS_VISIBLE_SINCE_DATE_ASC
  IS_VISIBLE_SINCE_DATE_DESC
  TOPIC_ID_ASC
  TOPIC_ID_DESC
  MESSAGE_BODY_ASC
  MESSAGE_BODY_DESC
}

"""
A condition to be used against `RoomItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RoomItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `type` field."""
  type: RoomItemType

  """Checks for equality with the object’s `roomId` field."""
  roomId: UUID

  """Checks for equality with the object’s `parentId` field."""
  parentId: UUID

  """Checks for equality with the object’s `contributorId` field."""
  contributorId: UUID

  """Checks for equality with the object’s `order` field."""
  order: Float

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `contributedAt` field."""
  contributedAt: Datetime

  """Checks for equality with the object’s `isVisibleFor` field."""
  isVisibleFor: RoomRole

  """Checks for equality with the object’s `isVisibleSince` field."""
  isVisibleSince: RoomHistoryVisibility

  """Checks for equality with the object’s `isVisibleSinceDate` field."""
  isVisibleSinceDate: Datetime

  """Checks for equality with the object’s `topicId` field."""
  topicId: UUID

  """Checks for equality with the object’s `messageBody` field."""
  messageBody: JSON

  """Checks for equality with the object’s `nthItemSinceLastVisit` field."""
  nthItemSinceLastVisit: BigInt
}

"""A connection to a list of `RoomItemAttachment` values."""
type RoomItemAttachmentsConnection {
  """A list of `RoomItemAttachment` objects."""
  nodes: [RoomItemAttachment!]!

  """
  A list of edges which contains the `RoomItemAttachment` and cursor to aid in pagination.
  """
  edges: [RoomItemAttachmentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RoomItemAttachment` you could get from the connection.
  """
  totalCount: Int!
}

type RoomItemAttachment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  roomItemId: UUID!
  topicId: UUID
  fileId: UUID
  createdAt: Datetime!

  """Reads a single `File` that is related to this `RoomItemAttachment`."""
  file: File

  """
  Reads a single `RoomItem` that is related to this `RoomItemAttachment`.
  """
  roomItem: RoomItem

  """Reads a single `Topic` that is related to this `RoomItemAttachment`."""
  topic: Topic
}

type File implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  contributorId: UUID
  uploadedBytes: Int
  totalBytes: Int
  filename: String
  pathOnStorage: String
  mimeType: String
  sha256: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `File`."""
  contributor: User

  """Reads a single `PdfFile` that is related to this `File`."""
  pdfFile: PdfFile

  """Reads and enables pagination through a set of `PdfFile`."""
  pdfFilesByThumbnailId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PdfFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PdfFileFilter
  ): PdfFilesConnection!

  """Reads and enables pagination through a set of `RoomItemAttachment`."""
  roomItemAttachments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RoomItemAttachment`."""
    orderBy: [RoomItemAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemAttachmentFilter
  ): RoomItemAttachmentsConnection!
}

type PdfFile implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  title: String
  pages: Int!
  metadata: JSON
  contentAsPlainText: String
  thumbnailId: UUID
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `File` that is related to this `PdfFile`."""
  file: File

  """Reads a single `File` that is related to this `PdfFile`."""
  thumbnail: File
}

"""A connection to a list of `PdfFile` values."""
type PdfFilesConnection {
  """A list of `PdfFile` objects."""
  nodes: [PdfFile!]!

  """
  A list of edges which contains the `PdfFile` and cursor to aid in pagination.
  """
  edges: [PdfFilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PdfFile` you could get from the connection."""
  totalCount: Int!
}

"""A `PdfFile` edge in the connection."""
type PdfFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PdfFile` at the end of the edge."""
  node: PdfFile!
}

"""Methods to use when ordering `PdfFile`."""
enum PdfFilesOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  PAGES_ASC
  PAGES_DESC
  METADATA_ASC
  METADATA_DESC
  CONTENT_AS_PLAIN_TEXT_ASC
  CONTENT_AS_PLAIN_TEXT_DESC
  THUMBNAIL_ID_ASC
  THUMBNAIL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `PdfFile` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PdfFileCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `pages` field."""
  pages: Int

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON

  """Checks for equality with the object’s `contentAsPlainText` field."""
  contentAsPlainText: String

  """Checks for equality with the object’s `thumbnailId` field."""
  thumbnailId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""Methods to use when ordering `RoomItemAttachment`."""
enum RoomItemAttachmentsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  ROOM_ITEM_ID_ASC
  ROOM_ITEM_ID_DESC
  TOPIC_ID_ASC
  TOPIC_ID_DESC
  FILE_ID_ASC
  FILE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
}

"""
A condition to be used against `RoomItemAttachment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RoomItemAttachmentCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `roomItemId` field."""
  roomItemId: UUID

  """Checks for equality with the object’s `topicId` field."""
  topicId: UUID

  """Checks for equality with the object’s `fileId` field."""
  fileId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""A `RoomItemAttachment` edge in the connection."""
type RoomItemAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoomItemAttachment` at the end of the edge."""
  node: RoomItemAttachment!
}

"""A `RoomItem` edge in the connection."""
type RoomItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoomItem` at the end of the edge."""
  node: RoomItem!
}

"""A `Topic` edge in the connection."""
type TopicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Topic` at the end of the edge."""
  node: Topic!
}

"""Methods to use when ordering `Topic`."""
enum TopicsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  SLUG_ASC
  SLUG_DESC
  TITLE_ASC
  TITLE_DESC
  LICENSE_ASC
  LICENSE_DESC
  IS_VISIBLE_FOR_ASC
  IS_VISIBLE_FOR_DESC
  CONTENT_ASC
  CONTENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `Topic` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TopicCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `license` field."""
  license: String

  """Checks for equality with the object’s `tags` field."""
  tags: [String]

  """Checks for equality with the object’s `isVisibleFor` field."""
  isVisibleFor: TopicVisibility

  """Checks for equality with the object’s `content` field."""
  content: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `contentAsPlainText` field."""
  contentAsPlainText: String

  """Checks for equality with the object’s `contentPreview` field."""
  contentPreview: JSON
}

"""A `OrganizationMembership` edge in the connection."""
type OrganizationMembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationMembership` at the end of the edge."""
  node: OrganizationMembership!
}

"""A connection to a list of `RoomSubscription` values."""
type RoomSubscriptionsConnection {
  """A list of `RoomSubscription` objects."""
  nodes: [RoomSubscription!]!

  """
  A list of edges which contains the `RoomSubscription` and cursor to aid in pagination.
  """
  edges: [RoomSubscriptionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RoomSubscription` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RoomSubscription` edge in the connection."""
type RoomSubscriptionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoomSubscription` at the end of the edge."""
  node: RoomSubscription!
}

"""Methods to use when ordering `RoomSubscription`."""
enum RoomSubscriptionsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  ROOM_ID_ASC
  ROOM_ID_DESC
  SUBSCRIBER_ID_ASC
  SUBSCRIBER_ID_DESC
  ROLE_ASC
  ROLE_DESC
  NOTIFICATIONS_ASC
  NOTIFICATIONS_DESC
  LAST_VISIT_AT_ASC
  LAST_VISIT_AT_DESC
  LAST_NOTIFICATION_AT_ASC
  LAST_NOTIFICATION_AT_DESC
  IS_STARRED_ASC
  IS_STARRED_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  SUBSCRIBERS_USERNAME_ASC
  SUBSCRIBERS_USERNAME_DESC
}

"""
A condition to be used against `RoomSubscription` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RoomSubscriptionCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `roomId` field."""
  roomId: UUID

  """Checks for equality with the object’s `subscriberId` field."""
  subscriberId: UUID

  """Checks for equality with the object’s `role` field."""
  role: RoomRole

  """Checks for equality with the object’s `notifications` field."""
  notifications: NotificationSetting

  """Checks for equality with the object’s `lastVisitAt` field."""
  lastVisitAt: Datetime

  """Checks for equality with the object’s `lastNotificationAt` field."""
  lastNotificationAt: Datetime

  """Checks for equality with the object’s `isStarred` field."""
  isStarred: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `RoomMessage` values."""
type RoomMessagesConnection {
  """A list of `RoomMessage` objects."""
  nodes: [RoomMessage!]!

  """
  A list of edges which contains the `RoomMessage` and cursor to aid in pagination.
  """
  edges: [RoomMessagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RoomMessage` you could get from the connection."""
  totalCount: Int!
}

"""A `RoomMessage` edge in the connection."""
type RoomMessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoomMessage` at the end of the edge."""
  node: RoomMessage!
}

"""Methods to use when ordering `RoomMessage`."""
enum RoomMessagesOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  ROOM_ID_ASC
  ROOM_ID_DESC
  SENDER_ID_ASC
  SENDER_ID_DESC
  ANSWERED_MESSAGE_ID_ASC
  ANSWERED_MESSAGE_ID_DESC
  BODY_ASC
  BODY_DESC
  LANGUAGE_ASC
  LANGUAGE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  SENT_AT_ASC
  SENT_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `RoomMessage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RoomMessageCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `roomId` field."""
  roomId: UUID

  """Checks for equality with the object’s `senderId` field."""
  senderId: UUID

  """Checks for equality with the object’s `answeredMessageId` field."""
  answeredMessageId: UUID

  """Checks for equality with the object’s `body` field."""
  body: String

  """Checks for equality with the object’s `language` field."""
  language: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `sentAt` field."""
  sentAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `File` values."""
type FilesConnection {
  """A list of `File` objects."""
  nodes: [File!]!

  """
  A list of edges which contains the `File` and cursor to aid in pagination.
  """
  edges: [FilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection."""
type FilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `File` at the end of the edge."""
  node: File!
}

"""Methods to use when ordering `File`."""
enum FilesOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  CONTRIBUTOR_ID_ASC
  CONTRIBUTOR_ID_DESC
  UPLOADED_BYTES_ASC
  UPLOADED_BYTES_DESC
  TOTAL_BYTES_ASC
  TOTAL_BYTES_DESC
  FILENAME_ASC
  FILENAME_DESC
  PATH_ON_STORAGE_ASC
  PATH_ON_STORAGE_DESC
  MIME_TYPE_ASC
  MIME_TYPE_DESC
  SHA256_ASC
  SHA256_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `File` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FileCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `contributorId` field."""
  contributorId: UUID

  """Checks for equality with the object’s `uploadedBytes` field."""
  uploadedBytes: Int

  """Checks for equality with the object’s `totalBytes` field."""
  totalBytes: Int

  """Checks for equality with the object’s `filename` field."""
  filename: String

  """Checks for equality with the object’s `pathOnStorage` field."""
  pathOnStorage: String

  """Checks for equality with the object’s `mimeType` field."""
  mimeType: String

  """Checks for equality with the object’s `sha256` field."""
  sha256: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
type Interval {
  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of minutes."""
  minutes: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of days."""
  days: Int

  """A quantity of months."""
  months: Int

  """A quantity of years."""
  years: Int
}

"""A connection to a list of `UUID` values."""
type CurrentUserInvitedOrganizationIdsConnection {
  """A list of `UUID` objects."""
  nodes: [UUID]!

  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserInvitedOrganizationIdsEdge]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type CurrentUserInvitedOrganizationIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `UUID` values."""
type CurrentUserMemberOrganizationIdsConnection {
  """A list of `UUID` objects."""
  nodes: [UUID]!

  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserMemberOrganizationIdsEdge]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type CurrentUserMemberOrganizationIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `UUID` values."""
type MySubscribedRoomIdsConnection {
  """A list of `UUID` objects."""
  nodes: [UUID]!

  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [MySubscribedRoomIdsEdge]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type MySubscribedRoomIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `TextsearchMatch` values."""
type TextsearchMatchesConnection {
  """A list of `TextsearchMatch` objects."""
  nodes: [TextsearchMatch!]!

  """
  A list of edges which contains the `TextsearchMatch` and cursor to aid in pagination.
  """
  edges: [TextsearchMatchesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TextsearchMatch` you could get from the connection.
  """
  totalCount: Int!
}

type TextsearchMatch {
  id: UUID!
  type: TextsearchableEntity!
  title: String!
  snippet: String
  rankOrSimilarity: Float!
  userId: UUID
  topicId: UUID
  roomId: UUID

  """Reads a single `User` that is related to this `TextsearchMatch`."""
  user: User

  """Reads a single `Topic` that is related to this `TextsearchMatch`."""
  topic: Topic

  """Reads a single `Room` that is related to this `TextsearchMatch`."""
  room: Room
}

enum TextsearchableEntity {
  USER
  TOPIC
  ROOM
  DOCUMENT
  FILE
}

"""A `TextsearchMatch` edge in the connection."""
type TextsearchMatchesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TextsearchMatch` at the end of the edge."""
  node: TextsearchMatch!
}

"""Methods to use when ordering `TextsearchMatch`."""
enum TextsearchMatchesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TYPE_ASC
  TYPE_DESC
  TITLE_ASC
  TITLE_DESC
  SNIPPET_ASC
  SNIPPET_DESC
  RANK_OR_SIMILARITY_ASC
  RANK_OR_SIMILARITY_DESC
  USER_ID_ASC
  USER_ID_DESC
  TOPIC_ID_ASC
  TOPIC_ID_DESC
  ROOM_ID_ASC
  ROOM_ID_DESC
}

"""
A condition to be used against `TextsearchMatch` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TextsearchMatchCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `type` field."""
  type: TextsearchableEntity

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `snippet` field."""
  snippet: String

  """Checks for equality with the object’s `rankOrSimilarity` field."""
  rankOrSimilarity: Float

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `topicId` field."""
  topicId: UUID

  """Checks for equality with the object’s `roomId` field."""
  roomId: UUID
}

"""
A filter to be used against `TextsearchMatch` object types. All fields are combined with a logical ‘and.’
"""
input TextsearchMatchFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `type` field."""
  type: TextsearchableEntityFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `snippet` field."""
  snippet: StringFilter

  """Filter by the object’s `rankOrSimilarity` field."""
  rankOrSimilarity: FloatFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter

  """Filter by the object’s `topicId` field."""
  topicId: UUIDFilter

  """Filter by the object’s `roomId` field."""
  roomId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [TextsearchMatchFilter!]

  """Checks for any expressions in this list."""
  or: [TextsearchMatchFilter!]

  """Negates the expression."""
  not: TextsearchMatchFilter
}

"""
A filter to be used against TextsearchableEntity fields. All fields are combined with a logical ‘and.’
"""
input TextsearchableEntityFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: TextsearchableEntity

  """Not equal to the specified value."""
  notEqualTo: TextsearchableEntity

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: TextsearchableEntity

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: TextsearchableEntity

  """Included in the specified list."""
  in: [TextsearchableEntity!]

  """Not included in the specified list."""
  notIn: [TextsearchableEntity!]

  """Less than the specified value."""
  lessThan: TextsearchableEntity

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: TextsearchableEntity

  """Greater than the specified value."""
  greaterThan: TextsearchableEntity

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: TextsearchableEntity
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """A list of `Organization` objects."""
  nodes: [Organization!]!

  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization!
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  SLUG_ASC
  SLUG_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """
  Checks for equality with the object’s `currentUserIsBillingContact` field.
  """
  currentUserIsBillingContact: Boolean

  """Checks for equality with the object’s `currentUserIsOwner` field."""
  currentUserIsOwner: Boolean
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User!]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  NAME_ASC
  NAME_DESC
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  DEFAULT_HANDLING_OF_NOTIFICATIONS_ASC
  DEFAULT_HANDLING_OF_NOTIFICATIONS_DESC
  SENDING_TIME_FOR_DEFERRED_NOTIFICATIONS_ASC
  SENDING_TIME_FOR_DEFERRED_NOTIFICATIONS_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String

  """Checks for equality with the object’s `isAdmin` field."""
  isAdmin: Boolean

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """
  Checks for equality with the object’s `defaultHandlingOfNotifications` field.
  """
  defaultHandlingOfNotifications: NotificationSetting

  """
  Checks for equality with the object’s `sendingTimeForDeferredNotifications` field.
  """
  sendingTimeForDeferredNotifications: Time

  """Checks for equality with the object’s `hasPassword` field."""
  hasPassword: Boolean
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Begin the account deletion flow by requesting the confirmation email"""
  requestAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RequestAccountDeletionInput!
  ): RequestAccountDeletionPayload
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """
  If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion.
  """
  confirmAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmAccountDeletionInput!
  ): ConfirmAccountDeletionPayload

  """
  If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently.
  """
  resendEmailVerificationCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResendEmailVerificationCodeInput!
  ): ResendEmailVerificationCodePayload
  acceptInvitationToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AcceptInvitationToOrganizationInput!
  ): AcceptInvitationToOrganizationPayload
  removeFromOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveFromOrganizationInput!
  ): RemoveFromOrganizationPayload

  """Enter your old password and a new password to change your password."""
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload

  """
  Once you have received a verification token for your email, you may call this mutation with that token to make your email verified.
  """
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload

  """
  If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address!
  """
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload
  inviteToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InviteToOrganizationInput!
  ): InviteToOrganizationPayload
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload
  transferOrganizationBillingContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationBillingContactInput!
  ): TransferOrganizationBillingContactPayload
  transferOrganizationOwnership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationOwnershipInput!
  ): TransferOrganizationOwnershipPayload

  """
  Your primary email is where we'll notify of account events; other emails may be used for discovery or login. Use this when you're changing your email address.
  """
  makeEmailPrimary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeEmailPrimaryInput!
  ): MakeEmailPrimaryPayload
  sendRoomMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SendRoomMessageInput!
  ): SendRoomMessagePayload

  """Creates a single `RoomMessageAttachment`."""
  createRoomMessageAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomMessageAttachmentInput!
  ): CreateRoomMessageAttachmentPayload

  """Creates a single `RoomItemAttachment`."""
  createRoomItemAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomItemAttachmentInput!
  ): CreateRoomItemAttachmentPayload

  """Creates a single `UserEmail`."""
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """Creates a single `RoomMessage`."""
  createRoomMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomMessageInput!
  ): CreateRoomMessagePayload

  """Creates a single `PdfFile`."""
  createPdfFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePdfFileInput!
  ): CreatePdfFilePayload

  """Creates a single `File`."""
  createFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFileInput!
  ): CreateFilePayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `RoomSubscription`."""
  createRoomSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomSubscriptionInput!
  ): CreateRoomSubscriptionPayload

  """Creates a single `RoomItem`."""
  createRoomItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomItemInput!
  ): CreateRoomItemPayload

  """Creates a single `Topic`."""
  createTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTopicInput!
  ): CreateTopicPayload

  """Creates a single `Room`."""
  createRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomInput!
  ): CreateRoomPayload

  """
  Updates a single `Organization` using its globally unique id and a patch.
  """
  updateOrganizationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByNodeIdInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganizationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationBySlugInput!
  ): UpdateOrganizationPayload

  """
  Updates a single `RoomMessage` using its globally unique id and a patch.
  """
  updateRoomMessageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomMessageByNodeIdInput!
  ): UpdateRoomMessagePayload

  """Updates a single `RoomMessage` using a unique key and a patch."""
  updateRoomMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomMessageInput!
  ): UpdateRoomMessagePayload

  """Updates a single `PdfFile` using its globally unique id and a patch."""
  updatePdfFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePdfFileByNodeIdInput!
  ): UpdatePdfFilePayload

  """Updates a single `PdfFile` using a unique key and a patch."""
  updatePdfFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePdfFileInput!
  ): UpdatePdfFilePayload

  """Updates a single `File` using its globally unique id and a patch."""
  updateFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFileByNodeIdInput!
  ): UpdateFilePayload

  """Updates a single `File` using a unique key and a patch."""
  updateFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFileInput!
  ): UpdateFilePayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """
  Updates a single `RoomSubscription` using its globally unique id and a patch.
  """
  updateRoomSubscriptionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomSubscriptionByNodeIdInput!
  ): UpdateRoomSubscriptionPayload

  """Updates a single `RoomSubscription` using a unique key and a patch."""
  updateRoomSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomSubscriptionInput!
  ): UpdateRoomSubscriptionPayload

  """Updates a single `RoomSubscription` using a unique key and a patch."""
  updateRoomSubscriptionBySubscriberIdAndRoomId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomSubscriptionBySubscriberIdAndRoomIdInput!
  ): UpdateRoomSubscriptionPayload

  """Updates a single `RoomItem` using its globally unique id and a patch."""
  updateRoomItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomItemByNodeIdInput!
  ): UpdateRoomItemPayload

  """Updates a single `RoomItem` using a unique key and a patch."""
  updateRoomItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomItemInput!
  ): UpdateRoomItemPayload

  """Updates a single `Topic` using its globally unique id and a patch."""
  updateTopicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicByNodeIdInput!
  ): UpdateTopicPayload

  """Updates a single `Topic` using a unique key and a patch."""
  updateTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicInput!
  ): UpdateTopicPayload

  """Updates a single `Topic` using a unique key and a patch."""
  updateTopicBySlugAndOrganizationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicBySlugAndOrganizationIdInput!
  ): UpdateTopicPayload

  """Updates a single `Room` using its globally unique id and a patch."""
  updateRoomByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomByNodeIdInput!
  ): UpdateRoomPayload

  """Updates a single `Room` using a unique key and a patch."""
  updateRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomInput!
  ): UpdateRoomPayload

  """Deletes a single `RoomMessageAttachment` using its globally unique id."""
  deleteRoomMessageAttachmentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomMessageAttachmentByNodeIdInput!
  ): DeleteRoomMessageAttachmentPayload

  """Deletes a single `RoomMessageAttachment` using a unique key."""
  deleteRoomMessageAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomMessageAttachmentInput!
  ): DeleteRoomMessageAttachmentPayload

  """Deletes a single `RoomMessageAttachment` using a unique key."""
  deleteRoomMessageAttachmentByTopicIdAndRoomMessageId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomMessageAttachmentByTopicIdAndRoomMessageIdInput!
  ): DeleteRoomMessageAttachmentPayload

  """Deletes a single `RoomItemAttachment` using its globally unique id."""
  deleteRoomItemAttachmentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomItemAttachmentByNodeIdInput!
  ): DeleteRoomItemAttachmentPayload

  """Deletes a single `RoomItemAttachment` using a unique key."""
  deleteRoomItemAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomItemAttachmentInput!
  ): DeleteRoomItemAttachmentPayload

  """Deletes a single `UserAuthentication` using its globally unique id."""
  deleteUserAuthenticationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByNodeIdInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthenticationByServiceAndIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByServiceAndIdentifierInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserEmail` using its globally unique id."""
  deleteUserEmailByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByNodeIdInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmailByUserIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByUserIdAndEmailInput!
  ): DeleteUserEmailPayload

  """Deletes a single `RoomMessage` using its globally unique id."""
  deleteRoomMessageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomMessageByNodeIdInput!
  ): DeleteRoomMessagePayload

  """Deletes a single `RoomMessage` using a unique key."""
  deleteRoomMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomMessageInput!
  ): DeleteRoomMessagePayload

  """Deletes a single `PdfFile` using its globally unique id."""
  deletePdfFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePdfFileByNodeIdInput!
  ): DeletePdfFilePayload

  """Deletes a single `PdfFile` using a unique key."""
  deletePdfFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePdfFileInput!
  ): DeletePdfFilePayload

  """Deletes a single `File` using its globally unique id."""
  deleteFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileByNodeIdInput!
  ): DeleteFilePayload

  """Deletes a single `File` using a unique key."""
  deleteFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileInput!
  ): DeleteFilePayload

  """Deletes a single `RoomSubscription` using its globally unique id."""
  deleteRoomSubscriptionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomSubscriptionByNodeIdInput!
  ): DeleteRoomSubscriptionPayload

  """Deletes a single `RoomSubscription` using a unique key."""
  deleteRoomSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomSubscriptionInput!
  ): DeleteRoomSubscriptionPayload

  """Deletes a single `RoomSubscription` using a unique key."""
  deleteRoomSubscriptionBySubscriberIdAndRoomId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomSubscriptionBySubscriberIdAndRoomIdInput!
  ): DeleteRoomSubscriptionPayload

  """Deletes a single `RoomItem` using its globally unique id."""
  deleteRoomItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomItemByNodeIdInput!
  ): DeleteRoomItemPayload

  """Deletes a single `RoomItem` using a unique key."""
  deleteRoomItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomItemInput!
  ): DeleteRoomItemPayload

  """Deletes a single `Topic` using its globally unique id."""
  deleteTopicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicByNodeIdInput!
  ): DeleteTopicPayload

  """Deletes a single `Topic` using a unique key."""
  deleteTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicInput!
  ): DeleteTopicPayload

  """Deletes a single `Topic` using a unique key."""
  deleteTopicBySlugAndOrganizationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicBySlugAndOrganizationIdInput!
  ): DeleteTopicPayload

  """Deletes a single `Room` using its globally unique id."""
  deleteRoomByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomByNodeIdInput!
  ): DeleteRoomPayload

  """Deletes a single `Room` using a unique key."""
  deleteRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomInput!
  ): DeleteRoomPayload

  """
  Use this mutation to create an account on our system. This may only be used if you are logged out.
  """
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload

  """
  Use this mutation to log in to your account; this login uses sessions so you do not need to take further action.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload

  """
  After triggering forgotPassword, you'll be sent a reset token. Combine this with your user ID and a new password to reset your password.
  """
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload
}

"""The output of our `requestAccountDeletion` mutation."""
type RequestAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `requestAccountDeletion` mutation."""
input RequestAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `deleteOrganization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOrganization` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
}

"""The output of our `confirmAccountDeletion` mutation."""
type ConfirmAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `confirmAccountDeletion` mutation."""
input ConfirmAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
}

"""The output of our `resendEmailVerificationCode` mutation."""
type ResendEmailVerificationCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resendEmailVerificationCode` mutation."""
input ResendEmailVerificationCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `acceptInvitationToOrganization` mutation."""
type AcceptInvitationToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `acceptInvitationToOrganization` mutation."""
input AcceptInvitationToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  invitationId: UUID!
  code: String
}

"""The output of our `removeFromOrganization` mutation."""
type RemoveFromOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `removeFromOrganization` mutation."""
input RemoveFromOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  oldPassword: String!
  newPassword: String!
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userEmailId: UUID!
  token: String!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `inviteToOrganization` mutation."""
type InviteToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `inviteToOrganization` mutation."""
input InviteToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  username: String
  email: String
}

"""The output of our `createOrganization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `createOrganization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String!
  name: String!
}

"""The output of our `transferOrganizationBillingContact` mutation."""
type TransferOrganizationBillingContactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `transferOrganizationBillingContact` mutation."""
input TransferOrganizationBillingContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `transferOrganizationOwnership` mutation."""
type TransferOrganizationOwnershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `transferOrganizationOwnership` mutation."""
input TransferOrganizationOwnershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `makeEmailPrimary` mutation."""
type MakeEmailPrimaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  userEmail: UserEmail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
}

"""All input for the `makeEmailPrimary` mutation."""
input MakeEmailPrimaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `sendRoomMessage` mutation."""
type SendRoomMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  roomMessage: RoomMessage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomMessage`. May be used by Relay 1."""
  roomMessageEdge(
    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomMessagesEdge

  """Reads a single `RoomMessage` that is related to this `RoomMessage`."""
  answeredMessage: RoomMessage

  """Reads a single `Room` that is related to this `RoomMessage`."""
  room: Room

  """Reads a single `User` that is related to this `RoomMessage`."""
  sender: User
}

"""All input for the `sendRoomMessage` mutation."""
input SendRoomMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  draftId: UUID!
}

"""The output of our create `RoomMessageAttachment` mutation."""
type CreateRoomMessageAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoomMessageAttachment` that was created by this mutation."""
  roomMessageAttachment: RoomMessageAttachment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomMessageAttachment`. May be used by Relay 1."""
  roomMessageAttachmentEdge(
    """The method to use when ordering `RoomMessageAttachment`."""
    orderBy: [RoomMessageAttachmentsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomMessageAttachmentsEdge

  """
  Reads a single `RoomMessage` that is related to this `RoomMessageAttachment`.
  """
  message: RoomMessage

  """
  Reads a single `Topic` that is related to this `RoomMessageAttachment`.
  """
  topic: Topic
}

"""All input for the create `RoomMessageAttachment` mutation."""
input CreateRoomMessageAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoomMessageAttachment` to be created by this mutation."""
  roomMessageAttachment: RoomMessageAttachmentInput!
}

"""An input for mutations affecting `RoomMessageAttachment`"""
input RoomMessageAttachmentInput {
  id: UUID
  roomMessageId: UUID!
  topicId: UUID!
}

"""The output of our create `RoomItemAttachment` mutation."""
type CreateRoomItemAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoomItemAttachment` that was created by this mutation."""
  roomItemAttachment: RoomItemAttachment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomItemAttachment`. May be used by Relay 1."""
  roomItemAttachmentEdge(
    """The method to use when ordering `RoomItemAttachment`."""
    orderBy: [RoomItemAttachmentsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomItemAttachmentsEdge

  """Reads a single `File` that is related to this `RoomItemAttachment`."""
  file: File

  """
  Reads a single `RoomItem` that is related to this `RoomItemAttachment`.
  """
  roomItem: RoomItem

  """Reads a single `Topic` that is related to this `RoomItemAttachment`."""
  topic: Topic
}

"""All input for the create `RoomItemAttachment` mutation."""
input CreateRoomItemAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoomItemAttachment` to be created by this mutation."""
  roomItemAttachment: RoomItemAttachmentInput!
}

"""An input for mutations affecting `RoomItemAttachment`"""
input RoomItemAttachmentInput {
  id: UUID
  roomItemId: UUID!
  topicId: UUID
  fileId: UUID
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserEmail` that was created by this mutation."""
  userEmail: UserEmail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be created by this mutation."""
  userEmail: UserEmailInput!
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
  """The users email address, in `a@b.c` format."""
  email: String!
}

"""The output of our create `RoomMessage` mutation."""
type CreateRoomMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoomMessage` that was created by this mutation."""
  roomMessage: RoomMessage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomMessage`. May be used by Relay 1."""
  roomMessageEdge(
    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomMessagesEdge

  """Reads a single `RoomMessage` that is related to this `RoomMessage`."""
  answeredMessage: RoomMessage

  """Reads a single `Room` that is related to this `RoomMessage`."""
  room: Room

  """Reads a single `User` that is related to this `RoomMessage`."""
  sender: User
}

"""All input for the create `RoomMessage` mutation."""
input CreateRoomMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoomMessage` to be created by this mutation."""
  roomMessage: RoomMessageInput!
}

"""An input for mutations affecting `RoomMessage`"""
input RoomMessageInput {
  roomId: UUID!
  senderId: UUID
  answeredMessageId: UUID
  body: String
  language: String
  sentAt: Datetime
}

"""The output of our create `PdfFile` mutation."""
type CreatePdfFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PdfFile` that was created by this mutation."""
  pdfFile: PdfFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PdfFile`. May be used by Relay 1."""
  pdfFileEdge(
    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PdfFilesEdge

  """Reads a single `File` that is related to this `PdfFile`."""
  file: File

  """Reads a single `File` that is related to this `PdfFile`."""
  thumbnail: File
}

"""All input for the create `PdfFile` mutation."""
input CreatePdfFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PdfFile` to be created by this mutation."""
  pdfFile: PdfFileInput!
}

"""An input for mutations affecting `PdfFile`"""
input PdfFileInput {
  id: UUID!
  title: String
  pages: Int!
  metadata: JSON
  contentAsPlainText: String
  thumbnailId: UUID
}

"""The output of our create `File` mutation."""
type CreateFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `File` that was created by this mutation."""
  file: File

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FilesEdge

  """Reads a single `User` that is related to this `File`."""
  contributor: User
}

"""All input for the create `File` mutation."""
input CreateFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `File` to be created by this mutation."""
  file: FileInput!
}

"""An input for mutations affecting `File`"""
input FileInput {
  id: UUID
  contributorId: UUID
  uploadedBytes: Int
  totalBytes: Int
  filename: String
  mimeType: String
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  """
  Users can be notified about activities in the rooms they have subscribed to. This is the default setting. You can change it for each room.
  """
  defaultHandlingOfNotifications: NotificationSetting

  """
  If there are any delayed notifications, they are sent at this time every day.
  """
  sendingTimeForDeferredNotifications: Time
}

"""The output of our create `RoomSubscription` mutation."""
type CreateRoomSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoomSubscription` that was created by this mutation."""
  roomSubscription: RoomSubscription

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomSubscription`. May be used by Relay 1."""
  roomSubscriptionEdge(
    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsEdge

  """Reads a single `Room` that is related to this `RoomSubscription`."""
  room: Room

  """Reads a single `User` that is related to this `RoomSubscription`."""
  subscriber: User
}

"""All input for the create `RoomSubscription` mutation."""
input CreateRoomSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoomSubscription` to be created by this mutation."""
  roomSubscription: RoomSubscriptionInput!
}

"""An input for mutations affecting `RoomSubscription`"""
input RoomSubscriptionInput {
  roomId: UUID!

  """The subscribing user."""
  subscriberId: UUID

  """Maintainers can manage subscriptions and delete the room."""
  role: RoomRole
  notifications: NotificationSetting
  lastVisitAt: Datetime
}

"""The output of our create `RoomItem` mutation."""
type CreateRoomItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoomItem` that was created by this mutation."""
  roomItem: RoomItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomItem`. May be used by Relay 1."""
  roomItemEdge(
    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomItemsEdge

  """Reads a single `User` that is related to this `RoomItem`."""
  contributor: User

  """Room items can be related in trees."""
  parent: RoomItem

  """Reads a single `Room` that is related to this `RoomItem`."""
  room: Room

  """Reads a single `Topic` that is related to this `RoomItem`."""
  topic: Topic
}

"""All input for the create `RoomItem` mutation."""
input CreateRoomItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoomItem` to be created by this mutation."""
  roomItem: RoomItemInput!
}

"""An input for mutations affecting `RoomItem`"""
input RoomItemInput {
  """The kind of room item. There are messages, pages, files, and so on."""
  type: RoomItemType
  roomId: UUID!

  """
  The items in a room can be connected to each other, basically forming one or multiple trees. For example, you can use this to keep track of conversations.
  """
  parentId: UUID

  """The id of a user who contributed the room item."""
  contributorId: UUID

  """
  The default order is 0, but you can change it to different values to sort the items.
  """
  order: Float
  contributedAt: Datetime

  """
  Decides which role can see the room item. This also applies to more powerful roles. If the value is not set, the default settings of the room will be used.
  """
  isVisibleFor: RoomRole

  """
  Decides if room items are always visible or only to users who subscribed before they were added. If the value is not set, the default settings of the room will be used.
  """
  isVisibleSince: RoomHistoryVisibility
  isVisibleSinceDate: Datetime
  topicId: UUID
  messageBody: JSON
}

"""The output of our create `Topic` mutation."""
type CreateTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Topic` that was created by this mutation."""
  topic: Topic

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TopicsEdge

  """
  Each topic has an author. The field might be null when the original author has unregistered from the application.
  """
  author: User

  """Reads a single `Organization` that is related to this `Topic`."""
  organization: Organization
}

"""All input for the create `Topic` mutation."""
input CreateTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Topic` to be created by this mutation."""
  topic: TopicInput!
}

"""An input for mutations affecting `Topic`"""
input TopicInput {
  authorId: UUID
  organizationId: UUID

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String!

  """
  Each topic has an optional title. In case of an article, this would be the headline.
  """
  title: String

  """Each topic can optionally be licensed. Hyperlinks are allowed."""
  license: String

  """Each topic can be categorized using tags."""
  tags: [String]

  """
  Topics can be visible to anyone (`public`), to all signed-in users (`signed_in_users`), or within an organization (`organization_members`).
  """
  isVisibleFor: TopicVisibility

  """
  The topics contents as JSON. Can be converted to HTML with https://tiptap.dev/api/utilities/html
  """
  content: JSON!
}

"""The output of our create `Room` mutation."""
type CreateRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Room` that was created by this mutation."""
  room: Room

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomsEdge

  """Each room can optionally belong to an organization."""
  organization: Organization
}

"""All input for the create `Room` mutation."""
input CreateRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Room` to be created by this mutation."""
  room: RoomInput!
}

"""An input for mutations affecting `Room`"""
input RoomInput {
  """Each room has an optional title."""
  title: String

  """Each room has an optional abstract."""
  abstract: String

  """
  Rooms can be visible for their subscribers only (`subscribers`), to all members of the room's organisation (`organization_members`), for all currently signed-in users (`signed_in_users`), or general in `public`.
  """
  isVisibleFor: RoomVisibility
  itemsAreVisibleFor: RoomRole

  """
  Sometimes you want to hide items of the room from users who join later. `since_subscription` allows subscribers to see items that were added *after* their subscription. Similarly, `since_invitation` allows subscribers to see items that were added *after* they had been invited to the room. `since_specified_date` allows all subscribers to see items after `items_are_visible_since_date`. Finally, `always` means that all items are visible for the room's audience.
  """
  itemsAreVisibleSince: RoomHistoryVisibility
  isAnonymousPostingAllowed: Boolean
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `updateOrganizationByNodeId` mutation."""
input UpdateOrganizationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  slug: String
  name: String
}

"""All input for the `updateOrganization` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""All input for the `updateOrganizationBySlug` mutation."""
input UpdateOrganizationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""The output of our update `RoomMessage` mutation."""
type UpdateRoomMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoomMessage` that was updated by this mutation."""
  roomMessage: RoomMessage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomMessage`. May be used by Relay 1."""
  roomMessageEdge(
    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomMessagesEdge

  """Reads a single `RoomMessage` that is related to this `RoomMessage`."""
  answeredMessage: RoomMessage

  """Reads a single `Room` that is related to this `RoomMessage`."""
  room: Room

  """Reads a single `User` that is related to this `RoomMessage`."""
  sender: User
}

"""All input for the `updateRoomMessageByNodeId` mutation."""
input UpdateRoomMessageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomMessage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RoomMessage` being updated.
  """
  patch: RoomMessagePatch!
}

"""
Represents an update to a `RoomMessage`. Fields that are set will be updated.
"""
input RoomMessagePatch {
  answeredMessageId: UUID
  body: String
  language: String
  sentAt: Datetime
}

"""All input for the `updateRoomMessage` mutation."""
input UpdateRoomMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `RoomMessage` being updated.
  """
  patch: RoomMessagePatch!
}

"""The output of our update `PdfFile` mutation."""
type UpdatePdfFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PdfFile` that was updated by this mutation."""
  pdfFile: PdfFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PdfFile`. May be used by Relay 1."""
  pdfFileEdge(
    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PdfFilesEdge

  """Reads a single `File` that is related to this `PdfFile`."""
  file: File

  """Reads a single `File` that is related to this `PdfFile`."""
  thumbnail: File
}

"""All input for the `updatePdfFileByNodeId` mutation."""
input UpdatePdfFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PdfFile` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PdfFile` being updated.
  """
  patch: PdfFilePatch!
}

"""
Represents an update to a `PdfFile`. Fields that are set will be updated.
"""
input PdfFilePatch {
  id: UUID
  title: String
  pages: Int
  metadata: JSON
  contentAsPlainText: String
  thumbnailId: UUID
}

"""All input for the `updatePdfFile` mutation."""
input UpdatePdfFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `PdfFile` being updated.
  """
  patch: PdfFilePatch!
}

"""The output of our update `File` mutation."""
type UpdateFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `File` that was updated by this mutation."""
  file: File

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FilesEdge

  """Reads a single `User` that is related to this `File`."""
  contributor: User
}

"""All input for the `updateFileByNodeId` mutation."""
input UpdateFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `File` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `File` being updated.
  """
  patch: FilePatch!
}

"""Represents an update to a `File`. Fields that are set will be updated."""
input FilePatch {
  id: UUID
  uploadedBytes: Int
  totalBytes: Int
  filename: String
  mimeType: String
}

"""All input for the `updateFile` mutation."""
input UpdateFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `File` being updated.
  """
  patch: FilePatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Public-facing username (or 'handle') of the user."""
  username: String

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Optional avatar URL."""
  avatarUrl: String

  """
  Users can be notified about activities in the rooms they have subscribed to. This is the default setting. You can change it for each room.
  """
  defaultHandlingOfNotifications: NotificationSetting

  """
  If there are any delayed notifications, they are sent at this time every day.
  """
  sendingTimeForDeferredNotifications: Time
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Public-facing username (or 'handle') of the user."""
  username: String!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `RoomSubscription` mutation."""
type UpdateRoomSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoomSubscription` that was updated by this mutation."""
  roomSubscription: RoomSubscription

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomSubscription`. May be used by Relay 1."""
  roomSubscriptionEdge(
    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsEdge

  """Reads a single `Room` that is related to this `RoomSubscription`."""
  room: Room

  """Reads a single `User` that is related to this `RoomSubscription`."""
  subscriber: User
}

"""All input for the `updateRoomSubscriptionByNodeId` mutation."""
input UpdateRoomSubscriptionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomSubscription` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RoomSubscription` being updated.
  """
  patch: RoomSubscriptionPatch!
}

"""
Represents an update to a `RoomSubscription`. Fields that are set will be updated.
"""
input RoomSubscriptionPatch {
  """Maintainers can manage subscriptions and delete the room."""
  role: RoomRole
  notifications: NotificationSetting
  lastVisitAt: Datetime
}

"""All input for the `updateRoomSubscription` mutation."""
input UpdateRoomSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `RoomSubscription` being updated.
  """
  patch: RoomSubscriptionPatch!
}

"""
All input for the `updateRoomSubscriptionBySubscriberIdAndRoomId` mutation.
"""
input UpdateRoomSubscriptionBySubscriberIdAndRoomIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The subscribing user."""
  subscriberId: UUID!
  roomId: UUID!

  """
  An object where the defined keys will be set on the `RoomSubscription` being updated.
  """
  patch: RoomSubscriptionPatch!
}

"""The output of our update `RoomItem` mutation."""
type UpdateRoomItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoomItem` that was updated by this mutation."""
  roomItem: RoomItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomItem`. May be used by Relay 1."""
  roomItemEdge(
    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomItemsEdge

  """Reads a single `User` that is related to this `RoomItem`."""
  contributor: User

  """Room items can be related in trees."""
  parent: RoomItem

  """Reads a single `Room` that is related to this `RoomItem`."""
  room: Room

  """Reads a single `Topic` that is related to this `RoomItem`."""
  topic: Topic
}

"""All input for the `updateRoomItemByNodeId` mutation."""
input UpdateRoomItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RoomItem` being updated.
  """
  patch: RoomItemPatch!
}

"""
Represents an update to a `RoomItem`. Fields that are set will be updated.
"""
input RoomItemPatch {
  """
  The items in a room can be connected to each other, basically forming one or multiple trees. For example, you can use this to keep track of conversations.
  """
  parentId: UUID

  """
  The default order is 0, but you can change it to different values to sort the items.
  """
  order: Float
  contributedAt: Datetime

  """
  Decides which role can see the room item. This also applies to more powerful roles. If the value is not set, the default settings of the room will be used.
  """
  isVisibleFor: RoomRole

  """
  Decides if room items are always visible or only to users who subscribed before they were added. If the value is not set, the default settings of the room will be used.
  """
  isVisibleSince: RoomHistoryVisibility
  isVisibleSinceDate: Datetime
  topicId: UUID
  messageBody: JSON
}

"""All input for the `updateRoomItem` mutation."""
input UpdateRoomItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `RoomItem` being updated.
  """
  patch: RoomItemPatch!
}

"""The output of our update `Topic` mutation."""
type UpdateTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Topic` that was updated by this mutation."""
  topic: Topic

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TopicsEdge

  """
  Each topic has an author. The field might be null when the original author has unregistered from the application.
  """
  author: User

  """Reads a single `Organization` that is related to this `Topic`."""
  organization: Organization
}

"""All input for the `updateTopicByNodeId` mutation."""
input UpdateTopicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""
Represents an update to a `Topic`. Fields that are set will be updated.
"""
input TopicPatch {
  authorId: UUID
  organizationId: UUID

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String

  """
  Each topic has an optional title. In case of an article, this would be the headline.
  """
  title: String

  """Each topic can optionally be licensed. Hyperlinks are allowed."""
  license: String

  """Each topic can be categorized using tags."""
  tags: [String]

  """
  Topics can be visible to anyone (`public`), to all signed-in users (`signed_in_users`), or within an organization (`organization_members`).
  """
  isVisibleFor: TopicVisibility

  """
  The topics contents as JSON. Can be converted to HTML with https://tiptap.dev/api/utilities/html
  """
  content: JSON
}

"""All input for the `updateTopic` mutation."""
input UpdateTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""All input for the `updateTopicBySlugAndOrganizationId` mutation."""
input UpdateTopicBySlugAndOrganizationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String!
  organizationId: UUID!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""The output of our update `Room` mutation."""
type UpdateRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Room` that was updated by this mutation."""
  room: Room

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomsEdge

  """Each room can optionally belong to an organization."""
  organization: Organization
}

"""All input for the `updateRoomByNodeId` mutation."""
input UpdateRoomByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Room` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Room` being updated.
  """
  patch: RoomPatch!
}

"""Represents an update to a `Room`. Fields that are set will be updated."""
input RoomPatch {
  """Each room has an optional title."""
  title: String

  """Each room has an optional abstract."""
  abstract: String

  """
  Rooms can be visible for their subscribers only (`subscribers`), to all members of the room's organisation (`organization_members`), for all currently signed-in users (`signed_in_users`), or general in `public`.
  """
  isVisibleFor: RoomVisibility
  itemsAreVisibleFor: RoomRole

  """
  Sometimes you want to hide items of the room from users who join later. `since_subscription` allows subscribers to see items that were added *after* their subscription. Similarly, `since_invitation` allows subscribers to see items that were added *after* they had been invited to the room. `since_specified_date` allows all subscribers to see items after `items_are_visible_since_date`. Finally, `always` means that all items are visible for the room's audience.
  """
  itemsAreVisibleSince: RoomHistoryVisibility
  isAnonymousPostingAllowed: Boolean
}

"""All input for the `updateRoom` mutation."""
input UpdateRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Room` being updated.
  """
  patch: RoomPatch!
}

"""The output of our delete `RoomMessageAttachment` mutation."""
type DeleteRoomMessageAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoomMessageAttachment` that was deleted by this mutation."""
  roomMessageAttachment: RoomMessageAttachment
  deletedRoomMessageAttachmentNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomMessageAttachment`. May be used by Relay 1."""
  roomMessageAttachmentEdge(
    """The method to use when ordering `RoomMessageAttachment`."""
    orderBy: [RoomMessageAttachmentsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomMessageAttachmentsEdge

  """
  Reads a single `RoomMessage` that is related to this `RoomMessageAttachment`.
  """
  message: RoomMessage

  """
  Reads a single `Topic` that is related to this `RoomMessageAttachment`.
  """
  topic: Topic
}

"""All input for the `deleteRoomMessageAttachmentByNodeId` mutation."""
input DeleteRoomMessageAttachmentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomMessageAttachment` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRoomMessageAttachment` mutation."""
input DeleteRoomMessageAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteRoomMessageAttachmentByTopicIdAndRoomMessageId` mutation.
"""
input DeleteRoomMessageAttachmentByTopicIdAndRoomMessageIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  topicId: UUID!
  roomMessageId: UUID!
}

"""The output of our delete `RoomItemAttachment` mutation."""
type DeleteRoomItemAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoomItemAttachment` that was deleted by this mutation."""
  roomItemAttachment: RoomItemAttachment
  deletedRoomItemAttachmentNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomItemAttachment`. May be used by Relay 1."""
  roomItemAttachmentEdge(
    """The method to use when ordering `RoomItemAttachment`."""
    orderBy: [RoomItemAttachmentsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomItemAttachmentsEdge

  """Reads a single `File` that is related to this `RoomItemAttachment`."""
  file: File

  """
  Reads a single `RoomItem` that is related to this `RoomItemAttachment`.
  """
  roomItem: RoomItem

  """Reads a single `Topic` that is related to this `RoomItemAttachment`."""
  topic: Topic
}

"""All input for the `deleteRoomItemAttachmentByNodeId` mutation."""
input DeleteRoomItemAttachmentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomItemAttachment` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRoomItemAttachment` mutation."""
input DeleteRoomItemAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAuthentication` that was deleted by this mutation."""
  userAuthentication: UserAuthentication
  deletedUserAuthenticationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User
}

"""All input for the `deleteUserAuthenticationByNodeId` mutation."""
input DeleteUserAuthenticationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthentication` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteUserAuthenticationByServiceAndIdentifier` mutation.
"""
input DeleteUserAuthenticationByServiceAndIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  identifier: String!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserEmail` that was deleted by this mutation."""
  userEmail: UserEmail
  deletedUserEmailNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
}

"""All input for the `deleteUserEmailByNodeId` mutation."""
input DeleteUserEmailByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmail` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteUserEmailByUserIdAndEmail` mutation."""
input DeleteUserEmailByUserIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!

  """The users email address, in `a@b.c` format."""
  email: String!
}

"""The output of our delete `RoomMessage` mutation."""
type DeleteRoomMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoomMessage` that was deleted by this mutation."""
  roomMessage: RoomMessage
  deletedRoomMessageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomMessage`. May be used by Relay 1."""
  roomMessageEdge(
    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomMessagesEdge

  """Reads a single `RoomMessage` that is related to this `RoomMessage`."""
  answeredMessage: RoomMessage

  """Reads a single `Room` that is related to this `RoomMessage`."""
  room: Room

  """Reads a single `User` that is related to this `RoomMessage`."""
  sender: User
}

"""All input for the `deleteRoomMessageByNodeId` mutation."""
input DeleteRoomMessageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomMessage` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRoomMessage` mutation."""
input DeleteRoomMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `PdfFile` mutation."""
type DeletePdfFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PdfFile` that was deleted by this mutation."""
  pdfFile: PdfFile
  deletedPdfFileNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PdfFile`. May be used by Relay 1."""
  pdfFileEdge(
    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PdfFilesEdge

  """Reads a single `File` that is related to this `PdfFile`."""
  file: File

  """Reads a single `File` that is related to this `PdfFile`."""
  thumbnail: File
}

"""All input for the `deletePdfFileByNodeId` mutation."""
input DeletePdfFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PdfFile` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePdfFile` mutation."""
input DeletePdfFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `File` mutation."""
type DeleteFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `File` that was deleted by this mutation."""
  file: File
  deletedFileNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FilesEdge

  """Reads a single `User` that is related to this `File`."""
  contributor: User
}

"""All input for the `deleteFileByNodeId` mutation."""
input DeleteFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `File` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFile` mutation."""
input DeleteFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `RoomSubscription` mutation."""
type DeleteRoomSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoomSubscription` that was deleted by this mutation."""
  roomSubscription: RoomSubscription
  deletedRoomSubscriptionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomSubscription`. May be used by Relay 1."""
  roomSubscriptionEdge(
    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsEdge

  """Reads a single `Room` that is related to this `RoomSubscription`."""
  room: Room

  """Reads a single `User` that is related to this `RoomSubscription`."""
  subscriber: User
}

"""All input for the `deleteRoomSubscriptionByNodeId` mutation."""
input DeleteRoomSubscriptionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomSubscription` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRoomSubscription` mutation."""
input DeleteRoomSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteRoomSubscriptionBySubscriberIdAndRoomId` mutation.
"""
input DeleteRoomSubscriptionBySubscriberIdAndRoomIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The subscribing user."""
  subscriberId: UUID!
  roomId: UUID!
}

"""The output of our delete `RoomItem` mutation."""
type DeleteRoomItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RoomItem` that was deleted by this mutation."""
  roomItem: RoomItem
  deletedRoomItemNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RoomItem`. May be used by Relay 1."""
  roomItemEdge(
    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomItemsEdge

  """Reads a single `User` that is related to this `RoomItem`."""
  contributor: User

  """Room items can be related in trees."""
  parent: RoomItem

  """Reads a single `Room` that is related to this `RoomItem`."""
  room: Room

  """Reads a single `Topic` that is related to this `RoomItem`."""
  topic: Topic
}

"""All input for the `deleteRoomItemByNodeId` mutation."""
input DeleteRoomItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRoomItem` mutation."""
input DeleteRoomItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Topic` mutation."""
type DeleteTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Topic` that was deleted by this mutation."""
  topic: Topic
  deletedTopicNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TopicsEdge

  """
  Each topic has an author. The field might be null when the original author has unregistered from the application.
  """
  author: User

  """Reads a single `Organization` that is related to this `Topic`."""
  organization: Organization
}

"""All input for the `deleteTopicByNodeId` mutation."""
input DeleteTopicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTopic` mutation."""
input DeleteTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteTopicBySlugAndOrganizationId` mutation."""
input DeleteTopicBySlugAndOrganizationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String!
  organizationId: UUID!
}

"""The output of our delete `Room` mutation."""
type DeleteRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Room` that was deleted by this mutation."""
  room: Room
  deletedRoomNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomsEdge

  """Each room can optionally belong to an organization."""
  organization: Organization
}

"""All input for the `deleteRoomByNodeId` mutation."""
input DeleteRoomByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Room` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRoom` mutation."""
input DeleteRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

type RegisterPayload {
  user: User!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
  name: String
  avatarUrl: String
}

type LoginPayload {
  user: User!
}

input LoginInput {
  username: String!
  password: String!
}

type LogoutPayload {
  success: Boolean
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!
  resetToken: String!
  newPassword: String!
}
