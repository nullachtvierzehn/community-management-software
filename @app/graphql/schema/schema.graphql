"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Get a single `OrganizationMembership`."""
  organizationMembership(id: UUID!): OrganizationMembership

  """Get a single `OrganizationMembership`."""
  organizationMembershipByOrganizationIdAndUserId(organizationId: UUID!, userId: UUID!): OrganizationMembership

  """Get a single `Organization`."""
  organization(id: UUID!): Organization

  """Get a single `Organization`."""
  organizationBySlug(slug: String!): Organization

  """Get a single `UserEmail`."""
  userEmail(id: UUID!): UserEmail

  """Get a single `UserEmail`."""
  userEmailByUserIdAndEmail(userId: UUID!, email: String!): UserEmail

  """Get a single `User`."""
  user(id: UUID!): User

  """Get a single `User`."""
  userByUsername(username: String!): User

  """Get a single `UserAuthentication`."""
  userAuthentication(id: UUID!): UserAuthentication

  """Get a single `UserAuthentication`."""
  userAuthenticationByServiceAndIdentifier(service: String!, identifier: String!): UserAuthentication

  """Get a single `ActiveMessageRevision`."""
  activeMessageRevision(id: UUID!, revisionId: UUID!): ActiveMessageRevision

  """Get a single `CurrentMessageRevision`."""
  currentMessageRevision(id: UUID!): CurrentMessageRevision

  """Get a single `MessageRevision`."""
  messageRevision(id: UUID!, revisionId: UUID!): MessageRevision

  """Handy method to get the current session ID."""
  currentSessionId: UUID
  currentUserFirstMemberOrganizationId: UUID

  """
  Handy method to get the current user ID for use in RLS policies, etc; in GraphQL, use `currentUser{id}` instead.
  """
  currentUserId: UUID

  """Reads and enables pagination through a set of `Uuid`."""
  currentUserInvitedOrganizationIds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UUIDFilter
  ): CurrentUserInvitedOrganizationIdsConnection

  """Reads and enables pagination through a set of `Uuid`."""
  currentUserMemberOrganizationIds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UUIDFilter
  ): CurrentUserMemberOrganizationIdsConnection
  organizationForInvitation(invitationId: UUID!, code: String): Organization

  """The currently logged in user (or null if not logged in)."""
  currentUser: User

  """
  Reads a single `OrganizationMembership` using its globally unique `ID`.
  """
  organizationMembershipByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OrganizationMembership`.
    """
    nodeId: ID!
  ): OrganizationMembership

  """Reads a single `Organization` using its globally unique `ID`."""
  organizationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Organization`.
    """
    nodeId: ID!
  ): Organization

  """Reads a single `UserEmail` using its globally unique `ID`."""
  userEmailByNodeId(
    """The globally unique `ID` to be used in selecting a single `UserEmail`."""
    nodeId: ID!
  ): UserEmail

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads a single `UserAuthentication` using its globally unique `ID`."""
  userAuthenticationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserAuthentication`.
    """
    nodeId: ID!
  ): UserAuthentication

  """Reads a single `ActiveMessageRevision` using its globally unique `ID`."""
  activeMessageRevisionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ActiveMessageRevision`.
    """
    nodeId: ID!
  ): ActiveMessageRevision

  """
  Reads a single `CurrentMessageRevision` using its globally unique `ID`.
  """
  currentMessageRevisionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CurrentMessageRevision`.
    """
    nodeId: ID!
  ): CurrentMessageRevision

  """Reads a single `MessageRevision` using its globally unique `ID`."""
  messageRevisionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MessageRevision`.
    """
    nodeId: ID!
  ): MessageRevision

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter
  ): OrganizationMembershipsConnection

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter
  ): OrganizationsConnection

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserEmailFilter
  ): UserEmailsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthentications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAuthenticationFilter
  ): UserAuthenticationsConnection

  """Reads and enables pagination through a set of `ActiveMessageRevision`."""
  activeMessageRevisions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ActiveMessageRevision`."""
    orderBy: [ActiveMessageRevisionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActiveMessageRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActiveMessageRevisionFilter
  ): ActiveMessageRevisionsConnection

  """
  Reads and enables pagination through a set of `CurrentMessageRevision`.
  """
  currentMessageRevisions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CurrentMessageRevision`."""
    orderBy: [CurrentMessageRevisionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CurrentMessageRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CurrentMessageRevisionFilter
  ): CurrentMessageRevisionsConnection

  """Reads and enables pagination through a set of `MessageRevision`."""
  messageRevisions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MessageRevision`."""
    orderBy: [MessageRevisionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageRevisionFilter
  ): MessageRevisionsConnection
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type OrganizationMembership implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  organizationId: UUID!
  userId: UUID!
  isOwner: Boolean!
  isBillingContact: Boolean!
  createdAt: Datetime!

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

type Organization implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  currentUserIsBillingContact: Boolean
  currentUserIsOwner: Boolean
  id: UUID!
  slug: String!
  name: String!
  createdAt: Datetime!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter
  ): OrganizationMembershipsConnection!
}

"""A connection to a list of `OrganizationMembership` values."""
type OrganizationMembershipsConnection {
  """A list of `OrganizationMembership` objects."""
  nodes: [OrganizationMembership!]!

  """
  A list of edges which contains the `OrganizationMembership` and cursor to aid in pagination.
  """
  edges: [OrganizationMembershipsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationMembership` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrganizationMembership` edge in the connection."""
type OrganizationMembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationMembership` at the end of the edge."""
  node: OrganizationMembership!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `OrganizationMembership`."""
enum OrganizationMembershipsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  IS_OWNER_ASC
  IS_OWNER_DESC
  IS_BILLING_CONTACT_ASC
  IS_BILLING_CONTACT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
}

"""
A condition to be used against `OrganizationMembership` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OrganizationMembershipCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `isOwner` field."""
  isOwner: Boolean

  """Checks for equality with the object’s `isBillingContact` field."""
  isBillingContact: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationMembershipFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter

  """Filter by the object’s `isOwner` field."""
  isOwner: BooleanFilter

  """Filter by the object’s `isBillingContact` field."""
  isBillingContact: BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `organization` relation."""
  organization: OrganizationFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Checks for all expressions in this list."""
  and: [OrganizationMembershipFilter!]

  """Checks for any expressions in this list."""
  or: [OrganizationMembershipFilter!]

  """Negates the expression."""
  not: OrganizationMembershipFilter
}

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
A filter to be used against `Organization` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `currentUserIsBillingContact` field."""
  currentUserIsBillingContact: BooleanFilter

  """Filter by the object’s `currentUserIsOwner` field."""
  currentUserIsOwner: BooleanFilter

  """Filter by the object’s `organizationMemberships` relation."""
  organizationMemberships: OrganizationToManyOrganizationMembershipFilter

  """Some related `organizationMemberships` exist."""
  organizationMembershipsExist: Boolean

  """Checks for all expressions in this list."""
  and: [OrganizationFilter!]

  """Checks for any expressions in this list."""
  or: [OrganizationFilter!]

  """Negates the expression."""
  not: OrganizationFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against many `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationToManyOrganizationMembershipFilter {
  """
  Every related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OrganizationMembershipFilter

  """
  Some related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OrganizationMembershipFilter

  """
  No related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OrganizationMembershipFilter
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `avatarUrl` field."""
  avatarUrl: StringFilter

  """Filter by the object’s `isAdmin` field."""
  isAdmin: BooleanFilter

  """Filter by the object’s `isVerified` field."""
  isVerified: BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `hasPassword` field."""
  hasPassword: BooleanFilter

  """Filter by the object’s `userEmails` relation."""
  userEmails: UserToManyUserEmailFilter

  """Some related `userEmails` exist."""
  userEmailsExist: Boolean

  """Filter by the object’s `userAuthentications` relation."""
  userAuthentications: UserToManyUserAuthenticationFilter

  """Some related `userAuthentications` exist."""
  userAuthenticationsExist: Boolean

  """Filter by the object’s `organizationMemberships` relation."""
  organizationMemberships: UserToManyOrganizationMembershipFilter

  """Some related `organizationMemberships` exist."""
  organizationMembershipsExist: Boolean

  """Filter by the object’s `editedMessageRevisions` relation."""
  editedMessageRevisions: UserToManyMessageRevisionFilter

  """Some related `editedMessageRevisions` exist."""
  editedMessageRevisionsExist: Boolean

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Negates the expression."""
  not: UserFilter
}

"""
A filter to be used against many `UserEmail` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserEmailFilter {
  """
  Every related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserEmailFilter

  """
  Some related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserEmailFilter

  """
  No related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserEmailFilter
}

"""
A filter to be used against `UserEmail` object types. All fields are combined with a logical ‘and.’
"""
input UserEmailFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `isVerified` field."""
  isVerified: BooleanFilter

  """Filter by the object’s `isPrimary` field."""
  isPrimary: BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Checks for all expressions in this list."""
  and: [UserEmailFilter!]

  """Checks for any expressions in this list."""
  or: [UserEmailFilter!]

  """Negates the expression."""
  not: UserEmailFilter
}

"""
A filter to be used against many `UserAuthentication` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserAuthenticationFilter {
  """
  Every related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserAuthenticationFilter

  """
  Some related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserAuthenticationFilter

  """
  No related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserAuthenticationFilter
}

"""
A filter to be used against `UserAuthentication` object types. All fields are combined with a logical ‘and.’
"""
input UserAuthenticationFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter

  """Filter by the object’s `service` field."""
  service: StringFilter

  """Filter by the object’s `identifier` field."""
  identifier: StringFilter

  """Filter by the object’s `details` field."""
  details: JSONFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Checks for all expressions in this list."""
  and: [UserAuthenticationFilter!]

  """Checks for any expressions in this list."""
  or: [UserAuthenticationFilter!]

  """Negates the expression."""
  not: UserAuthenticationFilter
}

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

"""
Represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against many `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyOrganizationMembershipFilter {
  """
  Every related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OrganizationMembershipFilter

  """
  Some related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OrganizationMembershipFilter

  """
  No related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OrganizationMembershipFilter
}

"""
A filter to be used against many `MessageRevision` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyMessageRevisionFilter {
  """
  Every related `MessageRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MessageRevisionFilter

  """
  Some related `MessageRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MessageRevisionFilter

  """
  No related `MessageRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MessageRevisionFilter
}

"""
A filter to be used against `MessageRevision` object types. All fields are combined with a logical ‘and.’
"""
input MessageRevisionFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: UUIDFilter

  """Filter by the object’s `parentRevisionId` field."""
  parentRevisionId: UUIDFilter

  """Filter by the object’s `editorId` field."""
  editorId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updateComment` field."""
  updateComment: StringFilter

  """Filter by the object’s `subject` field."""
  subject: StringFilter

  """Filter by the object’s `body` field."""
  body: JSONFilter

  """Filter by the object’s `childRevisions` relation."""
  childRevisions: MessageRevisionToManyMessageRevisionFilter

  """Some related `childRevisions` exist."""
  childRevisionsExist: Boolean

  """Filter by the object’s `editor` relation."""
  editor: UserFilter

  """A related `editor` exists."""
  editorExists: Boolean

  """Filter by the object’s `parentRevision` relation."""
  parentRevision: MessageRevisionFilter

  """A related `parentRevision` exists."""
  parentRevisionExists: Boolean

  """Checks for all expressions in this list."""
  and: [MessageRevisionFilter!]

  """Checks for any expressions in this list."""
  or: [MessageRevisionFilter!]

  """Negates the expression."""
  not: MessageRevisionFilter
}

"""
A filter to be used against many `MessageRevision` object types. All fields are combined with a logical ‘and.’
"""
input MessageRevisionToManyMessageRevisionFilter {
  """
  Every related `MessageRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MessageRevisionFilter

  """
  Some related `MessageRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MessageRevisionFilter

  """
  No related `MessageRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MessageRevisionFilter
}

"""A user who can log in to the application."""
type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  hasPassword: Boolean

  """Unique identifier for the user."""
  id: UUID!

  """Public-facing username (or 'handle') of the user."""
  username: String!

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Optional avatar URL."""
  avatarUrl: String

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  isVerified: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserEmailFilter
  ): UserEmailsConnection!

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthentications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAuthenticationFilter
  ): UserAuthenticationsConnection!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter
  ): OrganizationMembershipsConnection!

  """Reads and enables pagination through a set of `MessageRevision`."""
  editedMessageRevisions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MessageRevision`."""
    orderBy: [MessageRevisionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageRevisionFilter
  ): MessageRevisionsConnection!
}

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
  """A list of `UserEmail` objects."""
  nodes: [UserEmail!]!

  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEmail` you could get from the connection."""
  totalCount: Int!
}

"""Information about a user's email address."""
type UserEmail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  userId: UUID!

  """The users email address, in `a@b.c` format."""
  email: String!

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!
  isPrimary: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmail` at the end of the edge."""
  node: UserEmail!
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `UserAuthentication` values."""
type UserAuthenticationsConnection {
  """A list of `UserAuthentication` objects."""
  nodes: [UserAuthentication!]!

  """
  A list of edges which contains the `UserAuthentication` and cursor to aid in pagination.
  """
  edges: [UserAuthenticationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserAuthentication` you could get from the connection.
  """
  totalCount: Int!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  userId: UUID!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  identifier: String!

  """Additional profile details extracted from this login method"""
  details: JSON!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User
}

"""A `UserAuthentication` edge in the connection."""
type UserAuthenticationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserAuthentication` at the end of the edge."""
  node: UserAuthentication!
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  SERVICE_ASC
  SERVICE_DESC
  IDENTIFIER_ASC
  IDENTIFIER_DESC
  DETAILS_ASC
  DETAILS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `UserAuthentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserAuthenticationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `service` field."""
  service: String

  """Checks for equality with the object’s `identifier` field."""
  identifier: String

  """Checks for equality with the object’s `details` field."""
  details: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `MessageRevision` values."""
type MessageRevisionsConnection {
  """A list of `MessageRevision` objects."""
  nodes: [MessageRevision!]!

  """
  A list of edges which contains the `MessageRevision` and cursor to aid in pagination.
  """
  edges: [MessageRevisionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MessageRevision` you could get from the connection.
  """
  totalCount: Int!
}

type MessageRevision implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  revisionId: UUID!
  parentRevisionId: UUID
  editorId: UUID
  createdAt: Datetime!
  updatedAt: Datetime!
  updateComment: String
  subject: String
  body: JSON

  """Reads a single `User` that is related to this `MessageRevision`."""
  editor: User

  """
  Reads a single `MessageRevision` that is related to this `MessageRevision`.
  """
  parentRevision: MessageRevision

  """Reads and enables pagination through a set of `MessageRevision`."""
  childRevisions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MessageRevision`."""
    orderBy: [MessageRevisionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageRevisionFilter
  ): MessageRevisionsConnection!
}

"""Methods to use when ordering `MessageRevision`."""
enum MessageRevisionsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  PARENT_REVISION_ID_ASC
  PARENT_REVISION_ID_DESC
  EDITOR_ID_ASC
  EDITOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATE_COMMENT_ASC
  UPDATE_COMMENT_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  BODY_ASC
  BODY_DESC
}

"""
A condition to be used against `MessageRevision` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MessageRevisionCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: UUID

  """Checks for equality with the object’s `parentRevisionId` field."""
  parentRevisionId: UUID

  """Checks for equality with the object’s `editorId` field."""
  editorId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updateComment` field."""
  updateComment: String

  """Checks for equality with the object’s `subject` field."""
  subject: String

  """Checks for equality with the object’s `body` field."""
  body: JSON
}

"""A `MessageRevision` edge in the connection."""
type MessageRevisionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MessageRevision` at the end of the edge."""
  node: MessageRevision!
}

type ActiveMessageRevision implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  revisionId: UUID!
  parentRevisionId: UUID
  editorId: UUID
  createdAt: Datetime
  updatedAt: Datetime
  updateComment: String
  subject: String
  body: JSON
}

type CurrentMessageRevision implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  revisionId: UUID
  parentRevisionId: UUID
  editorId: UUID
  createdAt: Datetime
  updatedAt: Datetime
  updateComment: String
  subject: String
  body: JSON
}

"""A connection to a list of `UUID` values."""
type CurrentUserInvitedOrganizationIdsConnection {
  """A list of `UUID` objects."""
  nodes: [UUID]!

  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserInvitedOrganizationIdsEdge]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type CurrentUserInvitedOrganizationIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `UUID` values."""
type CurrentUserMemberOrganizationIdsConnection {
  """A list of `UUID` objects."""
  nodes: [UUID]!

  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserMemberOrganizationIdsEdge]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type CurrentUserMemberOrganizationIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """A list of `Organization` objects."""
  nodes: [Organization!]!

  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization!
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  SLUG_ASC
  SLUG_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """
  Checks for equality with the object’s `currentUserIsBillingContact` field.
  """
  currentUserIsBillingContact: Boolean

  """Checks for equality with the object’s `currentUserIsOwner` field."""
  currentUserIsOwner: Boolean
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User!]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  NAME_ASC
  NAME_DESC
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String

  """Checks for equality with the object’s `isAdmin` field."""
  isAdmin: Boolean

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `hasPassword` field."""
  hasPassword: Boolean
}

"""A connection to a list of `ActiveMessageRevision` values."""
type ActiveMessageRevisionsConnection {
  """A list of `ActiveMessageRevision` objects."""
  nodes: [ActiveMessageRevision!]!

  """
  A list of edges which contains the `ActiveMessageRevision` and cursor to aid in pagination.
  """
  edges: [ActiveMessageRevisionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ActiveMessageRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ActiveMessageRevision` edge in the connection."""
type ActiveMessageRevisionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ActiveMessageRevision` at the end of the edge."""
  node: ActiveMessageRevision!
}

"""Methods to use when ordering `ActiveMessageRevision`."""
enum ActiveMessageRevisionsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  PARENT_REVISION_ID_ASC
  PARENT_REVISION_ID_DESC
  EDITOR_ID_ASC
  EDITOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATE_COMMENT_ASC
  UPDATE_COMMENT_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  BODY_ASC
  BODY_DESC
}

"""
A condition to be used against `ActiveMessageRevision` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ActiveMessageRevisionCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: UUID

  """Checks for equality with the object’s `parentRevisionId` field."""
  parentRevisionId: UUID

  """Checks for equality with the object’s `editorId` field."""
  editorId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updateComment` field."""
  updateComment: String

  """Checks for equality with the object’s `subject` field."""
  subject: String

  """Checks for equality with the object’s `body` field."""
  body: JSON
}

"""
A filter to be used against `ActiveMessageRevision` object types. All fields are combined with a logical ‘and.’
"""
input ActiveMessageRevisionFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: UUIDFilter

  """Filter by the object’s `parentRevisionId` field."""
  parentRevisionId: UUIDFilter

  """Filter by the object’s `editorId` field."""
  editorId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updateComment` field."""
  updateComment: StringFilter

  """Filter by the object’s `subject` field."""
  subject: StringFilter

  """Filter by the object’s `body` field."""
  body: JSONFilter

  """Checks for all expressions in this list."""
  and: [ActiveMessageRevisionFilter!]

  """Checks for any expressions in this list."""
  or: [ActiveMessageRevisionFilter!]

  """Negates the expression."""
  not: ActiveMessageRevisionFilter
}

"""A connection to a list of `CurrentMessageRevision` values."""
type CurrentMessageRevisionsConnection {
  """A list of `CurrentMessageRevision` objects."""
  nodes: [CurrentMessageRevision!]!

  """
  A list of edges which contains the `CurrentMessageRevision` and cursor to aid in pagination.
  """
  edges: [CurrentMessageRevisionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CurrentMessageRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CurrentMessageRevision` edge in the connection."""
type CurrentMessageRevisionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CurrentMessageRevision` at the end of the edge."""
  node: CurrentMessageRevision!
}

"""Methods to use when ordering `CurrentMessageRevision`."""
enum CurrentMessageRevisionsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  PARENT_REVISION_ID_ASC
  PARENT_REVISION_ID_DESC
  EDITOR_ID_ASC
  EDITOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATE_COMMENT_ASC
  UPDATE_COMMENT_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  BODY_ASC
  BODY_DESC
}

"""
A condition to be used against `CurrentMessageRevision` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CurrentMessageRevisionCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: UUID

  """Checks for equality with the object’s `parentRevisionId` field."""
  parentRevisionId: UUID

  """Checks for equality with the object’s `editorId` field."""
  editorId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updateComment` field."""
  updateComment: String

  """Checks for equality with the object’s `subject` field."""
  subject: String

  """Checks for equality with the object’s `body` field."""
  body: JSON
}

"""
A filter to be used against `CurrentMessageRevision` object types. All fields are combined with a logical ‘and.’
"""
input CurrentMessageRevisionFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: UUIDFilter

  """Filter by the object’s `parentRevisionId` field."""
  parentRevisionId: UUIDFilter

  """Filter by the object’s `editorId` field."""
  editorId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updateComment` field."""
  updateComment: StringFilter

  """Filter by the object’s `subject` field."""
  subject: StringFilter

  """Filter by the object’s `body` field."""
  body: JSONFilter

  """Checks for all expressions in this list."""
  and: [CurrentMessageRevisionFilter!]

  """Checks for any expressions in this list."""
  or: [CurrentMessageRevisionFilter!]

  """Negates the expression."""
  not: CurrentMessageRevisionFilter
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Begin the account deletion flow by requesting the confirmation email"""
  requestAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RequestAccountDeletionInput!
  ): RequestAccountDeletionPayload
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """
  If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently.
  """
  resendEmailVerificationCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResendEmailVerificationCodeInput!
  ): ResendEmailVerificationCodePayload
  removeFromOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveFromOrganizationInput!
  ): RemoveFromOrganizationPayload

  """
  If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address!
  """
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload

  """
  If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion.
  """
  confirmAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmAccountDeletionInput!
  ): ConfirmAccountDeletionPayload
  acceptInvitationToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AcceptInvitationToOrganizationInput!
  ): AcceptInvitationToOrganizationPayload

  """
  Once you have received a verification token for your email, you may call this mutation with that token to make your email verified.
  """
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload
  inviteToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InviteToOrganizationInput!
  ): InviteToOrganizationPayload

  """Enter your old password and a new password to change your password."""
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload
  transferOrganizationBillingContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationBillingContactInput!
  ): TransferOrganizationBillingContactPayload
  transferOrganizationOwnership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationOwnershipInput!
  ): TransferOrganizationOwnershipPayload

  """
  Your primary email is where we'll notify of account events; other emails may be used for discovery or login. Use this when you're changing your email address.
  """
  makeEmailPrimary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeEmailPrimaryInput!
  ): MakeEmailPrimaryPayload

  """Creates a single `UserEmail`."""
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """Creates a single `ActiveMessageRevision`."""
  createActiveMessageRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateActiveMessageRevisionInput!
  ): CreateActiveMessageRevisionPayload

  """Creates a single `CurrentMessageRevision`."""
  createCurrentMessageRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCurrentMessageRevisionInput!
  ): CreateCurrentMessageRevisionPayload

  """Creates a single `MessageRevision`."""
  createMessageRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMessageRevisionInput!
  ): CreateMessageRevisionPayload

  """
  Updates a single `Organization` using its globally unique id and a patch.
  """
  updateOrganizationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByNodeIdInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganizationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationBySlugInput!
  ): UpdateOrganizationPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """
  Updates a single `ActiveMessageRevision` using its globally unique id and a patch.
  """
  updateActiveMessageRevisionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActiveMessageRevisionByNodeIdInput!
  ): UpdateActiveMessageRevisionPayload

  """
  Updates a single `ActiveMessageRevision` using a unique key and a patch.
  """
  updateActiveMessageRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActiveMessageRevisionInput!
  ): UpdateActiveMessageRevisionPayload

  """
  Updates a single `CurrentMessageRevision` using its globally unique id and a patch.
  """
  updateCurrentMessageRevisionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCurrentMessageRevisionByNodeIdInput!
  ): UpdateCurrentMessageRevisionPayload

  """
  Updates a single `CurrentMessageRevision` using a unique key and a patch.
  """
  updateCurrentMessageRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCurrentMessageRevisionInput!
  ): UpdateCurrentMessageRevisionPayload

  """
  Updates a single `MessageRevision` using its globally unique id and a patch.
  """
  updateMessageRevisionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessageRevisionByNodeIdInput!
  ): UpdateMessageRevisionPayload

  """Updates a single `MessageRevision` using a unique key and a patch."""
  updateMessageRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessageRevisionInput!
  ): UpdateMessageRevisionPayload

  """Deletes a single `UserEmail` using its globally unique id."""
  deleteUserEmailByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByNodeIdInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmailByUserIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByUserIdAndEmailInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserAuthentication` using its globally unique id."""
  deleteUserAuthenticationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByNodeIdInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthenticationByServiceAndIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByServiceAndIdentifierInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `ActiveMessageRevision` using its globally unique id."""
  deleteActiveMessageRevisionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActiveMessageRevisionByNodeIdInput!
  ): DeleteActiveMessageRevisionPayload

  """Deletes a single `ActiveMessageRevision` using a unique key."""
  deleteActiveMessageRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActiveMessageRevisionInput!
  ): DeleteActiveMessageRevisionPayload

  """
  Deletes a single `CurrentMessageRevision` using its globally unique id.
  """
  deleteCurrentMessageRevisionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCurrentMessageRevisionByNodeIdInput!
  ): DeleteCurrentMessageRevisionPayload

  """Deletes a single `CurrentMessageRevision` using a unique key."""
  deleteCurrentMessageRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCurrentMessageRevisionInput!
  ): DeleteCurrentMessageRevisionPayload

  """Deletes a single `MessageRevision` using its globally unique id."""
  deleteMessageRevisionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessageRevisionByNodeIdInput!
  ): DeleteMessageRevisionPayload

  """Deletes a single `MessageRevision` using a unique key."""
  deleteMessageRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessageRevisionInput!
  ): DeleteMessageRevisionPayload

  """
  Use this mutation to create an account on our system. This may only be used if you are logged out.
  """
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload

  """
  Use this mutation to log in to your account; this login uses sessions so you do not need to take further action.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload

  """
  After triggering forgotPassword, you'll be sent a reset token. Combine this with your user ID and a new password to reset your password.
  """
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload
}

"""The output of our `requestAccountDeletion` mutation."""
type RequestAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `requestAccountDeletion` mutation."""
input RequestAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `deleteOrganization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOrganization` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
}

"""The output of our `resendEmailVerificationCode` mutation."""
type ResendEmailVerificationCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resendEmailVerificationCode` mutation."""
input ResendEmailVerificationCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `removeFromOrganization` mutation."""
type RemoveFromOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `removeFromOrganization` mutation."""
input RemoveFromOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `confirmAccountDeletion` mutation."""
type ConfirmAccountDeletionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `confirmAccountDeletion` mutation."""
input ConfirmAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
}

"""The output of our `acceptInvitationToOrganization` mutation."""
type AcceptInvitationToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `acceptInvitationToOrganization` mutation."""
input AcceptInvitationToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  invitationId: UUID!
  code: String
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userEmailId: UUID!
  token: String!
}

"""The output of our `inviteToOrganization` mutation."""
type InviteToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `inviteToOrganization` mutation."""
input InviteToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  username: String
  email: String
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  oldPassword: String!
  newPassword: String!
}

"""The output of our `createOrganization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `createOrganization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String!
  name: String!
}

"""The output of our `transferOrganizationBillingContact` mutation."""
type TransferOrganizationBillingContactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `transferOrganizationBillingContact` mutation."""
input TransferOrganizationBillingContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `transferOrganizationOwnership` mutation."""
type TransferOrganizationOwnershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `transferOrganizationOwnership` mutation."""
input TransferOrganizationOwnershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `makeEmailPrimary` mutation."""
type MakeEmailPrimaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  userEmail: UserEmail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
}

"""All input for the `makeEmailPrimary` mutation."""
input MakeEmailPrimaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserEmail` that was created by this mutation."""
  userEmail: UserEmail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be created by this mutation."""
  userEmail: UserEmailInput!
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
  """The users email address, in `a@b.c` format."""
  email: String!
}

"""The output of our create `ActiveMessageRevision` mutation."""
type CreateActiveMessageRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActiveMessageRevision` that was created by this mutation."""
  activeMessageRevision: ActiveMessageRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActiveMessageRevision`. May be used by Relay 1."""
  activeMessageRevisionEdge(
    """The method to use when ordering `ActiveMessageRevision`."""
    orderBy: [ActiveMessageRevisionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ActiveMessageRevisionsEdge
}

"""All input for the create `ActiveMessageRevision` mutation."""
input CreateActiveMessageRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ActiveMessageRevision` to be created by this mutation."""
  activeMessageRevision: ActiveMessageRevisionInput!
}

"""An input for mutations affecting `ActiveMessageRevision`"""
input ActiveMessageRevisionInput {
  id: UUID
  parentRevisionId: UUID
  editorId: UUID
  updateComment: String
  subject: String
  body: JSON
}

"""The output of our create `CurrentMessageRevision` mutation."""
type CreateCurrentMessageRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CurrentMessageRevision` that was created by this mutation."""
  currentMessageRevision: CurrentMessageRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CurrentMessageRevision`. May be used by Relay 1."""
  currentMessageRevisionEdge(
    """The method to use when ordering `CurrentMessageRevision`."""
    orderBy: [CurrentMessageRevisionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CurrentMessageRevisionsEdge
}

"""All input for the create `CurrentMessageRevision` mutation."""
input CreateCurrentMessageRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CurrentMessageRevision` to be created by this mutation."""
  currentMessageRevision: CurrentMessageRevisionInput!
}

"""An input for mutations affecting `CurrentMessageRevision`"""
input CurrentMessageRevisionInput {
  id: UUID
  parentRevisionId: UUID
  editorId: UUID
  updateComment: String
  subject: String
  body: JSON
}

"""The output of our create `MessageRevision` mutation."""
type CreateMessageRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MessageRevision` that was created by this mutation."""
  messageRevision: MessageRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MessageRevision`. May be used by Relay 1."""
  messageRevisionEdge(
    """The method to use when ordering `MessageRevision`."""
    orderBy: [MessageRevisionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): MessageRevisionsEdge

  """Reads a single `User` that is related to this `MessageRevision`."""
  editor: User

  """
  Reads a single `MessageRevision` that is related to this `MessageRevision`.
  """
  parentRevision: MessageRevision
}

"""All input for the create `MessageRevision` mutation."""
input CreateMessageRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MessageRevision` to be created by this mutation."""
  messageRevision: MessageRevisionInput!
}

"""An input for mutations affecting `MessageRevision`"""
input MessageRevisionInput {
  id: UUID
  parentRevisionId: UUID
  editorId: UUID
  updateComment: String
  subject: String
  body: JSON
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `updateOrganizationByNodeId` mutation."""
input UpdateOrganizationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  slug: String
  name: String
}

"""All input for the `updateOrganization` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""All input for the `updateOrganizationBySlug` mutation."""
input UpdateOrganizationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Public-facing username (or 'handle') of the user."""
  username: String

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Optional avatar URL."""
  avatarUrl: String
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Public-facing username (or 'handle') of the user."""
  username: String!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `ActiveMessageRevision` mutation."""
type UpdateActiveMessageRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActiveMessageRevision` that was updated by this mutation."""
  activeMessageRevision: ActiveMessageRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActiveMessageRevision`. May be used by Relay 1."""
  activeMessageRevisionEdge(
    """The method to use when ordering `ActiveMessageRevision`."""
    orderBy: [ActiveMessageRevisionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ActiveMessageRevisionsEdge
}

"""All input for the `updateActiveMessageRevisionByNodeId` mutation."""
input UpdateActiveMessageRevisionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActiveMessageRevision` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ActiveMessageRevision` being updated.
  """
  patch: ActiveMessageRevisionPatch!
}

"""
Represents an update to a `ActiveMessageRevision`. Fields that are set will be updated.
"""
input ActiveMessageRevisionPatch {
  editorId: UUID
  updateComment: String
  subject: String
  body: JSON
}

"""All input for the `updateActiveMessageRevision` mutation."""
input UpdateActiveMessageRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
  revisionId: UUID!

  """
  An object where the defined keys will be set on the `ActiveMessageRevision` being updated.
  """
  patch: ActiveMessageRevisionPatch!
}

"""The output of our update `CurrentMessageRevision` mutation."""
type UpdateCurrentMessageRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CurrentMessageRevision` that was updated by this mutation."""
  currentMessageRevision: CurrentMessageRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CurrentMessageRevision`. May be used by Relay 1."""
  currentMessageRevisionEdge(
    """The method to use when ordering `CurrentMessageRevision`."""
    orderBy: [CurrentMessageRevisionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CurrentMessageRevisionsEdge
}

"""All input for the `updateCurrentMessageRevisionByNodeId` mutation."""
input UpdateCurrentMessageRevisionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CurrentMessageRevision` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CurrentMessageRevision` being updated.
  """
  patch: CurrentMessageRevisionPatch!
}

"""
Represents an update to a `CurrentMessageRevision`. Fields that are set will be updated.
"""
input CurrentMessageRevisionPatch {
  editorId: UUID
  updateComment: String
  subject: String
  body: JSON
}

"""All input for the `updateCurrentMessageRevision` mutation."""
input UpdateCurrentMessageRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `CurrentMessageRevision` being updated.
  """
  patch: CurrentMessageRevisionPatch!
}

"""The output of our update `MessageRevision` mutation."""
type UpdateMessageRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MessageRevision` that was updated by this mutation."""
  messageRevision: MessageRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MessageRevision`. May be used by Relay 1."""
  messageRevisionEdge(
    """The method to use when ordering `MessageRevision`."""
    orderBy: [MessageRevisionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): MessageRevisionsEdge

  """Reads a single `User` that is related to this `MessageRevision`."""
  editor: User

  """
  Reads a single `MessageRevision` that is related to this `MessageRevision`.
  """
  parentRevision: MessageRevision
}

"""All input for the `updateMessageRevisionByNodeId` mutation."""
input UpdateMessageRevisionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MessageRevision` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MessageRevision` being updated.
  """
  patch: MessageRevisionPatch!
}

"""
Represents an update to a `MessageRevision`. Fields that are set will be updated.
"""
input MessageRevisionPatch {
  updateComment: String
  subject: String
  body: JSON
}

"""All input for the `updateMessageRevision` mutation."""
input UpdateMessageRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
  revisionId: UUID!

  """
  An object where the defined keys will be set on the `MessageRevision` being updated.
  """
  patch: MessageRevisionPatch!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserEmail` that was deleted by this mutation."""
  userEmail: UserEmail
  deletedUserEmailNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
}

"""All input for the `deleteUserEmailByNodeId` mutation."""
input DeleteUserEmailByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmail` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteUserEmailByUserIdAndEmail` mutation."""
input DeleteUserEmailByUserIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!

  """The users email address, in `a@b.c` format."""
  email: String!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAuthentication` that was deleted by this mutation."""
  userAuthentication: UserAuthentication
  deletedUserAuthenticationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User
}

"""All input for the `deleteUserAuthenticationByNodeId` mutation."""
input DeleteUserAuthenticationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthentication` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteUserAuthenticationByServiceAndIdentifier` mutation.
"""
input DeleteUserAuthenticationByServiceAndIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The login service used, e.g. `twitter` or `github`."""
  service: String!

  """A unique identifier for the user within the login service."""
  identifier: String!
}

"""The output of our delete `ActiveMessageRevision` mutation."""
type DeleteActiveMessageRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActiveMessageRevision` that was deleted by this mutation."""
  activeMessageRevision: ActiveMessageRevision
  deletedActiveMessageRevisionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActiveMessageRevision`. May be used by Relay 1."""
  activeMessageRevisionEdge(
    """The method to use when ordering `ActiveMessageRevision`."""
    orderBy: [ActiveMessageRevisionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ActiveMessageRevisionsEdge
}

"""All input for the `deleteActiveMessageRevisionByNodeId` mutation."""
input DeleteActiveMessageRevisionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActiveMessageRevision` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteActiveMessageRevision` mutation."""
input DeleteActiveMessageRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
  revisionId: UUID!
}

"""The output of our delete `CurrentMessageRevision` mutation."""
type DeleteCurrentMessageRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CurrentMessageRevision` that was deleted by this mutation."""
  currentMessageRevision: CurrentMessageRevision
  deletedCurrentMessageRevisionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `CurrentMessageRevision`. May be used by Relay 1."""
  currentMessageRevisionEdge(
    """The method to use when ordering `CurrentMessageRevision`."""
    orderBy: [CurrentMessageRevisionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CurrentMessageRevisionsEdge
}

"""All input for the `deleteCurrentMessageRevisionByNodeId` mutation."""
input DeleteCurrentMessageRevisionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CurrentMessageRevision` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCurrentMessageRevision` mutation."""
input DeleteCurrentMessageRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `MessageRevision` mutation."""
type DeleteMessageRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MessageRevision` that was deleted by this mutation."""
  messageRevision: MessageRevision
  deletedMessageRevisionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MessageRevision`. May be used by Relay 1."""
  messageRevisionEdge(
    """The method to use when ordering `MessageRevision`."""
    orderBy: [MessageRevisionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): MessageRevisionsEdge

  """Reads a single `User` that is related to this `MessageRevision`."""
  editor: User

  """
  Reads a single `MessageRevision` that is related to this `MessageRevision`.
  """
  parentRevision: MessageRevision
}

"""All input for the `deleteMessageRevisionByNodeId` mutation."""
input DeleteMessageRevisionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MessageRevision` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMessageRevision` mutation."""
input DeleteMessageRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
  revisionId: UUID!
}

type RegisterPayload {
  user: User!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
  name: String
  avatarUrl: String
}

type LoginPayload {
  user: User!
}

input LoginInput {
  username: String!
  password: String!
}

type LogoutPayload {
  success: Boolean
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!
  resetToken: String!
  newPassword: String!
}
