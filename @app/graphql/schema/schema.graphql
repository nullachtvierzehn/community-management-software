"""All input for the `acceptInvitationToOrganization` mutation."""
input AcceptInvitationToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  code: String
  invitationId: UUID!
}

"""The output of our `acceptInvitationToOrganization` mutation."""
type AcceptInvitationToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value."""
  equalTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """Not included in the specified list."""
  notIn: [BigInt!]
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  oldPassword: String!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `confirmAccountDeletion` mutation."""
input ConfirmAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
}

"""The output of our `confirmAccountDeletion` mutation."""
type ConfirmAccountDeletionPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `File` mutation."""
input CreateFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `File` to be created by this mutation."""
  file: FileInput!
}

"""The output of our create `File` mutation."""
type CreateFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `User` that is related to this `File`."""
  contributor: User

  """The `File` that was created by this mutation."""
  file: File

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createOrganization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  slug: String!
}

"""The output of our `createOrganization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `PdfFile` mutation."""
input CreatePdfFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PdfFile` to be created by this mutation."""
  pdfFile: PdfFileInput!
}

"""The output of our create `PdfFile` mutation."""
type CreatePdfFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `File` that is related to this `PdfFile`."""
  file: File

  """The `PdfFile` that was created by this mutation."""
  pdfFile: PdfFile

  """An edge for our `PdfFile`. May be used by Relay 1."""
  pdfFileEdge(
    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PdfFilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `File` that is related to this `PdfFile`."""
  thumbnail: File
}

"""All input for the create `Room` mutation."""
input CreateRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Room` to be created by this mutation."""
  room: RoomInput!
}

"""All input for the create `RoomItem` mutation."""
input CreateRoomItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoomItem` to be created by this mutation."""
  roomItem: RoomItemInput!
}

"""The output of our create `RoomItem` mutation."""
type CreateRoomItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `User` that is related to this `RoomItem`."""
  contributor: User

  """Room items can be related in trees."""
  parent: RoomItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Room` that is related to this `RoomItem`."""
  room: Room

  """The `RoomItem` that was created by this mutation."""
  roomItem: RoomItem

  """An edge for our `RoomItem`. May be used by Relay 1."""
  roomItemEdge(
    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomItemsEdge

  """Reads a single `Topic` that is related to this `RoomItem`."""
  topic: Topic
}

"""All input for the create `RoomMessageAttachment` mutation."""
input CreateRoomMessageAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoomMessageAttachment` to be created by this mutation."""
  roomMessageAttachment: RoomMessageAttachmentInput!
}

"""The output of our create `RoomMessageAttachment` mutation."""
type CreateRoomMessageAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `RoomMessage` that is related to this `RoomMessageAttachment`.
  """
  message: RoomMessage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RoomMessageAttachment` that was created by this mutation."""
  roomMessageAttachment: RoomMessageAttachment

  """An edge for our `RoomMessageAttachment`. May be used by Relay 1."""
  roomMessageAttachmentEdge(
    """The method to use when ordering `RoomMessageAttachment`."""
    orderBy: [RoomMessageAttachmentsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomMessageAttachmentsEdge

  """
  Reads a single `Topic` that is related to this `RoomMessageAttachment`.
  """
  topic: Topic
}

"""All input for the create `RoomMessage` mutation."""
input CreateRoomMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoomMessage` to be created by this mutation."""
  roomMessage: RoomMessageInput!
}

"""The output of our create `RoomMessage` mutation."""
type CreateRoomMessagePayload {
  """Reads a single `RoomMessage` that is related to this `RoomMessage`."""
  answeredMessage: RoomMessage

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Room` that is related to this `RoomMessage`."""
  room: Room

  """The `RoomMessage` that was created by this mutation."""
  roomMessage: RoomMessage

  """An edge for our `RoomMessage`. May be used by Relay 1."""
  roomMessageEdge(
    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomMessagesEdge

  """Reads a single `User` that is related to this `RoomMessage`."""
  sender: User
}

"""The output of our create `Room` mutation."""
type CreateRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Each room can optionally belong to an organization."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Room` that was created by this mutation."""
  room: Room

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomsEdge
}

"""All input for the create `RoomSubscription` mutation."""
input CreateRoomSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoomSubscription` to be created by this mutation."""
  roomSubscription: RoomSubscriptionInput!
}

"""The output of our create `RoomSubscription` mutation."""
type CreateRoomSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Room` that is related to this `RoomSubscription`."""
  room: Room

  """The `RoomSubscription` that was created by this mutation."""
  roomSubscription: RoomSubscription

  """An edge for our `RoomSubscription`. May be used by Relay 1."""
  roomSubscriptionEdge(
    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsEdge

  """Reads a single `User` that is related to this `RoomSubscription`."""
  subscriber: User
}

"""All input for the create `Topic` mutation."""
input CreateTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Topic` to be created by this mutation."""
  topic: TopicInput!
}

"""The output of our create `Topic` mutation."""
type CreateTopicPayload {
  """
  Each topic has an author. The field might be null when the original author has unregistered from the application.
  """
  author: User

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Organization` that is related to this `Topic`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Topic` that was created by this mutation."""
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be created by this mutation."""
  userEmail: UserEmailInput!
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was created by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A connection to a list of `UUID` values."""
type CurrentUserInvitedOrganizationIdsConnection {
  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserInvitedOrganizationIdsEdge]!

  """A list of `UUID` objects."""
  nodes: [UUID]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type CurrentUserInvitedOrganizationIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `UUID` values."""
type CurrentUserMemberOrganizationIdsConnection {
  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserMemberOrganizationIdsEdge]!

  """A list of `UUID` objects."""
  nodes: [UUID]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type CurrentUserMemberOrganizationIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteFileByNodeId` mutation."""
input DeleteFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `File` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFile` mutation."""
input DeleteFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `File` mutation."""
type DeleteFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `User` that is related to this `File`."""
  contributor: User
  deletedFileNodeId: ID

  """The `File` that was deleted by this mutation."""
  file: File

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOrganization` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
}

"""The output of our `deleteOrganization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePdfFileByNodeId` mutation."""
input DeletePdfFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PdfFile` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePdfFile` mutation."""
input DeletePdfFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `PdfFile` mutation."""
type DeletePdfFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPdfFileNodeId: ID

  """Reads a single `File` that is related to this `PdfFile`."""
  file: File

  """The `PdfFile` that was deleted by this mutation."""
  pdfFile: PdfFile

  """An edge for our `PdfFile`. May be used by Relay 1."""
  pdfFileEdge(
    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PdfFilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `File` that is related to this `PdfFile`."""
  thumbnail: File
}

"""All input for the `deleteRoomByNodeId` mutation."""
input DeleteRoomByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Room` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRoom` mutation."""
input DeleteRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteRoomItemByNodeId` mutation."""
input DeleteRoomItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRoomItem` mutation."""
input DeleteRoomItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `RoomItem` mutation."""
type DeleteRoomItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `User` that is related to this `RoomItem`."""
  contributor: User
  deletedRoomItemNodeId: ID

  """Room items can be related in trees."""
  parent: RoomItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Room` that is related to this `RoomItem`."""
  room: Room

  """The `RoomItem` that was deleted by this mutation."""
  roomItem: RoomItem

  """An edge for our `RoomItem`. May be used by Relay 1."""
  roomItemEdge(
    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomItemsEdge

  """Reads a single `Topic` that is related to this `RoomItem`."""
  topic: Topic
}

"""All input for the `deleteRoomMessageAttachmentByNodeId` mutation."""
input DeleteRoomMessageAttachmentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomMessageAttachment` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteRoomMessageAttachmentByTopicIdAndRoomMessageId` mutation.
"""
input DeleteRoomMessageAttachmentByTopicIdAndRoomMessageIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  roomMessageId: UUID!
  topicId: UUID!
}

"""All input for the `deleteRoomMessageAttachment` mutation."""
input DeleteRoomMessageAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `RoomMessageAttachment` mutation."""
type DeleteRoomMessageAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRoomMessageAttachmentNodeId: ID

  """
  Reads a single `RoomMessage` that is related to this `RoomMessageAttachment`.
  """
  message: RoomMessage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RoomMessageAttachment` that was deleted by this mutation."""
  roomMessageAttachment: RoomMessageAttachment

  """An edge for our `RoomMessageAttachment`. May be used by Relay 1."""
  roomMessageAttachmentEdge(
    """The method to use when ordering `RoomMessageAttachment`."""
    orderBy: [RoomMessageAttachmentsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomMessageAttachmentsEdge

  """
  Reads a single `Topic` that is related to this `RoomMessageAttachment`.
  """
  topic: Topic
}

"""All input for the `deleteRoomMessageByNodeId` mutation."""
input DeleteRoomMessageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomMessage` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRoomMessage` mutation."""
input DeleteRoomMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `RoomMessage` mutation."""
type DeleteRoomMessagePayload {
  """Reads a single `RoomMessage` that is related to this `RoomMessage`."""
  answeredMessage: RoomMessage

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRoomMessageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Room` that is related to this `RoomMessage`."""
  room: Room

  """The `RoomMessage` that was deleted by this mutation."""
  roomMessage: RoomMessage

  """An edge for our `RoomMessage`. May be used by Relay 1."""
  roomMessageEdge(
    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomMessagesEdge

  """Reads a single `User` that is related to this `RoomMessage`."""
  sender: User
}

"""The output of our delete `Room` mutation."""
type DeleteRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRoomNodeId: ID

  """Each room can optionally belong to an organization."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Room` that was deleted by this mutation."""
  room: Room

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomsEdge
}

"""All input for the `deleteRoomSubscriptionByNodeId` mutation."""
input DeleteRoomSubscriptionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomSubscription` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteRoomSubscriptionBySubscriberIdAndRoomId` mutation.
"""
input DeleteRoomSubscriptionBySubscriberIdAndRoomIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  roomId: UUID!

  """The subscribing user."""
  subscriberId: UUID!
}

"""All input for the `deleteRoomSubscription` mutation."""
input DeleteRoomSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `RoomSubscription` mutation."""
type DeleteRoomSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRoomSubscriptionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Room` that is related to this `RoomSubscription`."""
  room: Room

  """The `RoomSubscription` that was deleted by this mutation."""
  roomSubscription: RoomSubscription

  """An edge for our `RoomSubscription`. May be used by Relay 1."""
  roomSubscriptionEdge(
    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsEdge

  """Reads a single `User` that is related to this `RoomSubscription`."""
  subscriber: User
}

"""All input for the `deleteTopicByNodeId` mutation."""
input DeleteTopicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTopicBySlugAndOrganizationId` mutation."""
input DeleteTopicBySlugAndOrganizationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String!
}

"""All input for the `deleteTopic` mutation."""
input DeleteTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Topic` mutation."""
type DeleteTopicPayload {
  """
  Each topic has an author. The field might be null when the original author has unregistered from the application.
  """
  author: User

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTopicNodeId: ID

  """Reads a single `Organization` that is related to this `Topic`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Topic` that was deleted by this mutation."""
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the `deleteUserAuthenticationByNodeId` mutation."""
input DeleteUserAuthenticationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthentication` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteUserAuthenticationByServiceAndIdentifier` mutation.
"""
input DeleteUserAuthenticationByServiceAndIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """A unique identifier for the user within the login service."""
  identifier: String!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
}

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserAuthenticationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was deleted by this mutation."""
  userAuthentication: UserAuthentication

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge
}

"""All input for the `deleteUserEmailByNodeId` mutation."""
input DeleteUserEmailByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmail` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserEmailByUserIdAndEmail` mutation."""
input DeleteUserEmailByUserIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The users email address, in `a@b.c` format."""
  email: String!
  userId: UUID!
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserEmailNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was deleted by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

type File implements Node {
  """Reads a single `User` that is related to this `File`."""
  contributor: User
  contributorId: UUID
  createdAt: Datetime!
  filename: String
  id: UUID!
  mimeType: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pathOnStorage: String

  """Reads a single `PdfFile` that is related to this `File`."""
  pdfFile: PdfFile

  """Reads and enables pagination through a set of `PdfFile`."""
  pdfFilesByThumbnailId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PdfFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PdfFileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PdfFilesConnection!
  sha256: String
  totalBytes: Int
  updatedAt: Datetime!
  uploadedBytes: Int
}

"""
A condition to be used against `File` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FileCondition {
  """Checks for equality with the object’s `contributorId` field."""
  contributorId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `filename` field."""
  filename: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `mimeType` field."""
  mimeType: String

  """Checks for equality with the object’s `pathOnStorage` field."""
  pathOnStorage: String

  """Checks for equality with the object’s `sha256` field."""
  sha256: String

  """Checks for equality with the object’s `totalBytes` field."""
  totalBytes: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `uploadedBytes` field."""
  uploadedBytes: Int
}

"""
A filter to be used against `File` object types. All fields are combined with a logical ‘and.’
"""
input FileFilter {
  """Checks for all expressions in this list."""
  and: [FileFilter!]

  """Filter by the object’s `contributor` relation."""
  contributor: UserFilter

  """A related `contributor` exists."""
  contributorExists: Boolean

  """Filter by the object’s `contributorId` field."""
  contributorId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `filename` field."""
  filename: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `mimeType` field."""
  mimeType: StringFilter

  """Negates the expression."""
  not: FileFilter

  """Checks for any expressions in this list."""
  or: [FileFilter!]

  """Filter by the object’s `pathOnStorage` field."""
  pathOnStorage: StringFilter

  """Filter by the object’s `pdfFile` relation."""
  pdfFile: PdfFileFilter

  """A related `pdfFile` exists."""
  pdfFileExists: Boolean

  """Filter by the object’s `pdfFilesByThumbnailId` relation."""
  pdfFilesByThumbnailId: FileToManyPdfFileFilter

  """Some related `pdfFilesByThumbnailId` exist."""
  pdfFilesByThumbnailIdExist: Boolean

  """Filter by the object’s `sha256` field."""
  sha256: StringFilter

  """Filter by the object’s `totalBytes` field."""
  totalBytes: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `uploadedBytes` field."""
  uploadedBytes: IntFilter
}

"""An input for mutations affecting `File`"""
input FileInput {
  contributorId: UUID
  filename: String
  id: UUID
  mimeType: String
  totalBytes: Int
  uploadedBytes: Int
}

"""Represents an update to a `File`. Fields that are set will be updated."""
input FilePatch {
  filename: String
  id: UUID
  mimeType: String
  totalBytes: Int
  uploadedBytes: Int
}

"""
A filter to be used against many `PdfFile` object types. All fields are combined with a logical ‘and.’
"""
input FileToManyPdfFileFilter {
  """
  Every related `PdfFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PdfFileFilter

  """
  No related `PdfFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PdfFileFilter

  """
  Some related `PdfFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PdfFileFilter
}

"""A connection to a list of `File` values."""
type FilesConnection {
  """
  A list of edges which contains the `File` and cursor to aid in pagination.
  """
  edges: [FilesEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection."""
type FilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `File` at the end of the edge."""
  node: File!
}

"""Methods to use when ordering `File`."""
enum FilesOrderBy {
  CONTRIBUTOR_ID_ASC
  CONTRIBUTOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  FILENAME_ASC
  FILENAME_DESC
  ID_ASC
  ID_DESC
  MIME_TYPE_ASC
  MIME_TYPE_DESC
  NATURAL
  PATH_ON_STORAGE_ASC
  PATH_ON_STORAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SHA256_ASC
  SHA256_DESC
  TOTAL_BYTES_ASC
  TOTAL_BYTES_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPLOADED_BYTES_ASC
  UPLOADED_BYTES_DESC
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value."""
  equalTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float

  """Included in the specified list."""
  in: [Float!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """Not included in the specified list."""
  notIn: [Float!]
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
type Interval {
  """A quantity of days."""
  days: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of minutes."""
  minutes: Int

  """A quantity of months."""
  months: Int

  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of years."""
  years: Int
}

"""
A filter to be used against Interval fields. All fields are combined with a logical ‘and.’
"""
input IntervalFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IntervalInput

  """Equal to the specified value."""
  equalTo: IntervalInput

  """Greater than the specified value."""
  greaterThan: IntervalInput

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IntervalInput

  """Included in the specified list."""
  in: [IntervalInput!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: IntervalInput

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IntervalInput

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IntervalInput

  """Not equal to the specified value."""
  notEqualTo: IntervalInput

  """Not included in the specified list."""
  notIn: [IntervalInput!]
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
input IntervalInput {
  """A quantity of days."""
  days: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of minutes."""
  minutes: Int

  """A quantity of months."""
  months: Int

  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of years."""
  years: Int
}

"""All input for the `inviteToOrganization` mutation."""
input InviteToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  organizationId: UUID!
  username: String
}

"""The output of our `inviteToOrganization` mutation."""
type InviteToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
Represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

input LoginInput {
  password: String!
  username: String!
}

type LoginPayload {
  user: User!
}

type LogoutPayload {
  success: Boolean
}

"""All input for the `makeEmailPrimary` mutation."""
input MakeEmailPrimaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `makeEmailPrimary` mutation."""
type MakeEmailPrimaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  acceptInvitationToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AcceptInvitationToOrganizationInput!
  ): AcceptInvitationToOrganizationPayload

  """Enter your old password and a new password to change your password."""
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload

  """
  If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion.
  """
  confirmAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmAccountDeletionInput!
  ): ConfirmAccountDeletionPayload

  """Creates a single `File`."""
  createFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFileInput!
  ): CreateFilePayload
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single `PdfFile`."""
  createPdfFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePdfFileInput!
  ): CreatePdfFilePayload

  """Creates a single `Room`."""
  createRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomInput!
  ): CreateRoomPayload

  """Creates a single `RoomItem`."""
  createRoomItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomItemInput!
  ): CreateRoomItemPayload

  """Creates a single `RoomMessage`."""
  createRoomMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomMessageInput!
  ): CreateRoomMessagePayload

  """Creates a single `RoomMessageAttachment`."""
  createRoomMessageAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomMessageAttachmentInput!
  ): CreateRoomMessageAttachmentPayload

  """Creates a single `RoomSubscription`."""
  createRoomSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomSubscriptionInput!
  ): CreateRoomSubscriptionPayload

  """Creates a single `Topic`."""
  createTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTopicInput!
  ): CreateTopicPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UserEmail`."""
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """Deletes a single `File` using a unique key."""
  deleteFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileInput!
  ): DeleteFilePayload

  """Deletes a single `File` using its globally unique id."""
  deleteFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileByNodeIdInput!
  ): DeleteFilePayload
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single `PdfFile` using a unique key."""
  deletePdfFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePdfFileInput!
  ): DeletePdfFilePayload

  """Deletes a single `PdfFile` using its globally unique id."""
  deletePdfFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePdfFileByNodeIdInput!
  ): DeletePdfFilePayload

  """Deletes a single `Room` using a unique key."""
  deleteRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomInput!
  ): DeleteRoomPayload

  """Deletes a single `Room` using its globally unique id."""
  deleteRoomByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomByNodeIdInput!
  ): DeleteRoomPayload

  """Deletes a single `RoomItem` using a unique key."""
  deleteRoomItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomItemInput!
  ): DeleteRoomItemPayload

  """Deletes a single `RoomItem` using its globally unique id."""
  deleteRoomItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomItemByNodeIdInput!
  ): DeleteRoomItemPayload

  """Deletes a single `RoomMessage` using a unique key."""
  deleteRoomMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomMessageInput!
  ): DeleteRoomMessagePayload

  """Deletes a single `RoomMessageAttachment` using a unique key."""
  deleteRoomMessageAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomMessageAttachmentInput!
  ): DeleteRoomMessageAttachmentPayload

  """Deletes a single `RoomMessageAttachment` using its globally unique id."""
  deleteRoomMessageAttachmentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomMessageAttachmentByNodeIdInput!
  ): DeleteRoomMessageAttachmentPayload

  """Deletes a single `RoomMessageAttachment` using a unique key."""
  deleteRoomMessageAttachmentByTopicIdAndRoomMessageId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomMessageAttachmentByTopicIdAndRoomMessageIdInput!
  ): DeleteRoomMessageAttachmentPayload

  """Deletes a single `RoomMessage` using its globally unique id."""
  deleteRoomMessageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomMessageByNodeIdInput!
  ): DeleteRoomMessagePayload

  """Deletes a single `RoomSubscription` using a unique key."""
  deleteRoomSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomSubscriptionInput!
  ): DeleteRoomSubscriptionPayload

  """Deletes a single `RoomSubscription` using its globally unique id."""
  deleteRoomSubscriptionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomSubscriptionByNodeIdInput!
  ): DeleteRoomSubscriptionPayload

  """Deletes a single `RoomSubscription` using a unique key."""
  deleteRoomSubscriptionBySubscriberIdAndRoomId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomSubscriptionBySubscriberIdAndRoomIdInput!
  ): DeleteRoomSubscriptionPayload

  """Deletes a single `Topic` using a unique key."""
  deleteTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicInput!
  ): DeleteTopicPayload

  """Deletes a single `Topic` using its globally unique id."""
  deleteTopicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicByNodeIdInput!
  ): DeleteTopicPayload

  """Deletes a single `Topic` using a unique key."""
  deleteTopicBySlugAndOrganizationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicBySlugAndOrganizationIdInput!
  ): DeleteTopicPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using its globally unique id."""
  deleteUserAuthenticationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByNodeIdInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthenticationByServiceAndIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByServiceAndIdentifierInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using its globally unique id."""
  deleteUserEmailByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByNodeIdInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmailByUserIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByUserIdAndEmailInput!
  ): DeleteUserEmailPayload

  """
  If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address!
  """
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload
  inviteToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InviteToOrganizationInput!
  ): InviteToOrganizationPayload

  """
  Use this mutation to log in to your account; this login uses sessions so you do not need to take further action.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload

  """
  Your primary email is where we'll notify of account events; other emails may be used for discovery or login. Use this when you're changing your email address.
  """
  makeEmailPrimary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeEmailPrimaryInput!
  ): MakeEmailPrimaryPayload

  """
  Use this mutation to create an account on our system. This may only be used if you are logged out.
  """
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload
  removeFromOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveFromOrganizationInput!
  ): RemoveFromOrganizationPayload

  """Begin the account deletion flow by requesting the confirmation email"""
  requestAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RequestAccountDeletionInput!
  ): RequestAccountDeletionPayload

  """
  If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently.
  """
  resendEmailVerificationCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResendEmailVerificationCodeInput!
  ): ResendEmailVerificationCodePayload

  """
  After triggering forgotPassword, you'll be sent a reset token. Combine this with your user ID and a new password to reset your password.
  """
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload
  sendRoomMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SendRoomMessageInput!
  ): SendRoomMessagePayload
  transferOrganizationBillingContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationBillingContactInput!
  ): TransferOrganizationBillingContactPayload
  transferOrganizationOwnership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationOwnershipInput!
  ): TransferOrganizationOwnershipPayload

  """Updates a single `File` using a unique key and a patch."""
  updateFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFileInput!
  ): UpdateFilePayload

  """Updates a single `File` using its globally unique id and a patch."""
  updateFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFileByNodeIdInput!
  ): UpdateFilePayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """
  Updates a single `Organization` using its globally unique id and a patch.
  """
  updateOrganizationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByNodeIdInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganizationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationBySlugInput!
  ): UpdateOrganizationPayload

  """Updates a single `PdfFile` using a unique key and a patch."""
  updatePdfFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePdfFileInput!
  ): UpdatePdfFilePayload

  """Updates a single `PdfFile` using its globally unique id and a patch."""
  updatePdfFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePdfFileByNodeIdInput!
  ): UpdatePdfFilePayload

  """Updates a single `Room` using a unique key and a patch."""
  updateRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomInput!
  ): UpdateRoomPayload

  """Updates a single `Room` using its globally unique id and a patch."""
  updateRoomByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomByNodeIdInput!
  ): UpdateRoomPayload

  """Updates a single `RoomItem` using a unique key and a patch."""
  updateRoomItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomItemInput!
  ): UpdateRoomItemPayload

  """Updates a single `RoomItem` using its globally unique id and a patch."""
  updateRoomItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomItemByNodeIdInput!
  ): UpdateRoomItemPayload

  """Updates a single `RoomMessage` using a unique key and a patch."""
  updateRoomMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomMessageInput!
  ): UpdateRoomMessagePayload

  """
  Updates a single `RoomMessage` using its globally unique id and a patch.
  """
  updateRoomMessageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomMessageByNodeIdInput!
  ): UpdateRoomMessagePayload

  """Updates a single `RoomSubscription` using a unique key and a patch."""
  updateRoomSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomSubscriptionInput!
  ): UpdateRoomSubscriptionPayload

  """
  Updates a single `RoomSubscription` using its globally unique id and a patch.
  """
  updateRoomSubscriptionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomSubscriptionByNodeIdInput!
  ): UpdateRoomSubscriptionPayload

  """Updates a single `RoomSubscription` using a unique key and a patch."""
  updateRoomSubscriptionBySubscriberIdAndRoomId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomSubscriptionBySubscriberIdAndRoomIdInput!
  ): UpdateRoomSubscriptionPayload

  """Updates a single `Topic` using a unique key and a patch."""
  updateTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicInput!
  ): UpdateTopicPayload

  """Updates a single `Topic` using its globally unique id and a patch."""
  updateTopicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicByNodeIdInput!
  ): UpdateTopicPayload

  """Updates a single `Topic` using a unique key and a patch."""
  updateTopicBySlugAndOrganizationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicBySlugAndOrganizationIdInput!
  ): UpdateTopicPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """
  Once you have received a verification token for your email, you may call this mutation with that token to make your email verified.
  """
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload
}

"""A connection to a list of `UUID` values."""
type MySubscribedRoomIdsConnection {
  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [MySubscribedRoomIdsEdge]!

  """A list of `UUID` objects."""
  nodes: [UUID]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type MySubscribedRoomIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

enum NotificationSetting {
  DEFAULT
  DEFERRED
  IMMEDIATE
  SILENCED
}

"""
A filter to be used against NotificationSetting fields. All fields are combined with a logical ‘and.’
"""
input NotificationSettingFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: NotificationSetting

  """Equal to the specified value."""
  equalTo: NotificationSetting

  """Greater than the specified value."""
  greaterThan: NotificationSetting

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: NotificationSetting

  """Included in the specified list."""
  in: [NotificationSetting!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: NotificationSetting

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: NotificationSetting

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: NotificationSetting

  """Not equal to the specified value."""
  notEqualTo: NotificationSetting

  """Not included in the specified list."""
  notIn: [NotificationSetting!]
}

type Organization implements Node {
  createdAt: Datetime!
  currentUserIsBillingContact: Boolean
  currentUserIsOwner: Boolean
  id: UUID!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection!

  """Reads and enables pagination through a set of `Room`."""
  rooms(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomsConnection!
  slug: String!

  """Reads and enables pagination through a set of `Topic`."""
  topics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TopicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsConnection!
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """
  Checks for equality with the object’s `currentUserIsBillingContact` field.
  """
  currentUserIsBillingContact: Boolean

  """Checks for equality with the object’s `currentUserIsOwner` field."""
  currentUserIsOwner: Boolean

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

"""
A filter to be used against `Organization` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationFilter {
  """Checks for all expressions in this list."""
  and: [OrganizationFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `currentUserIsBillingContact` field."""
  currentUserIsBillingContact: BooleanFilter

  """Filter by the object’s `currentUserIsOwner` field."""
  currentUserIsOwner: BooleanFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: OrganizationFilter

  """Checks for any expressions in this list."""
  or: [OrganizationFilter!]

  """Filter by the object’s `organizationMemberships` relation."""
  organizationMemberships: OrganizationToManyOrganizationMembershipFilter

  """Some related `organizationMemberships` exist."""
  organizationMembershipsExist: Boolean

  """Filter by the object’s `rooms` relation."""
  rooms: OrganizationToManyRoomFilter

  """Some related `rooms` exist."""
  roomsExist: Boolean

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `topics` relation."""
  topics: OrganizationToManyTopicFilter

  """Some related `topics` exist."""
  topicsExist: Boolean
}

type OrganizationMembership implements Node {
  createdAt: Datetime!
  id: UUID!
  isBillingContact: Boolean!
  isOwner: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization
  organizationId: UUID!

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
  userId: UUID!
}

"""
A condition to be used against `OrganizationMembership` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OrganizationMembershipCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isBillingContact` field."""
  isBillingContact: Boolean

  """Checks for equality with the object’s `isOwner` field."""
  isOwner: Boolean

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationMembershipFilter {
  """Checks for all expressions in this list."""
  and: [OrganizationMembershipFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isBillingContact` field."""
  isBillingContact: BooleanFilter

  """Filter by the object’s `isOwner` field."""
  isOwner: BooleanFilter

  """Negates the expression."""
  not: OrganizationMembershipFilter

  """Checks for any expressions in this list."""
  or: [OrganizationMembershipFilter!]

  """Filter by the object’s `organization` relation."""
  organization: OrganizationFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""A connection to a list of `OrganizationMembership` values."""
type OrganizationMembershipsConnection {
  """
  A list of edges which contains the `OrganizationMembership` and cursor to aid in pagination.
  """
  edges: [OrganizationMembershipsEdge!]!

  """A list of `OrganizationMembership` objects."""
  nodes: [OrganizationMembership!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationMembership` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrganizationMembership` edge in the connection."""
type OrganizationMembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationMembership` at the end of the edge."""
  node: OrganizationMembership!
}

"""Methods to use when ordering `OrganizationMembership`."""
enum OrganizationMembershipsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_BILLING_CONTACT_ASC
  IS_BILLING_CONTACT_DESC
  IS_OWNER_ASC
  IS_OWNER_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  name: String
  slug: String
}

"""
A filter to be used against many `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationToManyOrganizationMembershipFilter {
  """
  Every related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OrganizationMembershipFilter

  """
  No related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OrganizationMembershipFilter

  """
  Some related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OrganizationMembershipFilter
}

"""
A filter to be used against many `Room` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationToManyRoomFilter {
  """
  Every related `Room` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomFilter

  """
  No related `Room` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomFilter

  """
  Some related `Room` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomFilter
}

"""
A filter to be used against many `Topic` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationToManyTopicFilter {
  """
  Every related `Topic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TopicFilter

  """
  No related `Topic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TopicFilter

  """
  Some related `Topic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TopicFilter
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of `Organization` objects."""
  nodes: [Organization!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization!
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type PdfFile implements Node {
  contentAsPlainText: String
  createdAt: Datetime!

  """Reads a single `File` that is related to this `PdfFile`."""
  file: File
  id: UUID!
  metadata: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pages: Int!

  """Reads a single `File` that is related to this `PdfFile`."""
  thumbnail: File
  thumbnailId: UUID
  title: String
  updatedAt: Datetime!
}

"""
A condition to be used against `PdfFile` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PdfFileCondition {
  """Checks for equality with the object’s `contentAsPlainText` field."""
  contentAsPlainText: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON

  """Checks for equality with the object’s `pages` field."""
  pages: Int

  """Checks for equality with the object’s `thumbnailId` field."""
  thumbnailId: UUID

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `PdfFile` object types. All fields are combined with a logical ‘and.’
"""
input PdfFileFilter {
  """Checks for all expressions in this list."""
  and: [PdfFileFilter!]

  """Filter by the object’s `contentAsPlainText` field."""
  contentAsPlainText: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `file` relation."""
  file: FileFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `metadata` field."""
  metadata: JSONFilter

  """Negates the expression."""
  not: PdfFileFilter

  """Checks for any expressions in this list."""
  or: [PdfFileFilter!]

  """Filter by the object’s `pages` field."""
  pages: IntFilter

  """Filter by the object’s `thumbnail` relation."""
  thumbnail: FileFilter

  """A related `thumbnail` exists."""
  thumbnailExists: Boolean

  """Filter by the object’s `thumbnailId` field."""
  thumbnailId: UUIDFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `PdfFile`"""
input PdfFileInput {
  contentAsPlainText: String
  id: UUID!
  metadata: JSON
  pages: Int!
  thumbnailId: UUID
  title: String
}

"""
Represents an update to a `PdfFile`. Fields that are set will be updated.
"""
input PdfFilePatch {
  contentAsPlainText: String
  id: UUID
  metadata: JSON
  pages: Int
  thumbnailId: UUID
  title: String
}

"""A connection to a list of `PdfFile` values."""
type PdfFilesConnection {
  """
  A list of edges which contains the `PdfFile` and cursor to aid in pagination.
  """
  edges: [PdfFilesEdge!]!

  """A list of `PdfFile` objects."""
  nodes: [PdfFile!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PdfFile` you could get from the connection."""
  totalCount: Int!
}

"""A `PdfFile` edge in the connection."""
type PdfFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PdfFile` at the end of the edge."""
  node: PdfFile!
}

"""Methods to use when ordering `PdfFile`."""
enum PdfFilesOrderBy {
  CONTENT_AS_PLAIN_TEXT_ASC
  CONTENT_AS_PLAIN_TEXT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  METADATA_ASC
  METADATA_DESC
  NATURAL
  PAGES_ASC
  PAGES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  THUMBNAIL_ID_ASC
  THUMBNAIL_ID_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Handy method to get the current session ID."""
  currentSessionId: UUID

  """The currently logged in user (or null if not logged in)."""
  currentUser: User
  currentUserFirstOwnedOrganizationId: UUID

  """
  Handy method to get the current user ID for use in RLS policies, etc; in GraphQL, use `currentUser{id}` instead.
  """
  currentUserId: UUID

  """Reads and enables pagination through a set of `Uuid`."""
  currentUserInvitedOrganizationIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UUIDFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserInvitedOrganizationIdsConnection

  """Reads and enables pagination through a set of `Uuid`."""
  currentUserMemberOrganizationIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UUIDFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserMemberOrganizationIdsConnection
  fetchDraftInRoom(roomId: UUID!): RoomMessage

  """Get a single `File`."""
  file(id: UUID!): File

  """Reads a single `File` using its globally unique `ID`."""
  fileByNodeId(
    """The globally unique `ID` to be used in selecting a single `File`."""
    nodeId: ID!
  ): File

  """Reads and enables pagination through a set of `File`."""
  files(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesConnection

  """Reads and enables pagination through a set of `TextsearchMatch`."""
  globalSearch(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TextsearchMatchCondition
    entities: [TextsearchableEntity]

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TextsearchMatchFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TextsearchMatch`."""
    orderBy: [TextsearchMatchesOrderBy!]
    term: String!
  ): TextsearchMatchesConnection

  """Reads and enables pagination through a set of `RoomSubscription`."""
  myRoomSubscriptions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomSubscriptionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int
    minimumRole: RoomRole

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): RoomSubscriptionsConnection

  """Reads and enables pagination through a set of `Uuid`."""
  mySubscribedRoomIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UUIDFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int
    minimumRole: RoomRole

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): MySubscribedRoomIdsConnection

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Get a single `Organization`."""
  organization(id: UUID!): Organization

  """Reads a single `Organization` using its globally unique `ID`."""
  organizationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Organization`.
    """
    nodeId: ID!
  ): Organization

  """Get a single `Organization`."""
  organizationBySlug(slug: String!): Organization
  organizationForInvitation(code: String, invitationId: UUID!): Organization

  """Get a single `OrganizationMembership`."""
  organizationMembership(id: UUID!): OrganizationMembership

  """
  Reads a single `OrganizationMembership` using its globally unique `ID`.
  """
  organizationMembershipByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OrganizationMembership`.
    """
    nodeId: ID!
  ): OrganizationMembership

  """Get a single `OrganizationMembership`."""
  organizationMembershipByOrganizationIdAndUserId(organizationId: UUID!, userId: UUID!): OrganizationMembership

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """Get a single `PdfFile`."""
  pdfFile(id: UUID!): PdfFile

  """Reads a single `PdfFile` using its globally unique `ID`."""
  pdfFileByNodeId(
    """The globally unique `ID` to be used in selecting a single `PdfFile`."""
    nodeId: ID!
  ): PdfFile

  """Reads and enables pagination through a set of `PdfFile`."""
  pdfFiles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PdfFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PdfFileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PdfFilesConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Get a single `Room`."""
  room(id: UUID!): Room

  """Reads a single `Room` using its globally unique `ID`."""
  roomByNodeId(
    """The globally unique `ID` to be used in selecting a single `Room`."""
    nodeId: ID!
  ): Room

  """Get a single `RoomItem`."""
  roomItem(id: UUID!): RoomItem

  """Reads a single `RoomItem` using its globally unique `ID`."""
  roomItemByNodeId(
    """The globally unique `ID` to be used in selecting a single `RoomItem`."""
    nodeId: ID!
  ): RoomItem

  """Reads and enables pagination through a set of `RoomItem`."""
  roomItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomItemsConnection

  """Get a single `RoomMessage`."""
  roomMessage(id: UUID!): RoomMessage

  """Get a single `RoomMessageAttachment`."""
  roomMessageAttachment(id: UUID!): RoomMessageAttachment

  """Reads a single `RoomMessageAttachment` using its globally unique `ID`."""
  roomMessageAttachmentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RoomMessageAttachment`.
    """
    nodeId: ID!
  ): RoomMessageAttachment

  """Get a single `RoomMessageAttachment`."""
  roomMessageAttachmentByTopicIdAndRoomMessageId(roomMessageId: UUID!, topicId: UUID!): RoomMessageAttachment

  """Reads and enables pagination through a set of `RoomMessageAttachment`."""
  roomMessageAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomMessageAttachment`."""
    orderBy: [RoomMessageAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomMessageAttachmentsConnection

  """Reads a single `RoomMessage` using its globally unique `ID`."""
  roomMessageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RoomMessage`.
    """
    nodeId: ID!
  ): RoomMessage

  """Reads and enables pagination through a set of `RoomMessage`."""
  roomMessages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomMessagesConnection

  """Get a single `RoomSubscription`."""
  roomSubscription(id: UUID!): RoomSubscription

  """Reads a single `RoomSubscription` using its globally unique `ID`."""
  roomSubscriptionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RoomSubscription`.
    """
    nodeId: ID!
  ): RoomSubscription

  """Get a single `RoomSubscription`."""
  roomSubscriptionBySubscriberIdAndRoomId(roomId: UUID!, subscriberId: UUID!): RoomSubscription

  """Reads and enables pagination through a set of `RoomSubscription`."""
  roomSubscriptions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomSubscriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomSubscriptionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsConnection

  """Reads and enables pagination through a set of `Room`."""
  rooms(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomsConnection

  """Get a single `Topic`."""
  topic(id: UUID!): Topic

  """Reads a single `Topic` using its globally unique `ID`."""
  topicByNodeId(
    """The globally unique `ID` to be used in selecting a single `Topic`."""
    nodeId: ID!
  ): Topic

  """Get a single `Topic`."""
  topicBySlugAndOrganizationId(organizationId: UUID!, slug: String!): Topic

  """Reads and enables pagination through a set of `Topic`."""
  topics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TopicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsConnection

  """Get a single `User`."""
  user(id: UUID!): User

  """Get a single `UserAuthentication`."""
  userAuthentication(id: UUID!): UserAuthentication

  """Reads a single `UserAuthentication` using its globally unique `ID`."""
  userAuthenticationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserAuthentication`.
    """
    nodeId: ID!
  ): UserAuthentication

  """Get a single `UserAuthentication`."""
  userAuthenticationByServiceAndIdentifier(identifier: String!, service: String!): UserAuthentication

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthentications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAuthenticationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsConnection

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Get a single `User`."""
  userByUsername(username: String!): User

  """Get a single `UserEmail`."""
  userEmail(id: UUID!): UserEmail

  """Reads a single `UserEmail` using its globally unique `ID`."""
  userEmailByNodeId(
    """The globally unique `ID` to be used in selecting a single `UserEmail`."""
    nodeId: ID!
  ): UserEmail

  """Get a single `UserEmail`."""
  userEmailByUserIdAndEmail(email: String!, userId: UUID!): UserEmail

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserEmailFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

input RegisterInput {
  avatarUrl: String
  email: String!
  name: String
  password: String!
  username: String!
}

type RegisterPayload {
  user: User!
}

"""All input for the `removeFromOrganization` mutation."""
input RemoveFromOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `removeFromOrganization` mutation."""
type RemoveFromOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `requestAccountDeletion` mutation."""
input RequestAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `requestAccountDeletion` mutation."""
type RequestAccountDeletionPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resendEmailVerificationCode` mutation."""
input ResendEmailVerificationCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `resendEmailVerificationCode` mutation."""
type ResendEmailVerificationCodePayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  resetToken: String!
  userId: UUID!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""
A room is a place where users meet. At the same time, it is a container for messages and handed-out materials.
"""
type Room implements Node {
  """Each room has an optional abstract."""
  abstract: String
  createdAt: Datetime!
  extendVisibilityOfItemsBy: Interval!
  id: UUID!
  isAnonymousPostingAllowed: Boolean!

  """
  Rooms can be visible for their subscribers only (`subscribers`), to all members of the room's organisation (`organization_members`), for all currently signed-in users (`signed_in_users`), or general in `public`.
  """
  isVisibleFor: RoomVisibility!

  """Reads and enables pagination through a set of `RoomItem`."""
  items(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomItemsConnection!
  itemsAreVisibleFor: RoomRole!

  """
  Sometimes you want to hide items of the room from users who join later. `since_subscription` allows subscribers to see items that were added *after* their subscription. Similarly, `since_invitation` allows subscribers to see items that were added *after* they had been invited to the room. `since_specified_date` allows all subscribers to see items after `items_are_visible_since_date`. Finally, `always` means that all items are visible for the room's audience.
  """
  itemsAreVisibleSince: RoomHistoryVisibility!
  itemsAreVisibleSinceDate: Datetime!
  latestMessage: RoomMessage

  """Reads and enables pagination through a set of `RoomMessage`."""
  messages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomMessagesConnection!

  "\nDate of subscription or first sent message, whatever is earlier.\n"
  myFirstInteraction: Datetime
  myRoomSubscription: RoomSubscription
  nSubscriptions(minRole: RoomRole): BigInt

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Each room can optionally belong to an organization."""
  organization: Organization
  organizationId: UUID

  """Reads and enables pagination through a set of `RoomSubscription`."""
  subscriptions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomSubscriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomSubscriptionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsConnection!

  """Each room has an optional title."""
  title: String
  updatedAt: Datetime!
}

"""
A condition to be used against `Room` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RoomCondition {
  """Checks for equality with the object’s `abstract` field."""
  abstract: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """
  Checks for equality with the object’s `extendVisibilityOfItemsBy` field.
  """
  extendVisibilityOfItemsBy: IntervalInput

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """
  Checks for equality with the object’s `isAnonymousPostingAllowed` field.
  """
  isAnonymousPostingAllowed: Boolean

  """Checks for equality with the object’s `isVisibleFor` field."""
  isVisibleFor: RoomVisibility

  """Checks for equality with the object’s `itemsAreVisibleFor` field."""
  itemsAreVisibleFor: RoomRole

  """Checks for equality with the object’s `itemsAreVisibleSince` field."""
  itemsAreVisibleSince: RoomHistoryVisibility

  """
  Checks for equality with the object’s `itemsAreVisibleSinceDate` field.
  """
  itemsAreVisibleSinceDate: Datetime

  """Checks for equality with the object’s `myFirstInteraction` field."""
  myFirstInteraction: Datetime

  """Checks for equality with the object’s `myRoomSubscriptionId` field."""
  myRoomSubscriptionId: UUID

  """Checks for equality with the object’s `nSubscriptions` field."""
  nSubscriptions: BigInt

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Room` object types. All fields are combined with a logical ‘and.’
"""
input RoomFilter {
  """Filter by the object’s `abstract` field."""
  abstract: StringFilter

  """Checks for all expressions in this list."""
  and: [RoomFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `extendVisibilityOfItemsBy` field."""
  extendVisibilityOfItemsBy: IntervalFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isAnonymousPostingAllowed` field."""
  isAnonymousPostingAllowed: BooleanFilter

  """Filter by the object’s `isVisibleFor` field."""
  isVisibleFor: RoomVisibilityFilter

  """Filter by the object’s `items` relation."""
  items: RoomToManyRoomItemFilter

  """Filter by the object’s `itemsAreVisibleFor` field."""
  itemsAreVisibleFor: RoomRoleFilter

  """Filter by the object’s `itemsAreVisibleSince` field."""
  itemsAreVisibleSince: RoomHistoryVisibilityFilter

  """Filter by the object’s `itemsAreVisibleSinceDate` field."""
  itemsAreVisibleSinceDate: DatetimeFilter

  """Some related `items` exist."""
  itemsExist: Boolean

  """Filter by the object’s `messages` relation."""
  messages: RoomToManyRoomMessageFilter

  """Some related `messages` exist."""
  messagesExist: Boolean

  """Filter by the object’s `myFirstInteraction` field."""
  myFirstInteraction: DatetimeFilter

  """Filter by the object’s `myRoomSubscriptionId` field."""
  myRoomSubscriptionId: UUIDFilter

  """Filter by the object’s `nSubscriptions` field."""
  nSubscriptions: BigIntFilter

  """Negates the expression."""
  not: RoomFilter

  """Checks for any expressions in this list."""
  or: [RoomFilter!]

  """Filter by the object’s `organization` relation."""
  organization: OrganizationFilter

  """A related `organization` exists."""
  organizationExists: Boolean

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `subscriptions` relation."""
  subscriptions: RoomToManyRoomSubscriptionFilter

  """Some related `subscriptions` exist."""
  subscriptionsExist: Boolean

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

enum RoomHistoryVisibility {
  ALWAYS
  INVITATION
  SPECIFIED_DATE
  SUBSCRIPTION
}

"""
A filter to be used against RoomHistoryVisibility fields. All fields are combined with a logical ‘and.’
"""
input RoomHistoryVisibilityFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: RoomHistoryVisibility

  """Equal to the specified value."""
  equalTo: RoomHistoryVisibility

  """Greater than the specified value."""
  greaterThan: RoomHistoryVisibility

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: RoomHistoryVisibility

  """Included in the specified list."""
  in: [RoomHistoryVisibility!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: RoomHistoryVisibility

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: RoomHistoryVisibility

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: RoomHistoryVisibility

  """Not equal to the specified value."""
  notEqualTo: RoomHistoryVisibility

  """Not included in the specified list."""
  notIn: [RoomHistoryVisibility!]
}

"""An input for mutations affecting `Room`"""
input RoomInput {
  """Each room has an optional abstract."""
  abstract: String
  isAnonymousPostingAllowed: Boolean

  """
  Rooms can be visible for their subscribers only (`subscribers`), to all members of the room's organisation (`organization_members`), for all currently signed-in users (`signed_in_users`), or general in `public`.
  """
  isVisibleFor: RoomVisibility

  """
  Sometimes you want to hide items of the room from users who join later. `since_subscription` allows subscribers to see items that were added *after* their subscription. Similarly, `since_invitation` allows subscribers to see items that were added *after* they had been invited to the room. `since_specified_date` allows all subscribers to see items after `items_are_visible_since_date`. Finally, `always` means that all items are visible for the room's audience.
  """
  itemsAreVisibleSince: RoomHistoryVisibility

  """Each room has an optional title."""
  title: String
}

"""
Room items are messages or materials, that are accessible within a certain room.
"""
type RoomItem implements Node {
  """Reads and enables pagination through a set of `RoomItem`."""
  children(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomItemsConnection!
  contributedAt: Datetime

  """Reads a single `User` that is related to this `RoomItem`."""
  contributor: User

  """The id of a user who contributed the room item."""
  contributorId: UUID
  createdAt: Datetime!
  id: UUID!

  """
  Decides which role can see the room item. This also applies to more powerful roles. If the value is not set, the default settings of the room will be used.
  """
  isVisibleFor: RoomRole

  """
  Decides if room items are always visible or only to users who subscribed before they were added. If the value is not set, the default settings of the room will be used.
  """
  isVisibleSince: RoomHistoryVisibility
  isVisibleSinceDate: Datetime
  messageBody: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  The default order is 0, but you can change it to different values to sort the items.
  """
  order: Float!

  """Room items can be related in trees."""
  parent: RoomItem

  """
  The items in a room can be connected to each other, basically forming one or multiple trees. For example, you can use this to keep track of conversations.
  """
  parentId: UUID

  """Reads a single `Room` that is related to this `RoomItem`."""
  room: Room
  roomId: UUID!

  """Reads a single `Topic` that is related to this `RoomItem`."""
  topic: Topic
  topicId: UUID

  """The kind of room item. There are messages, pages, files, and so on."""
  type: RoomItemType!
  updatedAt: Datetime!
}

"""
A condition to be used against `RoomItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RoomItemCondition {
  """Checks for equality with the object’s `contributedAt` field."""
  contributedAt: Datetime

  """Checks for equality with the object’s `contributorId` field."""
  contributorId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isVisibleFor` field."""
  isVisibleFor: RoomRole

  """Checks for equality with the object’s `isVisibleSince` field."""
  isVisibleSince: RoomHistoryVisibility

  """Checks for equality with the object’s `isVisibleSinceDate` field."""
  isVisibleSinceDate: Datetime

  """Checks for equality with the object’s `messageBody` field."""
  messageBody: JSON

  """Checks for equality with the object’s `order` field."""
  order: Float

  """Checks for equality with the object’s `parentId` field."""
  parentId: UUID

  """Checks for equality with the object’s `roomId` field."""
  roomId: UUID

  """Checks for equality with the object’s `topicId` field."""
  topicId: UUID

  """Checks for equality with the object’s `type` field."""
  type: RoomItemType

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `RoomItem` object types. All fields are combined with a logical ‘and.’
"""
input RoomItemFilter {
  """Checks for all expressions in this list."""
  and: [RoomItemFilter!]

  """Filter by the object’s `children` relation."""
  children: RoomItemToManyRoomItemFilter

  """Some related `children` exist."""
  childrenExist: Boolean

  """Filter by the object’s `contributedAt` field."""
  contributedAt: DatetimeFilter

  """Filter by the object’s `contributor` relation."""
  contributor: UserFilter

  """A related `contributor` exists."""
  contributorExists: Boolean

  """Filter by the object’s `contributorId` field."""
  contributorId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isVisibleFor` field."""
  isVisibleFor: RoomRoleFilter

  """Filter by the object’s `isVisibleSince` field."""
  isVisibleSince: RoomHistoryVisibilityFilter

  """Filter by the object’s `isVisibleSinceDate` field."""
  isVisibleSinceDate: DatetimeFilter

  """Filter by the object’s `messageBody` field."""
  messageBody: JSONFilter

  """Negates the expression."""
  not: RoomItemFilter

  """Checks for any expressions in this list."""
  or: [RoomItemFilter!]

  """Filter by the object’s `order` field."""
  order: FloatFilter

  """Filter by the object’s `parent` relation."""
  parent: RoomItemFilter

  """A related `parent` exists."""
  parentExists: Boolean

  """Filter by the object’s `parentId` field."""
  parentId: UUIDFilter

  """Filter by the object’s `room` relation."""
  room: RoomFilter

  """Filter by the object’s `roomId` field."""
  roomId: UUIDFilter

  """Filter by the object’s `topic` relation."""
  topic: TopicFilter

  """A related `topic` exists."""
  topicExists: Boolean

  """Filter by the object’s `topicId` field."""
  topicId: UUIDFilter

  """Filter by the object’s `type` field."""
  type: RoomItemTypeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `RoomItem`"""
input RoomItemInput {
  contributedAt: Datetime

  """The id of a user who contributed the room item."""
  contributorId: UUID

  """
  Decides which role can see the room item. This also applies to more powerful roles. If the value is not set, the default settings of the room will be used.
  """
  isVisibleFor: RoomRole

  """
  Decides if room items are always visible or only to users who subscribed before they were added. If the value is not set, the default settings of the room will be used.
  """
  isVisibleSince: RoomHistoryVisibility
  isVisibleSinceDate: Datetime
  messageBody: JSON

  """
  The default order is 0, but you can change it to different values to sort the items.
  """
  order: Float

  """
  The items in a room can be connected to each other, basically forming one or multiple trees. For example, you can use this to keep track of conversations.
  """
  parentId: UUID
  roomId: UUID!
  topicId: UUID

  """The kind of room item. There are messages, pages, files, and so on."""
  type: RoomItemType
}

"""
Represents an update to a `RoomItem`. Fields that are set will be updated.
"""
input RoomItemPatch {
  contributedAt: Datetime

  """
  Decides which role can see the room item. This also applies to more powerful roles. If the value is not set, the default settings of the room will be used.
  """
  isVisibleFor: RoomRole

  """
  Decides if room items are always visible or only to users who subscribed before they were added. If the value is not set, the default settings of the room will be used.
  """
  isVisibleSince: RoomHistoryVisibility
  isVisibleSinceDate: Datetime
  messageBody: JSON

  """
  The default order is 0, but you can change it to different values to sort the items.
  """
  order: Float
  topicId: UUID
}

"""
A filter to be used against many `RoomItem` object types. All fields are combined with a logical ‘and.’
"""
input RoomItemToManyRoomItemFilter {
  """
  Every related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomItemFilter

  """
  No related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomItemFilter

  """
  Some related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomItemFilter
}

enum RoomItemType {
  MESSAGE
  TOPIC
}

"""
A filter to be used against RoomItemType fields. All fields are combined with a logical ‘and.’
"""
input RoomItemTypeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: RoomItemType

  """Equal to the specified value."""
  equalTo: RoomItemType

  """Greater than the specified value."""
  greaterThan: RoomItemType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: RoomItemType

  """Included in the specified list."""
  in: [RoomItemType!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: RoomItemType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: RoomItemType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: RoomItemType

  """Not equal to the specified value."""
  notEqualTo: RoomItemType

  """Not included in the specified list."""
  notIn: [RoomItemType!]
}

"""A connection to a list of `RoomItem` values."""
type RoomItemsConnection {
  """
  A list of edges which contains the `RoomItem` and cursor to aid in pagination.
  """
  edges: [RoomItemsEdge!]!

  """A list of `RoomItem` objects."""
  nodes: [RoomItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RoomItem` you could get from the connection."""
  totalCount: Int!
}

"""A `RoomItem` edge in the connection."""
type RoomItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoomItem` at the end of the edge."""
  node: RoomItem!
}

"""Methods to use when ordering `RoomItem`."""
enum RoomItemsOrderBy {
  CONTRIBUTED_AT_ASC
  CONTRIBUTED_AT_DESC
  CONTRIBUTOR_ID_ASC
  CONTRIBUTOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_VISIBLE_FOR_ASC
  IS_VISIBLE_FOR_DESC
  IS_VISIBLE_SINCE_ASC
  IS_VISIBLE_SINCE_DATE_ASC
  IS_VISIBLE_SINCE_DATE_DESC
  IS_VISIBLE_SINCE_DESC
  MESSAGE_BODY_ASC
  MESSAGE_BODY_DESC
  NATURAL
  ORDER_ASC
  ORDER_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOM_ID_ASC
  ROOM_ID_DESC
  TOPIC_ID_ASC
  TOPIC_ID_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type RoomMessage implements Node {
  """Reads a single `RoomMessage` that is related to this `RoomMessage`."""
  answeredMessage: RoomMessage
  answeredMessageId: UUID

  """Reads and enables pagination through a set of `RoomMessage`."""
  answers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomMessagesConnection!

  """Reads and enables pagination through a set of `RoomMessageAttachment`."""
  attachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomMessageAttachment`."""
    orderBy: [RoomMessageAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomMessageAttachmentsConnection!
  body: String
  createdAt: Datetime!
  id: UUID!
  language: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Room` that is related to this `RoomMessage`."""
  room: Room
  roomId: UUID!

  """Reads a single `User` that is related to this `RoomMessage`."""
  sender: User
  senderId: UUID
  sentAt: Datetime
  updatedAt: Datetime!
}

type RoomMessageAttachment implements Node {
  createdAt: Datetime!
  id: UUID!

  """
  Reads a single `RoomMessage` that is related to this `RoomMessageAttachment`.
  """
  message: RoomMessage

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  roomMessageId: UUID!

  """
  Reads a single `Topic` that is related to this `RoomMessageAttachment`.
  """
  topic: Topic
  topicId: UUID!
}

"""
A condition to be used against `RoomMessageAttachment` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input RoomMessageAttachmentCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `roomMessageId` field."""
  roomMessageId: UUID

  """Checks for equality with the object’s `topicId` field."""
  topicId: UUID
}

"""
A filter to be used against `RoomMessageAttachment` object types. All fields are combined with a logical ‘and.’
"""
input RoomMessageAttachmentFilter {
  """Checks for all expressions in this list."""
  and: [RoomMessageAttachmentFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `message` relation."""
  message: RoomMessageFilter

  """Negates the expression."""
  not: RoomMessageAttachmentFilter

  """Checks for any expressions in this list."""
  or: [RoomMessageAttachmentFilter!]

  """Filter by the object’s `roomMessageId` field."""
  roomMessageId: UUIDFilter

  """Filter by the object’s `topic` relation."""
  topic: TopicFilter

  """Filter by the object’s `topicId` field."""
  topicId: UUIDFilter
}

"""An input for mutations affecting `RoomMessageAttachment`"""
input RoomMessageAttachmentInput {
  id: UUID
  roomMessageId: UUID!
  topicId: UUID!
}

"""A connection to a list of `RoomMessageAttachment` values."""
type RoomMessageAttachmentsConnection {
  """
  A list of edges which contains the `RoomMessageAttachment` and cursor to aid in pagination.
  """
  edges: [RoomMessageAttachmentsEdge!]!

  """A list of `RoomMessageAttachment` objects."""
  nodes: [RoomMessageAttachment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RoomMessageAttachment` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RoomMessageAttachment` edge in the connection."""
type RoomMessageAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoomMessageAttachment` at the end of the edge."""
  node: RoomMessageAttachment!
}

"""Methods to use when ordering `RoomMessageAttachment`."""
enum RoomMessageAttachmentsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOM_MESSAGE_ID_ASC
  ROOM_MESSAGE_ID_DESC
  TOPIC_ID_ASC
  TOPIC_ID_DESC
}

"""
A condition to be used against `RoomMessage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RoomMessageCondition {
  """Checks for equality with the object’s `answeredMessageId` field."""
  answeredMessageId: UUID

  """Checks for equality with the object’s `body` field."""
  body: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `language` field."""
  language: String

  """Checks for equality with the object’s `roomId` field."""
  roomId: UUID

  """Checks for equality with the object’s `senderId` field."""
  senderId: UUID

  """Checks for equality with the object’s `sentAt` field."""
  sentAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `RoomMessage` object types. All fields are combined with a logical ‘and.’
"""
input RoomMessageFilter {
  """Checks for all expressions in this list."""
  and: [RoomMessageFilter!]

  """Filter by the object’s `answeredMessage` relation."""
  answeredMessage: RoomMessageFilter

  """A related `answeredMessage` exists."""
  answeredMessageExists: Boolean

  """Filter by the object’s `answeredMessageId` field."""
  answeredMessageId: UUIDFilter

  """Filter by the object’s `answers` relation."""
  answers: RoomMessageToManyRoomMessageFilter

  """Some related `answers` exist."""
  answersExist: Boolean

  """Filter by the object’s `attachments` relation."""
  attachments: RoomMessageToManyRoomMessageAttachmentFilter

  """Some related `attachments` exist."""
  attachmentsExist: Boolean

  """Filter by the object’s `body` field."""
  body: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `language` field."""
  language: StringFilter

  """Negates the expression."""
  not: RoomMessageFilter

  """Checks for any expressions in this list."""
  or: [RoomMessageFilter!]

  """Filter by the object’s `room` relation."""
  room: RoomFilter

  """Filter by the object’s `roomId` field."""
  roomId: UUIDFilter

  """Filter by the object’s `sender` relation."""
  sender: UserFilter

  """A related `sender` exists."""
  senderExists: Boolean

  """Filter by the object’s `senderId` field."""
  senderId: UUIDFilter

  """Filter by the object’s `sentAt` field."""
  sentAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `RoomMessage`"""
input RoomMessageInput {
  answeredMessageId: UUID
  body: String
  language: String
  roomId: UUID!
  senderId: UUID
  sentAt: Datetime
}

"""
Represents an update to a `RoomMessage`. Fields that are set will be updated.
"""
input RoomMessagePatch {
  answeredMessageId: UUID
  body: String
  language: String
  sentAt: Datetime
}

"""
A filter to be used against many `RoomMessageAttachment` object types. All fields are combined with a logical ‘and.’
"""
input RoomMessageToManyRoomMessageAttachmentFilter {
  """
  Every related `RoomMessageAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomMessageAttachmentFilter

  """
  No related `RoomMessageAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomMessageAttachmentFilter

  """
  Some related `RoomMessageAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomMessageAttachmentFilter
}

"""
A filter to be used against many `RoomMessage` object types. All fields are combined with a logical ‘and.’
"""
input RoomMessageToManyRoomMessageFilter {
  """
  Every related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomMessageFilter

  """
  No related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomMessageFilter

  """
  Some related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomMessageFilter
}

"""A connection to a list of `RoomMessage` values."""
type RoomMessagesConnection {
  """
  A list of edges which contains the `RoomMessage` and cursor to aid in pagination.
  """
  edges: [RoomMessagesEdge!]!

  """A list of `RoomMessage` objects."""
  nodes: [RoomMessage!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RoomMessage` you could get from the connection."""
  totalCount: Int!
}

"""A `RoomMessage` edge in the connection."""
type RoomMessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoomMessage` at the end of the edge."""
  node: RoomMessage!
}

"""Methods to use when ordering `RoomMessage`."""
enum RoomMessagesOrderBy {
  ANSWERED_MESSAGE_ID_ASC
  ANSWERED_MESSAGE_ID_DESC
  BODY_ASC
  BODY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  LANGUAGE_ASC
  LANGUAGE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOM_ID_ASC
  ROOM_ID_DESC
  SENDER_ID_ASC
  SENDER_ID_DESC
  SENT_AT_ASC
  SENT_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Represents an update to a `Room`. Fields that are set will be updated."""
input RoomPatch {
  """Each room has an optional abstract."""
  abstract: String
  isAnonymousPostingAllowed: Boolean

  """
  Rooms can be visible for their subscribers only (`subscribers`), to all members of the room's organisation (`organization_members`), for all currently signed-in users (`signed_in_users`), or general in `public`.
  """
  isVisibleFor: RoomVisibility

  """
  Sometimes you want to hide items of the room from users who join later. `since_subscription` allows subscribers to see items that were added *after* their subscription. Similarly, `since_invitation` allows subscribers to see items that were added *after* they had been invited to the room. `since_specified_date` allows all subscribers to see items after `items_are_visible_since_date`. Finally, `always` means that all items are visible for the room's audience.
  """
  itemsAreVisibleSince: RoomHistoryVisibility

  """Each room has an optional title."""
  title: String
}

enum RoomRole {
  ADMIN
  BANNED
  MEMBER
  MODERATOR
  PROSPECT
  PUBLIC
}

"""
A filter to be used against RoomRole fields. All fields are combined with a logical ‘and.’
"""
input RoomRoleFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: RoomRole

  """Equal to the specified value."""
  equalTo: RoomRole

  """Greater than the specified value."""
  greaterThan: RoomRole

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: RoomRole

  """Included in the specified list."""
  in: [RoomRole!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: RoomRole

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: RoomRole

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: RoomRole

  """Not equal to the specified value."""
  notEqualTo: RoomRole

  """Not included in the specified list."""
  notIn: [RoomRole!]
}

"""Users can be subscribed to rooms."""
type RoomSubscription implements Node {
  createdAt: Datetime!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  notifications: NotificationSetting!

  """Maintainers can manage subscriptions and delete the room."""
  role: RoomRole!

  """Reads a single `Room` that is related to this `RoomSubscription`."""
  room: Room
  roomId: UUID!

  """Reads a single `User` that is related to this `RoomSubscription`."""
  subscriber: User

  """The subscribing user."""
  subscriberId: UUID!
  updatedAt: Datetime!
}

"""
A condition to be used against `RoomSubscription` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RoomSubscriptionCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `notifications` field."""
  notifications: NotificationSetting

  """Checks for equality with the object’s `role` field."""
  role: RoomRole

  """Checks for equality with the object’s `roomId` field."""
  roomId: UUID

  """Checks for equality with the object’s `subscriberId` field."""
  subscriberId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `RoomSubscription` object types. All fields are combined with a logical ‘and.’
"""
input RoomSubscriptionFilter {
  """Checks for all expressions in this list."""
  and: [RoomSubscriptionFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: RoomSubscriptionFilter

  """Filter by the object’s `notifications` field."""
  notifications: NotificationSettingFilter

  """Checks for any expressions in this list."""
  or: [RoomSubscriptionFilter!]

  """Filter by the object’s `role` field."""
  role: RoomRoleFilter

  """Filter by the object’s `room` relation."""
  room: RoomFilter

  """Filter by the object’s `roomId` field."""
  roomId: UUIDFilter

  """Filter by the object’s `subscriber` relation."""
  subscriber: UserFilter

  """Filter by the object’s `subscriberId` field."""
  subscriberId: UUIDFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `RoomSubscription`"""
input RoomSubscriptionInput {
  notifications: NotificationSetting

  """Maintainers can manage subscriptions and delete the room."""
  role: RoomRole
  roomId: UUID!

  """The subscribing user."""
  subscriberId: UUID
}

"""
Represents an update to a `RoomSubscription`. Fields that are set will be updated.
"""
input RoomSubscriptionPatch {
  notifications: NotificationSetting

  """Maintainers can manage subscriptions and delete the room."""
  role: RoomRole
}

"""A connection to a list of `RoomSubscription` values."""
type RoomSubscriptionsConnection {
  """
  A list of edges which contains the `RoomSubscription` and cursor to aid in pagination.
  """
  edges: [RoomSubscriptionsEdge!]!

  """A list of `RoomSubscription` objects."""
  nodes: [RoomSubscription!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RoomSubscription` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RoomSubscription` edge in the connection."""
type RoomSubscriptionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoomSubscription` at the end of the edge."""
  node: RoomSubscription!
}

"""Methods to use when ordering `RoomSubscription`."""
enum RoomSubscriptionsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  NOTIFICATIONS_ASC
  NOTIFICATIONS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_ASC
  ROLE_DESC
  ROOM_ID_ASC
  ROOM_ID_DESC
  SUBSCRIBERS_USERNAME_ASC
  SUBSCRIBERS_USERNAME_DESC
  SUBSCRIBER_ID_ASC
  SUBSCRIBER_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `RoomItem` object types. All fields are combined with a logical ‘and.’
"""
input RoomToManyRoomItemFilter {
  """
  Every related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomItemFilter

  """
  No related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomItemFilter

  """
  Some related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomItemFilter
}

"""
A filter to be used against many `RoomMessage` object types. All fields are combined with a logical ‘and.’
"""
input RoomToManyRoomMessageFilter {
  """
  Every related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomMessageFilter

  """
  No related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomMessageFilter

  """
  Some related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomMessageFilter
}

"""
A filter to be used against many `RoomSubscription` object types. All fields are combined with a logical ‘and.’
"""
input RoomToManyRoomSubscriptionFilter {
  """
  Every related `RoomSubscription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomSubscriptionFilter

  """
  No related `RoomSubscription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomSubscriptionFilter

  """
  Some related `RoomSubscription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomSubscriptionFilter
}

enum RoomVisibility {
  ORGANIZATION_MEMBERS
  PUBLIC
  SIGNED_IN_USERS
  SUBSCRIBERS
}

"""
A filter to be used against RoomVisibility fields. All fields are combined with a logical ‘and.’
"""
input RoomVisibilityFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: RoomVisibility

  """Equal to the specified value."""
  equalTo: RoomVisibility

  """Greater than the specified value."""
  greaterThan: RoomVisibility

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: RoomVisibility

  """Included in the specified list."""
  in: [RoomVisibility!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: RoomVisibility

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: RoomVisibility

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: RoomVisibility

  """Not equal to the specified value."""
  notEqualTo: RoomVisibility

  """Not included in the specified list."""
  notIn: [RoomVisibility!]
}

"""A connection to a list of `Room` values."""
type RoomsConnection {
  """
  A list of edges which contains the `Room` and cursor to aid in pagination.
  """
  edges: [RoomsEdge!]!

  """A list of `Room` objects."""
  nodes: [Room!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Room` you could get from the connection."""
  totalCount: Int!
}

"""A `Room` edge in the connection."""
type RoomsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Room` at the end of the edge."""
  node: Room!
}

"""Methods to use when ordering `Room`."""
enum RoomsOrderBy {
  ABSTRACT_ASC
  ABSTRACT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EXTEND_VISIBILITY_OF_ITEMS_BY_ASC
  EXTEND_VISIBILITY_OF_ITEMS_BY_DESC
  ID_ASC
  ID_DESC
  IS_ANONYMOUS_POSTING_ALLOWED_ASC
  IS_ANONYMOUS_POSTING_ALLOWED_DESC
  IS_VISIBLE_FOR_ASC
  IS_VISIBLE_FOR_DESC
  ITEMS_ARE_VISIBLE_FOR_ASC
  ITEMS_ARE_VISIBLE_FOR_DESC
  ITEMS_ARE_VISIBLE_SINCE_ASC
  ITEMS_ARE_VISIBLE_SINCE_DATE_ASC
  ITEMS_ARE_VISIBLE_SINCE_DATE_DESC
  ITEMS_ARE_VISIBLE_SINCE_DESC
  NATURAL
  N_SUBSCRIPTIONS_ASC
  N_SUBSCRIPTIONS_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""All input for the `sendRoomMessage` mutation."""
input SendRoomMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  draftId: UUID!
}

"""The output of our `sendRoomMessage` mutation."""
type SendRoomMessagePayload {
  """Reads a single `RoomMessage` that is related to this `RoomMessage`."""
  answeredMessage: RoomMessage

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Room` that is related to this `RoomMessage`."""
  room: Room
  roomMessage: RoomMessage

  """An edge for our `RoomMessage`. May be used by Relay 1."""
  roomMessageEdge(
    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomMessagesEdge

  """Reads a single `User` that is related to this `RoomMessage`."""
  sender: User
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Contained by the specified list of values."""
  containedBy: [String]

  """Contains the specified list of values."""
  contains: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value."""
  equalTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]
}

type TextsearchMatch {
  id: UUID!
  rankOrSimilarity: Float!

  """Reads a single `Room` that is related to this `TextsearchMatch`."""
  room: Room
  roomId: UUID
  snippet: String
  title: String!

  """Reads a single `Topic` that is related to this `TextsearchMatch`."""
  topic: Topic
  topicId: UUID
  type: TextsearchableEntity!

  """Reads a single `User` that is related to this `TextsearchMatch`."""
  user: User
  userId: UUID
}

"""
A condition to be used against `TextsearchMatch` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TextsearchMatchCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `rankOrSimilarity` field."""
  rankOrSimilarity: Float

  """Checks for equality with the object’s `roomId` field."""
  roomId: UUID

  """Checks for equality with the object’s `snippet` field."""
  snippet: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `topicId` field."""
  topicId: UUID

  """Checks for equality with the object’s `type` field."""
  type: TextsearchableEntity

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `TextsearchMatch` object types. All fields are combined with a logical ‘and.’
"""
input TextsearchMatchFilter {
  """Checks for all expressions in this list."""
  and: [TextsearchMatchFilter!]

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: TextsearchMatchFilter

  """Checks for any expressions in this list."""
  or: [TextsearchMatchFilter!]

  """Filter by the object’s `rankOrSimilarity` field."""
  rankOrSimilarity: FloatFilter

  """Filter by the object’s `roomId` field."""
  roomId: UUIDFilter

  """Filter by the object’s `snippet` field."""
  snippet: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `topicId` field."""
  topicId: UUIDFilter

  """Filter by the object’s `type` field."""
  type: TextsearchableEntityFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""A connection to a list of `TextsearchMatch` values."""
type TextsearchMatchesConnection {
  """
  A list of edges which contains the `TextsearchMatch` and cursor to aid in pagination.
  """
  edges: [TextsearchMatchesEdge!]!

  """A list of `TextsearchMatch` objects."""
  nodes: [TextsearchMatch!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TextsearchMatch` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TextsearchMatch` edge in the connection."""
type TextsearchMatchesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TextsearchMatch` at the end of the edge."""
  node: TextsearchMatch!
}

"""Methods to use when ordering `TextsearchMatch`."""
enum TextsearchMatchesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  RANK_OR_SIMILARITY_ASC
  RANK_OR_SIMILARITY_DESC
  ROOM_ID_ASC
  ROOM_ID_DESC
  SNIPPET_ASC
  SNIPPET_DESC
  TITLE_ASC
  TITLE_DESC
  TOPIC_ID_ASC
  TOPIC_ID_DESC
  TYPE_ASC
  TYPE_DESC
  USER_ID_ASC
  USER_ID_DESC
}

enum TextsearchableEntity {
  ROOM
  TOPIC
  USER
}

"""
A filter to be used against TextsearchableEntity fields. All fields are combined with a logical ‘and.’
"""
input TextsearchableEntityFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: TextsearchableEntity

  """Equal to the specified value."""
  equalTo: TextsearchableEntity

  """Greater than the specified value."""
  greaterThan: TextsearchableEntity

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: TextsearchableEntity

  """Included in the specified list."""
  in: [TextsearchableEntity!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: TextsearchableEntity

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: TextsearchableEntity

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: TextsearchableEntity

  """Not equal to the specified value."""
  notEqualTo: TextsearchableEntity

  """Not included in the specified list."""
  notIn: [TextsearchableEntity!]
}

"""
The exact time of day, does not include the date. May or may not have a timezone offset.
"""
scalar Time

"""
A filter to be used against Time fields. All fields are combined with a logical ‘and.’
"""
input TimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Time

  """Equal to the specified value."""
  equalTo: Time

  """Greater than the specified value."""
  greaterThan: Time

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Time

  """Included in the specified list."""
  in: [Time!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Time

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Time

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Time

  """Not equal to the specified value."""
  notEqualTo: Time

  """Not included in the specified list."""
  notIn: [Time!]
}

"""
A topic is a short text about something. Most topics should have the scope of a micro learning unit.
"""
type Topic implements Node {
  """
  Each topic has an author. The field might be null when the original author has unregistered from the application.
  """
  author: User
  authorId: UUID

  """
  The topics contents as JSON. Can be converted to HTML with https://tiptap.dev/api/utilities/html
  """
  content: JSON!
  contentAsPlainText: String
  contentPreview(nFirstItems: Int): JSON
  createdAt: Datetime!
  id: UUID!

  """
  Topics can be visible to anyone (`public`), to all signed-in users (`signed_in_users`), or within an organization (`organization_members`).
  """
  isVisibleFor: TopicVisibility!

  """Each topic can optionally be licensed. Hyperlinks are allowed."""
  license: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Organization` that is related to this `Topic`."""
  organization: Organization
  organizationId: UUID

  """Reads and enables pagination through a set of `RoomItem`."""
  roomItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomItemsConnection!

  """Reads and enables pagination through a set of `RoomMessageAttachment`."""
  roomMessageAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomMessageAttachment`."""
    orderBy: [RoomMessageAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomMessageAttachmentsConnection!

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String!

  """Each topic can be categorized using tags."""
  tags: [String]!

  """
  Each topic has an optional title. In case of an article, this would be the headline.
  """
  title: String
  updatedAt: Datetime!
}

"""
A condition to be used against `Topic` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TopicCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `content` field."""
  content: JSON

  """Checks for equality with the object’s `contentAsPlainText` field."""
  contentAsPlainText: String

  """Checks for equality with the object’s `contentPreview` field."""
  contentPreview: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isVisibleFor` field."""
  isVisibleFor: TopicVisibility

  """Checks for equality with the object’s `license` field."""
  license: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `tags` field."""
  tags: [String]

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Topic` object types. All fields are combined with a logical ‘and.’
"""
input TopicFilter {
  """Checks for all expressions in this list."""
  and: [TopicFilter!]

  """Filter by the object’s `author` relation."""
  author: UserFilter

  """A related `author` exists."""
  authorExists: Boolean

  """Filter by the object’s `authorId` field."""
  authorId: UUIDFilter

  """Filter by the object’s `content` field."""
  content: JSONFilter

  """Filter by the object’s `contentAsPlainText` field."""
  contentAsPlainText: StringFilter

  """Filter by the object’s `contentPreview` field."""
  contentPreview: JSONFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isVisibleFor` field."""
  isVisibleFor: TopicVisibilityFilter

  """Filter by the object’s `license` field."""
  license: StringFilter

  """Negates the expression."""
  not: TopicFilter

  """Checks for any expressions in this list."""
  or: [TopicFilter!]

  """Filter by the object’s `organization` relation."""
  organization: OrganizationFilter

  """A related `organization` exists."""
  organizationExists: Boolean

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `roomItems` relation."""
  roomItems: TopicToManyRoomItemFilter

  """Some related `roomItems` exist."""
  roomItemsExist: Boolean

  """Filter by the object’s `roomMessageAttachments` relation."""
  roomMessageAttachments: TopicToManyRoomMessageAttachmentFilter

  """Some related `roomMessageAttachments` exist."""
  roomMessageAttachmentsExist: Boolean

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `tags` field."""
  tags: StringListFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Topic`"""
input TopicInput {
  authorId: UUID

  """
  The topics contents as JSON. Can be converted to HTML with https://tiptap.dev/api/utilities/html
  """
  content: JSON!

  """
  Topics can be visible to anyone (`public`), to all signed-in users (`signed_in_users`), or within an organization (`organization_members`).
  """
  isVisibleFor: TopicVisibility

  """Each topic can optionally be licensed. Hyperlinks are allowed."""
  license: String
  organizationId: UUID

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String!

  """
  Each topic has an optional title. In case of an article, this would be the headline.
  """
  title: String
}

"""
Represents an update to a `Topic`. Fields that are set will be updated.
"""
input TopicPatch {
  authorId: UUID

  """
  The topics contents as JSON. Can be converted to HTML with https://tiptap.dev/api/utilities/html
  """
  content: JSON

  """
  Topics can be visible to anyone (`public`), to all signed-in users (`signed_in_users`), or within an organization (`organization_members`).
  """
  isVisibleFor: TopicVisibility

  """Each topic can optionally be licensed. Hyperlinks are allowed."""
  license: String
  organizationId: UUID

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String

  """
  Each topic has an optional title. In case of an article, this would be the headline.
  """
  title: String
}

"""
A filter to be used against many `RoomItem` object types. All fields are combined with a logical ‘and.’
"""
input TopicToManyRoomItemFilter {
  """
  Every related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomItemFilter

  """
  No related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomItemFilter

  """
  Some related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomItemFilter
}

"""
A filter to be used against many `RoomMessageAttachment` object types. All fields are combined with a logical ‘and.’
"""
input TopicToManyRoomMessageAttachmentFilter {
  """
  Every related `RoomMessageAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomMessageAttachmentFilter

  """
  No related `RoomMessageAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomMessageAttachmentFilter

  """
  Some related `RoomMessageAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomMessageAttachmentFilter
}

enum TopicVisibility {
  ORGANIZATION_MEMBERS
  PUBLIC
  SIGNED_IN_USERS
}

"""
A filter to be used against TopicVisibility fields. All fields are combined with a logical ‘and.’
"""
input TopicVisibilityFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: TopicVisibility

  """Equal to the specified value."""
  equalTo: TopicVisibility

  """Greater than the specified value."""
  greaterThan: TopicVisibility

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: TopicVisibility

  """Included in the specified list."""
  in: [TopicVisibility!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: TopicVisibility

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: TopicVisibility

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: TopicVisibility

  """Not equal to the specified value."""
  notEqualTo: TopicVisibility

  """Not included in the specified list."""
  notIn: [TopicVisibility!]
}

"""A connection to a list of `Topic` values."""
type TopicsConnection {
  """
  A list of edges which contains the `Topic` and cursor to aid in pagination.
  """
  edges: [TopicsEdge!]!

  """A list of `Topic` objects."""
  nodes: [Topic!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Topic` you could get from the connection."""
  totalCount: Int!
}

"""A `Topic` edge in the connection."""
type TopicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Topic` at the end of the edge."""
  node: Topic!
}

"""Methods to use when ordering `Topic`."""
enum TopicsOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CONTENT_ASC
  CONTENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_VISIBLE_FOR_ASC
  IS_VISIBLE_FOR_DESC
  LICENSE_ASC
  LICENSE_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""All input for the `transferOrganizationBillingContact` mutation."""
input TransferOrganizationBillingContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `transferOrganizationBillingContact` mutation."""
type TransferOrganizationBillingContactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `transferOrganizationOwnership` mutation."""
input TransferOrganizationOwnershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `transferOrganizationOwnership` mutation."""
type TransferOrganizationOwnershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `updateFileByNodeId` mutation."""
input UpdateFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `File` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `File` being updated.
  """
  patch: FilePatch!
}

"""All input for the `updateFile` mutation."""
input UpdateFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `File` being updated.
  """
  patch: FilePatch!
}

"""The output of our update `File` mutation."""
type UpdateFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `User` that is related to this `File`."""
  contributor: User

  """The `File` that was updated by this mutation."""
  file: File

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateOrganizationByNodeId` mutation."""
input UpdateOrganizationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""All input for the `updateOrganizationBySlug` mutation."""
input UpdateOrganizationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
  slug: String!
}

"""All input for the `updateOrganization` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePdfFileByNodeId` mutation."""
input UpdatePdfFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PdfFile` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PdfFile` being updated.
  """
  patch: PdfFilePatch!
}

"""All input for the `updatePdfFile` mutation."""
input UpdatePdfFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `PdfFile` being updated.
  """
  patch: PdfFilePatch!
}

"""The output of our update `PdfFile` mutation."""
type UpdatePdfFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `File` that is related to this `PdfFile`."""
  file: File

  """The `PdfFile` that was updated by this mutation."""
  pdfFile: PdfFile

  """An edge for our `PdfFile`. May be used by Relay 1."""
  pdfFileEdge(
    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PdfFilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `File` that is related to this `PdfFile`."""
  thumbnail: File
}

"""All input for the `updateRoomByNodeId` mutation."""
input UpdateRoomByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Room` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Room` being updated.
  """
  patch: RoomPatch!
}

"""All input for the `updateRoom` mutation."""
input UpdateRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Room` being updated.
  """
  patch: RoomPatch!
}

"""All input for the `updateRoomItemByNodeId` mutation."""
input UpdateRoomItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RoomItem` being updated.
  """
  patch: RoomItemPatch!
}

"""All input for the `updateRoomItem` mutation."""
input UpdateRoomItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `RoomItem` being updated.
  """
  patch: RoomItemPatch!
}

"""The output of our update `RoomItem` mutation."""
type UpdateRoomItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `User` that is related to this `RoomItem`."""
  contributor: User

  """Room items can be related in trees."""
  parent: RoomItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Room` that is related to this `RoomItem`."""
  room: Room

  """The `RoomItem` that was updated by this mutation."""
  roomItem: RoomItem

  """An edge for our `RoomItem`. May be used by Relay 1."""
  roomItemEdge(
    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomItemsEdge

  """Reads a single `Topic` that is related to this `RoomItem`."""
  topic: Topic
}

"""All input for the `updateRoomMessageByNodeId` mutation."""
input UpdateRoomMessageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomMessage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RoomMessage` being updated.
  """
  patch: RoomMessagePatch!
}

"""All input for the `updateRoomMessage` mutation."""
input UpdateRoomMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `RoomMessage` being updated.
  """
  patch: RoomMessagePatch!
}

"""The output of our update `RoomMessage` mutation."""
type UpdateRoomMessagePayload {
  """Reads a single `RoomMessage` that is related to this `RoomMessage`."""
  answeredMessage: RoomMessage

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Room` that is related to this `RoomMessage`."""
  room: Room

  """The `RoomMessage` that was updated by this mutation."""
  roomMessage: RoomMessage

  """An edge for our `RoomMessage`. May be used by Relay 1."""
  roomMessageEdge(
    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomMessagesEdge

  """Reads a single `User` that is related to this `RoomMessage`."""
  sender: User
}

"""The output of our update `Room` mutation."""
type UpdateRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Each room can optionally belong to an organization."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Room` that was updated by this mutation."""
  room: Room

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomsEdge
}

"""All input for the `updateRoomSubscriptionByNodeId` mutation."""
input UpdateRoomSubscriptionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomSubscription` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RoomSubscription` being updated.
  """
  patch: RoomSubscriptionPatch!
}

"""
All input for the `updateRoomSubscriptionBySubscriberIdAndRoomId` mutation.
"""
input UpdateRoomSubscriptionBySubscriberIdAndRoomIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RoomSubscription` being updated.
  """
  patch: RoomSubscriptionPatch!
  roomId: UUID!

  """The subscribing user."""
  subscriberId: UUID!
}

"""All input for the `updateRoomSubscription` mutation."""
input UpdateRoomSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `RoomSubscription` being updated.
  """
  patch: RoomSubscriptionPatch!
}

"""The output of our update `RoomSubscription` mutation."""
type UpdateRoomSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Room` that is related to this `RoomSubscription`."""
  room: Room

  """The `RoomSubscription` that was updated by this mutation."""
  roomSubscription: RoomSubscription

  """An edge for our `RoomSubscription`. May be used by Relay 1."""
  roomSubscriptionEdge(
    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsEdge

  """Reads a single `User` that is related to this `RoomSubscription`."""
  subscriber: User
}

"""All input for the `updateTopicByNodeId` mutation."""
input UpdateTopicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""All input for the `updateTopicBySlugAndOrganizationId` mutation."""
input UpdateTopicBySlugAndOrganizationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String!
}

"""All input for the `updateTopic` mutation."""
input UpdateTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""The output of our update `Topic` mutation."""
type UpdateTopicPayload {
  """
  Each topic has an author. The field might be null when the original author has unregistered from the application.
  """
  author: User

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Organization` that is related to this `Topic`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Topic` that was updated by this mutation."""
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A user who can log in to the application."""
type User implements Node {
  """Reads and enables pagination through a set of `Topic`."""
  authoredTopics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TopicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsConnection!

  """Optional avatar URL."""
  avatarUrl: String
  createdAt: Datetime!

  """
  Users can be notified about activities in the rooms they have subscribed to. This is the default setting. You can change it for each room.
  """
  defaultHandlingOfNotifications: NotificationSetting!

  """Reads and enables pagination through a set of `File`."""
  filesByContributorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesConnection!
  hasPassword: Boolean

  """Unique identifier for the user."""
  id: UUID!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  isVerified: Boolean!

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection!

  """Reads and enables pagination through a set of `RoomItem`."""
  roomItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomItem`."""
    orderBy: [RoomItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomItemsConnection!

  """Reads and enables pagination through a set of `RoomMessage`."""
  roomMessagesBySenderId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomMessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomMessageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomMessage`."""
    orderBy: [RoomMessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomMessagesConnection!

  """Reads and enables pagination through a set of `RoomSubscription`."""
  roomSubscriptionsBySubscriberId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomSubscriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoomSubscriptionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsConnection!

  """
  If there are any delayed notifications, they are sent at this time every day.
  """
  sendingTimeForDeferredNotifications: Time!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthentications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAuthenticationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsConnection!

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserEmailFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsConnection!

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication implements Node {
  createdAt: Datetime!

  """Additional profile details extracted from this login method"""
  details: JSON!
  id: UUID!

  """A unique identifier for the user within the login service."""
  identifier: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserAuthentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserAuthenticationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `details` field."""
  details: JSON

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `identifier` field."""
  identifier: String

  """Checks for equality with the object’s `service` field."""
  service: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `UserAuthentication` object types. All fields are combined with a logical ‘and.’
"""
input UserAuthenticationFilter {
  """Checks for all expressions in this list."""
  and: [UserAuthenticationFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `details` field."""
  details: JSONFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `identifier` field."""
  identifier: StringFilter

  """Negates the expression."""
  not: UserAuthenticationFilter

  """Checks for any expressions in this list."""
  or: [UserAuthenticationFilter!]

  """Filter by the object’s `service` field."""
  service: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""A connection to a list of `UserAuthentication` values."""
type UserAuthenticationsConnection {
  """
  A list of edges which contains the `UserAuthentication` and cursor to aid in pagination.
  """
  edges: [UserAuthenticationsEdge!]!

  """A list of `UserAuthentication` objects."""
  nodes: [UserAuthentication!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserAuthentication` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UserAuthentication` edge in the connection."""
type UserAuthenticationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserAuthentication` at the end of the edge."""
  node: UserAuthentication!
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DETAILS_ASC
  DETAILS_DESC
  IDENTIFIER_ASC
  IDENTIFIER_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ASC
  SERVICE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """
  Checks for equality with the object’s `defaultHandlingOfNotifications` field.
  """
  defaultHandlingOfNotifications: NotificationSetting

  """Checks for equality with the object’s `hasPassword` field."""
  hasPassword: Boolean

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isAdmin` field."""
  isAdmin: Boolean

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """
  Checks for equality with the object’s `sendingTimeForDeferredNotifications` field.
  """
  sendingTimeForDeferredNotifications: Time

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""Information about a user's email address."""
type UserEmail implements Node {
  createdAt: Datetime!

  """The users email address, in `a@b.c` format."""
  email: String!
  id: UUID!
  isPrimary: Boolean!

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `UserEmail` object types. All fields are combined with a logical ‘and.’
"""
input UserEmailFilter {
  """Checks for all expressions in this list."""
  and: [UserEmailFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isPrimary` field."""
  isPrimary: BooleanFilter

  """Filter by the object’s `isVerified` field."""
  isVerified: BooleanFilter

  """Negates the expression."""
  not: UserEmailFilter

  """Checks for any expressions in this list."""
  or: [UserEmailFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
  """The users email address, in `a@b.c` format."""
  email: String!
}

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge!]!

  """A list of `UserEmail` objects."""
  nodes: [UserEmail!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEmail` you could get from the connection."""
  totalCount: Int!
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmail` at the end of the edge."""
  node: UserEmail!
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Filter by the object’s `authoredTopics` relation."""
  authoredTopics: UserToManyTopicFilter

  """Some related `authoredTopics` exist."""
  authoredTopicsExist: Boolean

  """Filter by the object’s `avatarUrl` field."""
  avatarUrl: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `defaultHandlingOfNotifications` field."""
  defaultHandlingOfNotifications: NotificationSettingFilter

  """Filter by the object’s `filesByContributorId` relation."""
  filesByContributorId: UserToManyFileFilter

  """Some related `filesByContributorId` exist."""
  filesByContributorIdExist: Boolean

  """Filter by the object’s `hasPassword` field."""
  hasPassword: BooleanFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isAdmin` field."""
  isAdmin: BooleanFilter

  """Filter by the object’s `isVerified` field."""
  isVerified: BooleanFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: UserFilter

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Filter by the object’s `organizationMemberships` relation."""
  organizationMemberships: UserToManyOrganizationMembershipFilter

  """Some related `organizationMemberships` exist."""
  organizationMembershipsExist: Boolean

  """Filter by the object’s `roomItems` relation."""
  roomItems: UserToManyRoomItemFilter

  """Some related `roomItems` exist."""
  roomItemsExist: Boolean

  """Filter by the object’s `roomMessagesBySenderId` relation."""
  roomMessagesBySenderId: UserToManyRoomMessageFilter

  """Some related `roomMessagesBySenderId` exist."""
  roomMessagesBySenderIdExist: Boolean

  """Filter by the object’s `roomSubscriptionsBySubscriberId` relation."""
  roomSubscriptionsBySubscriberId: UserToManyRoomSubscriptionFilter

  """Some related `roomSubscriptionsBySubscriberId` exist."""
  roomSubscriptionsBySubscriberIdExist: Boolean

  """Filter by the object’s `sendingTimeForDeferredNotifications` field."""
  sendingTimeForDeferredNotifications: TimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `userAuthentications` relation."""
  userAuthentications: UserToManyUserAuthenticationFilter

  """Some related `userAuthentications` exist."""
  userAuthenticationsExist: Boolean

  """Filter by the object’s `userEmails` relation."""
  userEmails: UserToManyUserEmailFilter

  """Some related `userEmails` exist."""
  userEmailsExist: Boolean

  """Filter by the object’s `username` field."""
  username: StringFilter
}

"""An input for mutations affecting `User`"""
input UserInput {
  """
  Users can be notified about activities in the rooms they have subscribed to. This is the default setting. You can change it for each room.
  """
  defaultHandlingOfNotifications: NotificationSetting

  """
  If there are any delayed notifications, they are sent at this time every day.
  """
  sendingTimeForDeferredNotifications: Time
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Optional avatar URL."""
  avatarUrl: String

  """
  Users can be notified about activities in the rooms they have subscribed to. This is the default setting. You can change it for each room.
  """
  defaultHandlingOfNotifications: NotificationSetting

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """
  If there are any delayed notifications, they are sent at this time every day.
  """
  sendingTimeForDeferredNotifications: Time

  """Public-facing username (or 'handle') of the user."""
  username: String
}

"""
A filter to be used against many `File` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyFileFilter {
  """
  Every related `File` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FileFilter

  """
  No related `File` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FileFilter

  """
  Some related `File` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FileFilter
}

"""
A filter to be used against many `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyOrganizationMembershipFilter {
  """
  Every related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OrganizationMembershipFilter

  """
  No related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OrganizationMembershipFilter

  """
  Some related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OrganizationMembershipFilter
}

"""
A filter to be used against many `RoomItem` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyRoomItemFilter {
  """
  Every related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomItemFilter

  """
  No related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomItemFilter

  """
  Some related `RoomItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomItemFilter
}

"""
A filter to be used against many `RoomMessage` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyRoomMessageFilter {
  """
  Every related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomMessageFilter

  """
  No related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomMessageFilter

  """
  Some related `RoomMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomMessageFilter
}

"""
A filter to be used against many `RoomSubscription` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyRoomSubscriptionFilter {
  """
  Every related `RoomSubscription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoomSubscriptionFilter

  """
  No related `RoomSubscription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoomSubscriptionFilter

  """
  Some related `RoomSubscription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoomSubscriptionFilter
}

"""
A filter to be used against many `Topic` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyTopicFilter {
  """
  Every related `Topic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TopicFilter

  """
  No related `Topic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TopicFilter

  """
  Some related `Topic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TopicFilter
}

"""
A filter to be used against many `UserAuthentication` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserAuthenticationFilter {
  """
  Every related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserAuthenticationFilter

  """
  No related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserAuthenticationFilter

  """
  Some related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserAuthenticationFilter
}

"""
A filter to be used against many `UserEmail` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserEmailFilter {
  """
  Every related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserEmailFilter

  """
  No related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserEmailFilter

  """
  Some related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserEmailFilter
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DEFAULT_HANDLING_OF_NOTIFICATIONS_ASC
  DEFAULT_HANDLING_OF_NOTIFICATIONS_DESC
  ID_ASC
  ID_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SENDING_TIME_FOR_DEFERRED_NOTIFICATIONS_ASC
  SENDING_TIME_FOR_DEFERRED_NOTIFICATIONS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
}

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
  userEmailId: UUID!
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
