"""All input for the `acceptInvitationToOrganization` mutation."""
input AcceptInvitationToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  code: String
  invitationId: UUID
}

"""The output of our `acceptInvitationToOrganization` mutation."""
type AcceptInvitationToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  oldPassword: String!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `confirmAccountDeletion` mutation."""
input ConfirmAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
}

"""The output of our `confirmAccountDeletion` mutation."""
type ConfirmAccountDeletionPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Organization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Organization` to be created by this mutation."""
  organization: OrganizationInput!
}

"""All input for the create `OrganizationInvitation` mutation."""
input CreateOrganizationInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OrganizationInvitation` to be created by this mutation."""
  organizationInvitation: OrganizationInvitationInput!
}

"""The output of our create `OrganizationInvitation` mutation."""
type CreateOrganizationInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organization` that is related to this `OrganizationInvitation`.
  """
  organization: Organization

  """The `OrganizationInvitation` that was created by this mutation."""
  organizationInvitation: OrganizationInvitation

  """An edge for our `OrganizationInvitation`. May be used by Relay 1."""
  organizationInvitationEdge(
    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `OrganizationInvitation`.
  """
  user: User
}

"""All input for the create `OrganizationMembership` mutation."""
input CreateOrganizationMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OrganizationMembership` to be created by this mutation."""
  organizationMembership: OrganizationMembershipInput!
}

"""The output of our create `OrganizationMembership` mutation."""
type CreateOrganizationMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization

  """The `OrganizationMembership` that was created by this mutation."""
  organizationMembership: OrganizationMembership

  """An edge for our `OrganizationMembership`. May be used by Relay 1."""
  organizationMembershipEdge(
    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
}

"""The output of our create `Organization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was created by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Room` mutation."""
input CreateRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Room` to be created by this mutation."""
  room: RoomInput!
}

"""The output of our create `Room` mutation."""
type CreateRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Each room can optionally belong to an organization."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Room` that was created by this mutation."""
  room: Room

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomsEdge
}

"""All input for the create `RoomSubscription` mutation."""
input CreateRoomSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RoomSubscription` to be created by this mutation."""
  roomSubscription: RoomSubscriptionInput!
}

"""The output of our create `RoomSubscription` mutation."""
type CreateRoomSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Room` that is related to this `RoomSubscription`."""
  room: Room

  """The `RoomSubscription` that was created by this mutation."""
  roomSubscription: RoomSubscription

  """An edge for our `RoomSubscription`. May be used by Relay 1."""
  roomSubscriptionEdge(
    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsEdge

  """Reads a single `User` that is related to this `RoomSubscription`."""
  subscriber: User
}

"""All input for the create `Topic` mutation."""
input CreateTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Topic` to be created by this mutation."""
  topic: TopicInput!
}

"""The output of our create `Topic` mutation."""
type CreateTopicPayload {
  """Reads a single `User` that is related to this `Topic`."""
  author: User

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Organization` that is related to this `Topic`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Topic` that was created by this mutation."""
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the create `UserAuthentication` mutation."""
input CreateUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserAuthentication` to be created by this mutation."""
  userAuthentication: UserAuthenticationInput!
}

"""The output of our create `UserAuthentication` mutation."""
type CreateUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was created by this mutation."""
  userAuthentication: UserAuthentication

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be created by this mutation."""
  userEmail: UserEmailInput!
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was created by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A connection to a list of `UUID` values."""
type CurrentUserInvitedOrganizationIdsConnection {
  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserInvitedOrganizationIdsEdge]!

  """A list of `UUID` objects."""
  nodes: [UUID]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type CurrentUserInvitedOrganizationIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `UUID` values."""
type CurrentUserMemberOrganizationIdsConnection {
  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserMemberOrganizationIdsEdge]!

  """A list of `UUID` objects."""
  nodes: [UUID]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type CurrentUserMemberOrganizationIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

"""All input for the `deleteOrganizationByNodeId` mutation."""
input DeleteOrganizationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOrganizationBySlug` mutation."""
input DeleteOrganizationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String!
}

"""All input for the `deleteOrganization` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteOrganizationInvitationByNodeId` mutation."""
input DeleteOrganizationInvitationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganizationInvitation` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteOrganizationInvitationByOrganizationIdAndEmail` mutation.
"""
input DeleteOrganizationInvitationByOrganizationIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  organizationId: UUID!
}

"""
All input for the `deleteOrganizationInvitationByOrganizationIdAndUserId` mutation.
"""
input DeleteOrganizationInvitationByOrganizationIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""All input for the `deleteOrganizationInvitation` mutation."""
input DeleteOrganizationInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `OrganizationInvitation` mutation."""
type DeleteOrganizationInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationInvitationNodeId: ID

  """
  Reads a single `Organization` that is related to this `OrganizationInvitation`.
  """
  organization: Organization

  """The `OrganizationInvitation` that was deleted by this mutation."""
  organizationInvitation: OrganizationInvitation

  """An edge for our `OrganizationInvitation`. May be used by Relay 1."""
  organizationInvitationEdge(
    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `OrganizationInvitation`.
  """
  user: User
}

"""All input for the `deleteOrganizationMembershipByNodeId` mutation."""
input DeleteOrganizationMembershipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganizationMembership` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteOrganizationMembershipByOrganizationIdAndUserId` mutation.
"""
input DeleteOrganizationMembershipByOrganizationIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""All input for the `deleteOrganizationMembership` mutation."""
input DeleteOrganizationMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `OrganizationMembership` mutation."""
type DeleteOrganizationMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationMembershipNodeId: ID

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization

  """The `OrganizationMembership` that was deleted by this mutation."""
  organizationMembership: OrganizationMembership

  """An edge for our `OrganizationMembership`. May be used by Relay 1."""
  organizationMembershipEdge(
    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
}

"""The output of our delete `Organization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationNodeId: ID

  """The `Organization` that was deleted by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteRoomByNodeId` mutation."""
input DeleteRoomByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Room` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRoom` mutation."""
input DeleteRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Room` mutation."""
type DeleteRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRoomNodeId: ID

  """Each room can optionally belong to an organization."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Room` that was deleted by this mutation."""
  room: Room

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomsEdge
}

"""All input for the `deleteRoomSubscriptionByNodeId` mutation."""
input DeleteRoomSubscriptionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomSubscription` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteRoomSubscriptionBySubscriberIdAndRoomId` mutation.
"""
input DeleteRoomSubscriptionBySubscriberIdAndRoomIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  roomId: UUID!

  """The subscribing user."""
  subscriberId: UUID!
}

"""All input for the `deleteRoomSubscription` mutation."""
input DeleteRoomSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `RoomSubscription` mutation."""
type DeleteRoomSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRoomSubscriptionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Room` that is related to this `RoomSubscription`."""
  room: Room

  """The `RoomSubscription` that was deleted by this mutation."""
  roomSubscription: RoomSubscription

  """An edge for our `RoomSubscription`. May be used by Relay 1."""
  roomSubscriptionEdge(
    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsEdge

  """Reads a single `User` that is related to this `RoomSubscription`."""
  subscriber: User
}

"""All input for the `deleteTopicByNodeId` mutation."""
input DeleteTopicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTopicBySlug` mutation."""
input DeleteTopicBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String!
}

"""All input for the `deleteTopic` mutation."""
input DeleteTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Topic` mutation."""
type DeleteTopicPayload {
  """Reads a single `User` that is related to this `Topic`."""
  author: User

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTopicNodeId: ID

  """Reads a single `Organization` that is related to this `Topic`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Topic` that was deleted by this mutation."""
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the `deleteUserAuthenticationByNodeId` mutation."""
input DeleteUserAuthenticationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthentication` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteUserAuthenticationByServiceAndIdentifier` mutation.
"""
input DeleteUserAuthenticationByServiceAndIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """A unique identifier for the user within the login service."""
  identifier: String!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
}

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserAuthenticationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was deleted by this mutation."""
  userAuthentication: UserAuthentication

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserByUsername` mutation."""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""All input for the `deleteUserEmailByNodeId` mutation."""
input DeleteUserEmailByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmail` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserEmailByUserIdAndEmail` mutation."""
input DeleteUserEmailByUserIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The users email address, in `a@b.c` format."""
  email: String!
  userId: UUID!
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserEmailNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was deleted by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was deleted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
type Interval {
  """A quantity of days."""
  days: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of minutes."""
  minutes: Int

  """A quantity of months."""
  months: Int

  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of years."""
  years: Int
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
input IntervalInput {
  """A quantity of days."""
  days: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of minutes."""
  minutes: Int

  """A quantity of months."""
  months: Int

  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of years."""
  years: Int
}

"""All input for the `inviteToOrganization` mutation."""
input InviteToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  organizationId: UUID
  username: String
}

"""The output of our `inviteToOrganization` mutation."""
type InviteToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  password: String!
  username: String!
}

type LoginPayload {
  user: User!
}

type LogoutPayload {
  success: Boolean
}

"""All input for the `makeEmailPrimary` mutation."""
input MakeEmailPrimaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `makeEmailPrimary` mutation."""
type MakeEmailPrimaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  acceptInvitationToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AcceptInvitationToOrganizationInput!
  ): AcceptInvitationToOrganizationPayload

  """Enter your old password and a new password to change your password."""
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload

  """
  If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion.
  """
  confirmAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmAccountDeletionInput!
  ): ConfirmAccountDeletionPayload

  """Creates a single `Organization`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single `OrganizationInvitation`."""
  createOrganizationInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInvitationInput!
  ): CreateOrganizationInvitationPayload

  """Creates a single `OrganizationMembership`."""
  createOrganizationMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationMembershipInput!
  ): CreateOrganizationMembershipPayload

  """Creates a single `Room`."""
  createRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomInput!
  ): CreateRoomPayload

  """Creates a single `RoomSubscription`."""
  createRoomSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomSubscriptionInput!
  ): CreateRoomSubscriptionPayload

  """Creates a single `Topic`."""
  createTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTopicInput!
  ): CreateTopicPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UserAuthentication`."""
  createUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserAuthenticationInput!
  ): CreateUserAuthenticationPayload

  """Creates a single `UserEmail`."""
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Organization` using its globally unique id."""
  deleteOrganizationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByNodeIdInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganizationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationBySlugInput!
  ): DeleteOrganizationPayload

  """Deletes a single `OrganizationInvitation` using a unique key."""
  deleteOrganizationInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInvitationInput!
  ): DeleteOrganizationInvitationPayload

  """
  Deletes a single `OrganizationInvitation` using its globally unique id.
  """
  deleteOrganizationInvitationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInvitationByNodeIdInput!
  ): DeleteOrganizationInvitationPayload

  """Deletes a single `OrganizationInvitation` using a unique key."""
  deleteOrganizationInvitationByOrganizationIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInvitationByOrganizationIdAndEmailInput!
  ): DeleteOrganizationInvitationPayload

  """Deletes a single `OrganizationInvitation` using a unique key."""
  deleteOrganizationInvitationByOrganizationIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInvitationByOrganizationIdAndUserIdInput!
  ): DeleteOrganizationInvitationPayload

  """Deletes a single `OrganizationMembership` using a unique key."""
  deleteOrganizationMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationMembershipInput!
  ): DeleteOrganizationMembershipPayload

  """
  Deletes a single `OrganizationMembership` using its globally unique id.
  """
  deleteOrganizationMembershipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationMembershipByNodeIdInput!
  ): DeleteOrganizationMembershipPayload

  """Deletes a single `OrganizationMembership` using a unique key."""
  deleteOrganizationMembershipByOrganizationIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationMembershipByOrganizationIdAndUserIdInput!
  ): DeleteOrganizationMembershipPayload

  """Deletes a single `Room` using a unique key."""
  deleteRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomInput!
  ): DeleteRoomPayload

  """Deletes a single `Room` using its globally unique id."""
  deleteRoomByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomByNodeIdInput!
  ): DeleteRoomPayload

  """Deletes a single `RoomSubscription` using a unique key."""
  deleteRoomSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomSubscriptionInput!
  ): DeleteRoomSubscriptionPayload

  """Deletes a single `RoomSubscription` using its globally unique id."""
  deleteRoomSubscriptionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomSubscriptionByNodeIdInput!
  ): DeleteRoomSubscriptionPayload

  """Deletes a single `RoomSubscription` using a unique key."""
  deleteRoomSubscriptionBySubscriberIdAndRoomId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomSubscriptionBySubscriberIdAndRoomIdInput!
  ): DeleteRoomSubscriptionPayload

  """Deletes a single `Topic` using a unique key."""
  deleteTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicInput!
  ): DeleteTopicPayload

  """Deletes a single `Topic` using its globally unique id."""
  deleteTopicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicByNodeIdInput!
  ): DeleteTopicPayload

  """Deletes a single `Topic` using a unique key."""
  deleteTopicBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicBySlugInput!
  ): DeleteTopicPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using its globally unique id."""
  deleteUserAuthenticationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByNodeIdInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthenticationByServiceAndIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByServiceAndIdentifierInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using its globally unique id."""
  deleteUserEmailByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByNodeIdInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmailByUserIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByUserIdAndEmailInput!
  ): DeleteUserEmailPayload

  """
  If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address!
  """
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload
  inviteToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InviteToOrganizationInput!
  ): InviteToOrganizationPayload

  """
  Use this mutation to log in to your account; this login uses sessions so you do not need to take further action.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload

  """
  Your primary email is where we'll notify of account events; other emails may be used for discovery or login. Use this when you're changing your email address.
  """
  makeEmailPrimary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeEmailPrimaryInput!
  ): MakeEmailPrimaryPayload

  """
  Use this mutation to create an account on our system. This may only be used if you are logged out.
  """
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload
  removeFromOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveFromOrganizationInput!
  ): RemoveFromOrganizationPayload

  """Begin the account deletion flow by requesting the confirmation email"""
  requestAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RequestAccountDeletionInput!
  ): RequestAccountDeletionPayload

  """
  If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently.
  """
  resendEmailVerificationCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResendEmailVerificationCodeInput!
  ): ResendEmailVerificationCodePayload

  """
  After triggering forgotPassword, you'll be sent a reset token. Combine this with your user ID and a new password to reset your password.
  """
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload
  transferOrganizationBillingContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationBillingContactInput!
  ): TransferOrganizationBillingContactPayload
  transferOrganizationOwnership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationOwnershipInput!
  ): TransferOrganizationOwnershipPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """
  Updates a single `Organization` using its globally unique id and a patch.
  """
  updateOrganizationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByNodeIdInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganizationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationBySlugInput!
  ): UpdateOrganizationPayload

  """
  Updates a single `OrganizationInvitation` using a unique key and a patch.
  """
  updateOrganizationInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInvitationInput!
  ): UpdateOrganizationInvitationPayload

  """
  Updates a single `OrganizationInvitation` using its globally unique id and a patch.
  """
  updateOrganizationInvitationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInvitationByNodeIdInput!
  ): UpdateOrganizationInvitationPayload

  """
  Updates a single `OrganizationInvitation` using a unique key and a patch.
  """
  updateOrganizationInvitationByOrganizationIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInvitationByOrganizationIdAndEmailInput!
  ): UpdateOrganizationInvitationPayload

  """
  Updates a single `OrganizationInvitation` using a unique key and a patch.
  """
  updateOrganizationInvitationByOrganizationIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInvitationByOrganizationIdAndUserIdInput!
  ): UpdateOrganizationInvitationPayload

  """
  Updates a single `OrganizationMembership` using a unique key and a patch.
  """
  updateOrganizationMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationMembershipInput!
  ): UpdateOrganizationMembershipPayload

  """
  Updates a single `OrganizationMembership` using its globally unique id and a patch.
  """
  updateOrganizationMembershipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationMembershipByNodeIdInput!
  ): UpdateOrganizationMembershipPayload

  """
  Updates a single `OrganizationMembership` using a unique key and a patch.
  """
  updateOrganizationMembershipByOrganizationIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationMembershipByOrganizationIdAndUserIdInput!
  ): UpdateOrganizationMembershipPayload

  """Updates a single `Room` using a unique key and a patch."""
  updateRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomInput!
  ): UpdateRoomPayload

  """Updates a single `Room` using its globally unique id and a patch."""
  updateRoomByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomByNodeIdInput!
  ): UpdateRoomPayload

  """Updates a single `RoomSubscription` using a unique key and a patch."""
  updateRoomSubscription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomSubscriptionInput!
  ): UpdateRoomSubscriptionPayload

  """
  Updates a single `RoomSubscription` using its globally unique id and a patch.
  """
  updateRoomSubscriptionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomSubscriptionByNodeIdInput!
  ): UpdateRoomSubscriptionPayload

  """Updates a single `RoomSubscription` using a unique key and a patch."""
  updateRoomSubscriptionBySubscriberIdAndRoomId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomSubscriptionBySubscriberIdAndRoomIdInput!
  ): UpdateRoomSubscriptionPayload

  """Updates a single `Topic` using a unique key and a patch."""
  updateTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicInput!
  ): UpdateTopicPayload

  """Updates a single `Topic` using its globally unique id and a patch."""
  updateTopicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicByNodeIdInput!
  ): UpdateTopicPayload

  """Updates a single `Topic` using a unique key and a patch."""
  updateTopicBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicBySlugInput!
  ): UpdateTopicPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `UserAuthentication` using a unique key and a patch."""
  updateUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationInput!
  ): UpdateUserAuthenticationPayload

  """
  Updates a single `UserAuthentication` using its globally unique id and a patch.
  """
  updateUserAuthenticationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationByNodeIdInput!
  ): UpdateUserAuthenticationPayload

  """Updates a single `UserAuthentication` using a unique key and a patch."""
  updateUserAuthenticationByServiceAndIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationByServiceAndIdentifierInput!
  ): UpdateUserAuthenticationPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """Updates a single `UserEmail` using a unique key and a patch."""
  updateUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEmailInput!
  ): UpdateUserEmailPayload

  """Updates a single `UserEmail` using its globally unique id and a patch."""
  updateUserEmailByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEmailByNodeIdInput!
  ): UpdateUserEmailPayload

  """Updates a single `UserEmail` using a unique key and a patch."""
  updateUserEmailByUserIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserEmailByUserIdAndEmailInput!
  ): UpdateUserEmailPayload

  """
  Once you have received a verification token for your email, you may call this mutation with that token to make your email verified.
  """
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload
}

"""A connection to a list of `UUID` values."""
type MySubscribedRoomIdsConnection {
  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [MySubscribedRoomIdsEdge]!

  """A list of `UUID` objects."""
  nodes: [UUID]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type MySubscribedRoomIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

enum NotificationSetting {
  DEFAULT
  DEFERRED
  IMMEDIATE
  SILENCED
}

type Organization implements Node {
  createdAt: Datetime!
  currentUserIsBillingContact: Boolean
  currentUserIsOwner: Boolean
  id: UUID!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads and enables pagination through a set of `OrganizationInvitation`.
  """
  organizationInvitations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationInvitationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsConnection!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection!

  """Reads and enables pagination through a set of `Room`."""
  rooms(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomsConnection!
  slug: String!

  """Reads and enables pagination through a set of `Topic`."""
  topics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsConnection!
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

"""An input for mutations affecting `Organization`"""
input OrganizationInput {
  createdAt: Datetime
  id: UUID
  name: String!
  slug: String!
}

type OrganizationInvitation implements Node {
  code: String
  email: String
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `Organization` that is related to this `OrganizationInvitation`.
  """
  organization: Organization
  organizationId: UUID!

  """
  Reads a single `User` that is related to this `OrganizationInvitation`.
  """
  user: User
  userId: UUID
}

"""
A condition to be used against `OrganizationInvitation` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OrganizationInvitationCondition {
  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `OrganizationInvitation`"""
input OrganizationInvitationInput {
  code: String
  email: String
  id: UUID
  organizationId: UUID!
  userId: UUID
}

"""
Represents an update to a `OrganizationInvitation`. Fields that are set will be updated.
"""
input OrganizationInvitationPatch {
  code: String
  email: String
  id: UUID
  organizationId: UUID
  userId: UUID
}

"""A connection to a list of `OrganizationInvitation` values."""
type OrganizationInvitationsConnection {
  """
  A list of edges which contains the `OrganizationInvitation` and cursor to aid in pagination.
  """
  edges: [OrganizationInvitationsEdge]!

  """A list of `OrganizationInvitation` objects."""
  nodes: [OrganizationInvitation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationInvitation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrganizationInvitation` edge in the connection."""
type OrganizationInvitationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationInvitation` at the end of the edge."""
  node: OrganizationInvitation
}

"""Methods to use when ordering `OrganizationInvitation`."""
enum OrganizationInvitationsOrderBy {
  CODE_ASC
  CODE_DESC
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type OrganizationMembership implements Node {
  createdAt: Datetime!
  id: UUID!
  isBillingContact: Boolean!
  isOwner: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization
  organizationId: UUID!

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
  userId: UUID!
}

"""
A condition to be used against `OrganizationMembership` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OrganizationMembershipCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isBillingContact` field."""
  isBillingContact: Boolean

  """Checks for equality with the object’s `isOwner` field."""
  isOwner: Boolean

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `OrganizationMembership`"""
input OrganizationMembershipInput {
  createdAt: Datetime
  id: UUID
  isBillingContact: Boolean
  isOwner: Boolean
  organizationId: UUID!
  userId: UUID!
}

"""
Represents an update to a `OrganizationMembership`. Fields that are set will be updated.
"""
input OrganizationMembershipPatch {
  createdAt: Datetime
  id: UUID
  isBillingContact: Boolean
  isOwner: Boolean
  organizationId: UUID
  userId: UUID
}

"""A connection to a list of `OrganizationMembership` values."""
type OrganizationMembershipsConnection {
  """
  A list of edges which contains the `OrganizationMembership` and cursor to aid in pagination.
  """
  edges: [OrganizationMembershipsEdge]!

  """A list of `OrganizationMembership` objects."""
  nodes: [OrganizationMembership]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationMembership` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrganizationMembership` edge in the connection."""
type OrganizationMembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationMembership` at the end of the edge."""
  node: OrganizationMembership
}

"""Methods to use when ordering `OrganizationMembership`."""
enum OrganizationMembershipsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_BILLING_CONTACT_ASC
  IS_BILLING_CONTACT_DESC
  IS_OWNER_ASC
  IS_OWNER_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  createdAt: Datetime
  id: UUID
  name: String
  slug: String
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge]!

  """A list of `Organization` objects."""
  nodes: [Organization]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Handy method to get the current session ID."""
  currentSessionId: UUID

  """The currently logged in user (or null if not logged in)."""
  currentUser: User
  currentUserFirstOrganizationId: UUID

  """
  Handy method to get the current user ID for use in RLS policies, etc; in GraphQL, use `currentUser{id}` instead.
  """
  currentUserId: UUID

  """Reads and enables pagination through a set of `Uuid`."""
  currentUserInvitedOrganizationIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserInvitedOrganizationIdsConnection

  """Reads and enables pagination through a set of `Uuid`."""
  currentUserMemberOrganizationIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserMemberOrganizationIdsConnection

  """Reads and enables pagination through a set of `RoomSubscription`."""
  myRoomSubscriptions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int
    minimumRole: RoomRole

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): RoomSubscriptionsConnection

  """Reads and enables pagination through a set of `Uuid`."""
  mySubscribedRoomIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int
    minimumRole: RoomRole

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): MySubscribedRoomIdsConnection

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Get a single `Organization`."""
  organization(id: UUID!): Organization

  """Reads a single `Organization` using its globally unique `ID`."""
  organizationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Organization`.
    """
    nodeId: ID!
  ): Organization

  """Get a single `Organization`."""
  organizationBySlug(slug: String!): Organization
  organizationForInvitation(code: String, invitationId: UUID): Organization

  """Get a single `OrganizationInvitation`."""
  organizationInvitation(id: UUID!): OrganizationInvitation

  """
  Reads a single `OrganizationInvitation` using its globally unique `ID`.
  """
  organizationInvitationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OrganizationInvitation`.
    """
    nodeId: ID!
  ): OrganizationInvitation

  """Get a single `OrganizationInvitation`."""
  organizationInvitationByOrganizationIdAndEmail(email: String!, organizationId: UUID!): OrganizationInvitation

  """Get a single `OrganizationInvitation`."""
  organizationInvitationByOrganizationIdAndUserId(organizationId: UUID!, userId: UUID!): OrganizationInvitation

  """
  Reads and enables pagination through a set of `OrganizationInvitation`.
  """
  organizationInvitations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationInvitationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsConnection

  """Get a single `OrganizationMembership`."""
  organizationMembership(id: UUID!): OrganizationMembership

  """
  Reads a single `OrganizationMembership` using its globally unique `ID`.
  """
  organizationMembershipByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OrganizationMembership`.
    """
    nodeId: ID!
  ): OrganizationMembership

  """Get a single `OrganizationMembership`."""
  organizationMembershipByOrganizationIdAndUserId(organizationId: UUID!, userId: UUID!): OrganizationMembership

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Get a single `Room`."""
  room(id: UUID!): Room

  """Reads a single `Room` using its globally unique `ID`."""
  roomByNodeId(
    """The globally unique `ID` to be used in selecting a single `Room`."""
    nodeId: ID!
  ): Room

  """Get a single `RoomSubscription`."""
  roomSubscription(id: UUID!): RoomSubscription

  """Reads a single `RoomSubscription` using its globally unique `ID`."""
  roomSubscriptionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RoomSubscription`.
    """
    nodeId: ID!
  ): RoomSubscription

  """Get a single `RoomSubscription`."""
  roomSubscriptionBySubscriberIdAndRoomId(roomId: UUID!, subscriberId: UUID!): RoomSubscription

  """Reads and enables pagination through a set of `RoomSubscription`."""
  roomSubscriptions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomSubscriptionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsConnection

  """Reads and enables pagination through a set of `Room`."""
  rooms(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomsConnection

  """Get a single `Topic`."""
  topic(id: UUID!): Topic

  """Reads a single `Topic` using its globally unique `ID`."""
  topicByNodeId(
    """The globally unique `ID` to be used in selecting a single `Topic`."""
    nodeId: ID!
  ): Topic

  """Get a single `Topic`."""
  topicBySlug(slug: String!): Topic

  """Reads and enables pagination through a set of `Topic`."""
  topics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsConnection

  """Get a single `User`."""
  user(id: UUID!): User

  """Get a single `UserAuthentication`."""
  userAuthentication(id: UUID!): UserAuthentication

  """Reads a single `UserAuthentication` using its globally unique `ID`."""
  userAuthenticationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserAuthentication`.
    """
    nodeId: ID!
  ): UserAuthentication

  """Get a single `UserAuthentication`."""
  userAuthenticationByServiceAndIdentifier(identifier: String!, service: String!): UserAuthentication

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthentications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsConnection

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Get a single `User`."""
  userByUsername(username: String!): User

  """Get a single `UserEmail`."""
  userEmail(id: UUID!): UserEmail

  """Reads a single `UserEmail` using its globally unique `ID`."""
  userEmailByNodeId(
    """The globally unique `ID` to be used in selecting a single `UserEmail`."""
    nodeId: ID!
  ): UserEmail

  """Get a single `UserEmail`."""
  userEmailByUserIdAndEmail(email: String!, userId: UUID!): UserEmail

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

input RegisterInput {
  avatarUrl: String
  email: String!
  name: String
  password: String!
  username: String!
}

type RegisterPayload {
  user: User!
}

"""All input for the `removeFromOrganization` mutation."""
input RemoveFromOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID
  userId: UUID
}

"""The output of our `removeFromOrganization` mutation."""
type RemoveFromOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `requestAccountDeletion` mutation."""
input RequestAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `requestAccountDeletion` mutation."""
type RequestAccountDeletionPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resendEmailVerificationCode` mutation."""
input ResendEmailVerificationCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `resendEmailVerificationCode` mutation."""
type ResendEmailVerificationCodePayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  resetToken: String!
  userId: UUID!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""
A room is a place where users meet. At the same time, it is a container for messages and handed-out materials.
"""
type Room implements Node {
  """Each room has an optional abstract."""
  abstract: String
  createdAt: Datetime!
  id: UUID!
  isAnonymousPostingAllowed: Boolean!
  myRoomSubscription: RoomSubscription
  nRoomSubscriptions: BigInt

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Each room can optionally belong to an organization."""
  organization: Organization
  organizationId: UUID

  """Reads and enables pagination through a set of `RoomSubscription`."""
  subscriptions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomSubscriptionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsConnection!

  """Each room has an optional title."""
  title: String
  updatedAt: Datetime!

  """
  Rooms can be visible for their subscribers only (`for_subscribers`), to all members of the room's organisation (`within_organization`), for all currently signed-in users (`if_signed_in`), or general in `public`.
  """
  visibility: RoomVisibility!

  """
  Sometimes you want to hide items of the room from users who join later. `since_subscription` allows subscribers to see items that were added *after* their subscription. Similarly, `since_invitation` allows subscribers to see items that were added *after* they had been invited to the room. `since_specified_date` allows all subscribers to see items after `visibility_of_history_since`. Finally, `public` means that all items are visible for the room's audience, even if public.
  """
  visibilityOfHistory: RoomHistoryVisibility!
  visibilityOfHistoryExtendedBy: Interval!
  visibilityOfHistorySince: Datetime!
}

"""
A condition to be used against `Room` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RoomCondition {
  """Checks for equality with the object’s `abstract` field."""
  abstract: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """
  Checks for equality with the object’s `isAnonymousPostingAllowed` field.
  """
  isAnonymousPostingAllowed: Boolean

  """Checks for equality with the object’s `nRoomSubscriptions` field."""
  nRoomSubscriptions: BigInt

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `visibility` field."""
  visibility: RoomVisibility

  """Checks for equality with the object’s `visibilityOfHistory` field."""
  visibilityOfHistory: RoomHistoryVisibility

  """
  Checks for equality with the object’s `visibilityOfHistoryExtendedBy` field.
  """
  visibilityOfHistoryExtendedBy: IntervalInput

  """
  Checks for equality with the object’s `visibilityOfHistorySince` field.
  """
  visibilityOfHistorySince: Datetime
}

enum RoomHistoryVisibility {
  PUBLIC
  SINCE_INVITATION
  SINCE_SPECIFIED_DATE
  SINCE_SUBSCRIPTION
}

"""An input for mutations affecting `Room`"""
input RoomInput {
  """Each room has an optional abstract."""
  abstract: String
  createdAt: Datetime
  id: UUID
  isAnonymousPostingAllowed: Boolean
  organizationId: UUID

  """Each room has an optional title."""
  title: String
  updatedAt: Datetime

  """
  Rooms can be visible for their subscribers only (`for_subscribers`), to all members of the room's organisation (`within_organization`), for all currently signed-in users (`if_signed_in`), or general in `public`.
  """
  visibility: RoomVisibility

  """
  Sometimes you want to hide items of the room from users who join later. `since_subscription` allows subscribers to see items that were added *after* their subscription. Similarly, `since_invitation` allows subscribers to see items that were added *after* they had been invited to the room. `since_specified_date` allows all subscribers to see items after `visibility_of_history_since`. Finally, `public` means that all items are visible for the room's audience, even if public.
  """
  visibilityOfHistory: RoomHistoryVisibility
  visibilityOfHistoryExtendedBy: IntervalInput
  visibilityOfHistorySince: Datetime
}

"""Represents an update to a `Room`. Fields that are set will be updated."""
input RoomPatch {
  """Each room has an optional abstract."""
  abstract: String
  createdAt: Datetime
  id: UUID
  isAnonymousPostingAllowed: Boolean
  organizationId: UUID

  """Each room has an optional title."""
  title: String
  updatedAt: Datetime

  """
  Rooms can be visible for their subscribers only (`for_subscribers`), to all members of the room's organisation (`within_organization`), for all currently signed-in users (`if_signed_in`), or general in `public`.
  """
  visibility: RoomVisibility

  """
  Sometimes you want to hide items of the room from users who join later. `since_subscription` allows subscribers to see items that were added *after* their subscription. Similarly, `since_invitation` allows subscribers to see items that were added *after* they had been invited to the room. `since_specified_date` allows all subscribers to see items after `visibility_of_history_since`. Finally, `public` means that all items are visible for the room's audience, even if public.
  """
  visibilityOfHistory: RoomHistoryVisibility
  visibilityOfHistoryExtendedBy: IntervalInput
  visibilityOfHistorySince: Datetime
}

enum RoomRole {
  ADMIN
  BANNED
  MEMBER
  MODERATOR
  PROSPECT
}

"""Users can be subscribed to rooms."""
type RoomSubscription implements Node {
  createdAt: Datetime!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  notifications: NotificationSetting!

  """Maintainers can manage subscriptions and delete the room."""
  role: RoomRole!

  """Reads a single `Room` that is related to this `RoomSubscription`."""
  room: Room
  roomId: UUID!

  """Reads a single `User` that is related to this `RoomSubscription`."""
  subscriber: User

  """The subscribing user."""
  subscriberId: UUID!
  updatedAt: Datetime!
}

"""
A condition to be used against `RoomSubscription` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RoomSubscriptionCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `notifications` field."""
  notifications: NotificationSetting

  """Checks for equality with the object’s `role` field."""
  role: RoomRole

  """Checks for equality with the object’s `roomId` field."""
  roomId: UUID

  """Checks for equality with the object’s `subscriberId` field."""
  subscriberId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `RoomSubscription`"""
input RoomSubscriptionInput {
  createdAt: Datetime
  id: UUID
  notifications: NotificationSetting

  """Maintainers can manage subscriptions and delete the room."""
  role: RoomRole
  roomId: UUID!

  """The subscribing user."""
  subscriberId: UUID
  updatedAt: Datetime
}

"""
Represents an update to a `RoomSubscription`. Fields that are set will be updated.
"""
input RoomSubscriptionPatch {
  createdAt: Datetime
  id: UUID
  notifications: NotificationSetting

  """Maintainers can manage subscriptions and delete the room."""
  role: RoomRole
  roomId: UUID

  """The subscribing user."""
  subscriberId: UUID
  updatedAt: Datetime
}

"""A connection to a list of `RoomSubscription` values."""
type RoomSubscriptionsConnection {
  """
  A list of edges which contains the `RoomSubscription` and cursor to aid in pagination.
  """
  edges: [RoomSubscriptionsEdge]!

  """A list of `RoomSubscription` objects."""
  nodes: [RoomSubscription]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RoomSubscription` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RoomSubscription` edge in the connection."""
type RoomSubscriptionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoomSubscription` at the end of the edge."""
  node: RoomSubscription
}

"""Methods to use when ordering `RoomSubscription`."""
enum RoomSubscriptionsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  NOTIFICATIONS_ASC
  NOTIFICATIONS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_ASC
  ROLE_DESC
  ROOM_ID_ASC
  ROOM_ID_DESC
  SUBSCRIBER_ID_ASC
  SUBSCRIBER_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum RoomVisibility {
  FOR_SUBSCRIBERS
  IF_SIGNED_IN
  PUBLIC
  WITHIN_ORGANIZATION
}

"""A connection to a list of `Room` values."""
type RoomsConnection {
  """
  A list of edges which contains the `Room` and cursor to aid in pagination.
  """
  edges: [RoomsEdge]!

  """A list of `Room` objects."""
  nodes: [Room]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Room` you could get from the connection."""
  totalCount: Int!
}

"""A `Room` edge in the connection."""
type RoomsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Room` at the end of the edge."""
  node: Room
}

"""Methods to use when ordering `Room`."""
enum RoomsOrderBy {
  ABSTRACT_ASC
  ABSTRACT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ANONYMOUS_POSTING_ALLOWED_ASC
  IS_ANONYMOUS_POSTING_ALLOWED_DESC
  NATURAL
  N_ROOM_SUBSCRIPTIONS_ASC
  N_ROOM_SUBSCRIPTIONS_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  VISIBILITY_ASC
  VISIBILITY_DESC
  VISIBILITY_OF_HISTORY_ASC
  VISIBILITY_OF_HISTORY_DESC
  VISIBILITY_OF_HISTORY_EXTENDED_BY_ASC
  VISIBILITY_OF_HISTORY_EXTENDED_BY_DESC
  VISIBILITY_OF_HISTORY_SINCE_ASC
  VISIBILITY_OF_HISTORY_SINCE_DESC
}

"""
The exact time of day, does not include the date. May or may not have a timezone offset.
"""
scalar Time

"""
A topic is a short text about something. Most topics should have the scope of a micro learning unit.
"""
type Topic implements Node {
  """Reads a single `User` that is related to this `Topic`."""
  author: User
  authorId: UUID

  """
  The topics contents as JSON. Can be converted to HTML with https://tiptap.dev/api/utilities/html
  """
  content: JSON!
  createdAt: Datetime!
  id: UUID!
  license: String
  meta: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Organization` that is related to this `Topic`."""
  organization: Organization
  organizationId: UUID

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String!
  title: String
  updatedAt: Datetime!
  visibility: TopicVisibility!
}

"""
A condition to be used against `Topic` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TopicCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `content` field."""
  content: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `license` field."""
  license: String

  """Checks for equality with the object’s `meta` field."""
  meta: JSON

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `visibility` field."""
  visibility: TopicVisibility
}

"""An input for mutations affecting `Topic`"""
input TopicInput {
  authorId: UUID

  """
  The topics contents as JSON. Can be converted to HTML with https://tiptap.dev/api/utilities/html
  """
  content: JSON!
  createdAt: Datetime
  id: UUID
  license: String
  meta: JSON
  organizationId: UUID

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String!
  title: String
  updatedAt: Datetime
  visibility: TopicVisibility
}

"""
Represents an update to a `Topic`. Fields that are set will be updated.
"""
input TopicPatch {
  authorId: UUID

  """
  The topics contents as JSON. Can be converted to HTML with https://tiptap.dev/api/utilities/html
  """
  content: JSON
  createdAt: Datetime
  id: UUID
  license: String
  meta: JSON
  organizationId: UUID

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String
  title: String
  updatedAt: Datetime
  visibility: TopicVisibility
}

enum TopicVisibility {
  IF_SIGNED_IN
  PUBLIC
  WITHIN_ORGANIZATION
}

"""A connection to a list of `Topic` values."""
type TopicsConnection {
  """
  A list of edges which contains the `Topic` and cursor to aid in pagination.
  """
  edges: [TopicsEdge]!

  """A list of `Topic` objects."""
  nodes: [Topic]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Topic` you could get from the connection."""
  totalCount: Int!
}

"""A `Topic` edge in the connection."""
type TopicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Topic` at the end of the edge."""
  node: Topic
}

"""Methods to use when ordering `Topic`."""
enum TopicsOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CONTENT_ASC
  CONTENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  LICENSE_ASC
  LICENSE_DESC
  META_ASC
  META_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  VISIBILITY_ASC
  VISIBILITY_DESC
}

"""All input for the `transferOrganizationBillingContact` mutation."""
input TransferOrganizationBillingContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID
  userId: UUID
}

"""The output of our `transferOrganizationBillingContact` mutation."""
type TransferOrganizationBillingContactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `transferOrganizationOwnership` mutation."""
input TransferOrganizationOwnershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID
  userId: UUID
}

"""The output of our `transferOrganizationOwnership` mutation."""
type TransferOrganizationOwnershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateOrganizationByNodeId` mutation."""
input UpdateOrganizationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""All input for the `updateOrganizationBySlug` mutation."""
input UpdateOrganizationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
  slug: String!
}

"""All input for the `updateOrganization` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""All input for the `updateOrganizationInvitationByNodeId` mutation."""
input UpdateOrganizationInvitationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganizationInvitation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OrganizationInvitation` being updated.
  """
  patch: OrganizationInvitationPatch!
}

"""
All input for the `updateOrganizationInvitationByOrganizationIdAndEmail` mutation.
"""
input UpdateOrganizationInvitationByOrganizationIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  organizationId: UUID!

  """
  An object where the defined keys will be set on the `OrganizationInvitation` being updated.
  """
  patch: OrganizationInvitationPatch!
}

"""
All input for the `updateOrganizationInvitationByOrganizationIdAndUserId` mutation.
"""
input UpdateOrganizationInvitationByOrganizationIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!

  """
  An object where the defined keys will be set on the `OrganizationInvitation` being updated.
  """
  patch: OrganizationInvitationPatch!
  userId: UUID!
}

"""All input for the `updateOrganizationInvitation` mutation."""
input UpdateOrganizationInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `OrganizationInvitation` being updated.
  """
  patch: OrganizationInvitationPatch!
}

"""The output of our update `OrganizationInvitation` mutation."""
type UpdateOrganizationInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organization` that is related to this `OrganizationInvitation`.
  """
  organization: Organization

  """The `OrganizationInvitation` that was updated by this mutation."""
  organizationInvitation: OrganizationInvitation

  """An edge for our `OrganizationInvitation`. May be used by Relay 1."""
  organizationInvitationEdge(
    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `OrganizationInvitation`.
  """
  user: User
}

"""All input for the `updateOrganizationMembershipByNodeId` mutation."""
input UpdateOrganizationMembershipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganizationMembership` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OrganizationMembership` being updated.
  """
  patch: OrganizationMembershipPatch!
}

"""
All input for the `updateOrganizationMembershipByOrganizationIdAndUserId` mutation.
"""
input UpdateOrganizationMembershipByOrganizationIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!

  """
  An object where the defined keys will be set on the `OrganizationMembership` being updated.
  """
  patch: OrganizationMembershipPatch!
  userId: UUID!
}

"""All input for the `updateOrganizationMembership` mutation."""
input UpdateOrganizationMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `OrganizationMembership` being updated.
  """
  patch: OrganizationMembershipPatch!
}

"""The output of our update `OrganizationMembership` mutation."""
type UpdateOrganizationMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization

  """The `OrganizationMembership` that was updated by this mutation."""
  organizationMembership: OrganizationMembership

  """An edge for our `OrganizationMembership`. May be used by Relay 1."""
  organizationMembershipEdge(
    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateRoomByNodeId` mutation."""
input UpdateRoomByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Room` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Room` being updated.
  """
  patch: RoomPatch!
}

"""All input for the `updateRoom` mutation."""
input UpdateRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Room` being updated.
  """
  patch: RoomPatch!
}

"""The output of our update `Room` mutation."""
type UpdateRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Each room can optionally belong to an organization."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Room` that was updated by this mutation."""
  room: Room

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomsEdge
}

"""All input for the `updateRoomSubscriptionByNodeId` mutation."""
input UpdateRoomSubscriptionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RoomSubscription` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RoomSubscription` being updated.
  """
  patch: RoomSubscriptionPatch!
}

"""
All input for the `updateRoomSubscriptionBySubscriberIdAndRoomId` mutation.
"""
input UpdateRoomSubscriptionBySubscriberIdAndRoomIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RoomSubscription` being updated.
  """
  patch: RoomSubscriptionPatch!
  roomId: UUID!

  """The subscribing user."""
  subscriberId: UUID!
}

"""All input for the `updateRoomSubscription` mutation."""
input UpdateRoomSubscriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `RoomSubscription` being updated.
  """
  patch: RoomSubscriptionPatch!
}

"""The output of our update `RoomSubscription` mutation."""
type UpdateRoomSubscriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Room` that is related to this `RoomSubscription`."""
  room: Room

  """The `RoomSubscription` that was updated by this mutation."""
  roomSubscription: RoomSubscription

  """An edge for our `RoomSubscription`. May be used by Relay 1."""
  roomSubscriptionEdge(
    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsEdge

  """Reads a single `User` that is related to this `RoomSubscription`."""
  subscriber: User
}

"""All input for the `updateTopicByNodeId` mutation."""
input UpdateTopicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""All input for the `updateTopicBySlug` mutation."""
input UpdateTopicBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!

  """
  Each topic has a slug (a name made up of lowercase letters, digits, and hypens) to be addressed with.
  """
  slug: String!
}

"""All input for the `updateTopic` mutation."""
input UpdateTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""The output of our update `Topic` mutation."""
type UpdateTopicPayload {
  """Reads a single `User` that is related to this `Topic`."""
  author: User

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Organization` that is related to this `Topic`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Topic` that was updated by this mutation."""
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the `updateUserAuthenticationByNodeId` mutation."""
input UpdateUserAuthenticationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthentication` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserAuthentication` being updated.
  """
  patch: UserAuthenticationPatch!
}

"""
All input for the `updateUserAuthenticationByServiceAndIdentifier` mutation.
"""
input UpdateUserAuthenticationByServiceAndIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """A unique identifier for the user within the login service."""
  identifier: String!

  """
  An object where the defined keys will be set on the `UserAuthentication` being updated.
  """
  patch: UserAuthenticationPatch!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
}

"""All input for the `updateUserAuthentication` mutation."""
input UpdateUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `UserAuthentication` being updated.
  """
  patch: UserAuthenticationPatch!
}

"""The output of our update `UserAuthentication` mutation."""
type UpdateUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was updated by this mutation."""
  userAuthentication: UserAuthentication

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""All input for the `updateUserEmailByNodeId` mutation."""
input UpdateUserEmailByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserEmail` being updated.
  """
  patch: UserEmailPatch!
}

"""All input for the `updateUserEmailByUserIdAndEmail` mutation."""
input UpdateUserEmailByUserIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The users email address, in `a@b.c` format."""
  email: String!

  """
  An object where the defined keys will be set on the `UserEmail` being updated.
  """
  patch: UserEmailPatch!
  userId: UUID!
}

"""All input for the `updateUserEmail` mutation."""
input UpdateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `UserEmail` being updated.
  """
  patch: UserEmailPatch!
}

"""The output of our update `UserEmail` mutation."""
type UpdateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was updated by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A user who can log in to the application."""
type User implements Node {
  """Reads and enables pagination through a set of `Topic`."""
  authoredTopics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsConnection!

  """Optional avatar URL."""
  avatarUrl: String
  createdAt: Datetime!

  """
  Users can be notified about activities in the rooms they have subscribed to. This is the default setting. You can change it for each room.
  """
  defaultHandlingOfNotifications: NotificationSetting!
  hasPassword: Boolean

  """Unique identifier for the user."""
  id: UUID!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  isVerified: Boolean!

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads and enables pagination through a set of `OrganizationInvitation`.
  """
  organizationInvitations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationInvitationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsConnection!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection!

  """Reads and enables pagination through a set of `RoomSubscription`."""
  roomSubscriptionsBySubscriberId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomSubscriptionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomSubscription`."""
    orderBy: [RoomSubscriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomSubscriptionsConnection!

  """
  If there are any delayed notifications, they are sent at this time every day.
  """
  sendingTimeForDeferredNotifications: Time!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthentications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsConnection!

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsConnection!

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication implements Node {
  createdAt: Datetime!

  """Additional profile details extracted from this login method"""
  details: JSON!
  id: UUID!

  """A unique identifier for the user within the login service."""
  identifier: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserAuthentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserAuthenticationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `details` field."""
  details: JSON

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `identifier` field."""
  identifier: String

  """Checks for equality with the object’s `service` field."""
  service: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `UserAuthentication`"""
input UserAuthenticationInput {
  createdAt: Datetime

  """Additional profile details extracted from this login method"""
  details: JSON
  id: UUID

  """A unique identifier for the user within the login service."""
  identifier: String!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
  updatedAt: Datetime
  userId: UUID!
}

"""
Represents an update to a `UserAuthentication`. Fields that are set will be updated.
"""
input UserAuthenticationPatch {
  createdAt: Datetime

  """Additional profile details extracted from this login method"""
  details: JSON
  id: UUID

  """A unique identifier for the user within the login service."""
  identifier: String

  """The login service used, e.g. `twitter` or `github`."""
  service: String
  updatedAt: Datetime
  userId: UUID
}

"""A connection to a list of `UserAuthentication` values."""
type UserAuthenticationsConnection {
  """
  A list of edges which contains the `UserAuthentication` and cursor to aid in pagination.
  """
  edges: [UserAuthenticationsEdge]!

  """A list of `UserAuthentication` objects."""
  nodes: [UserAuthentication]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserAuthentication` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UserAuthentication` edge in the connection."""
type UserAuthenticationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserAuthentication` at the end of the edge."""
  node: UserAuthentication
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DETAILS_ASC
  DETAILS_DESC
  IDENTIFIER_ASC
  IDENTIFIER_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ASC
  SERVICE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """
  Checks for equality with the object’s `defaultHandlingOfNotifications` field.
  """
  defaultHandlingOfNotifications: NotificationSetting

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isAdmin` field."""
  isAdmin: Boolean

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """
  Checks for equality with the object’s `sendingTimeForDeferredNotifications` field.
  """
  sendingTimeForDeferredNotifications: Time

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""Information about a user's email address."""
type UserEmail implements Node {
  createdAt: Datetime!

  """The users email address, in `a@b.c` format."""
  email: String!
  id: UUID!
  isPrimary: Boolean!

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
  createdAt: Datetime

  """The users email address, in `a@b.c` format."""
  email: String!
  id: UUID
  isPrimary: Boolean

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean
  updatedAt: Datetime
  userId: UUID
}

"""
Represents an update to a `UserEmail`. Fields that are set will be updated.
"""
input UserEmailPatch {
  createdAt: Datetime

  """The users email address, in `a@b.c` format."""
  email: String
  id: UUID
  isPrimary: Boolean

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean
  updatedAt: Datetime
  userId: UUID
}

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge]!

  """A list of `UserEmail` objects."""
  nodes: [UserEmail]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEmail` you could get from the connection."""
  totalCount: Int!
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmail` at the end of the edge."""
  node: UserEmail
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""An input for mutations affecting `User`"""
input UserInput {
  """Optional avatar URL."""
  avatarUrl: String
  createdAt: Datetime

  """
  Users can be notified about activities in the rooms they have subscribed to. This is the default setting. You can change it for each room.
  """
  defaultHandlingOfNotifications: NotificationSetting

  """Unique identifier for the user."""
  id: UUID

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  isVerified: Boolean

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """
  If there are any delayed notifications, they are sent at this time every day.
  """
  sendingTimeForDeferredNotifications: Time
  updatedAt: Datetime

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Optional avatar URL."""
  avatarUrl: String
  createdAt: Datetime

  """
  Users can be notified about activities in the rooms they have subscribed to. This is the default setting. You can change it for each room.
  """
  defaultHandlingOfNotifications: NotificationSetting

  """Unique identifier for the user."""
  id: UUID

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  isVerified: Boolean

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """
  If there are any delayed notifications, they are sent at this time every day.
  """
  sendingTimeForDeferredNotifications: Time
  updatedAt: Datetime

  """Public-facing username (or 'handle') of the user."""
  username: String
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge]!

  """A list of `User` objects."""
  nodes: [User]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DEFAULT_HANDLING_OF_NOTIFICATIONS_ASC
  DEFAULT_HANDLING_OF_NOTIFICATIONS_DESC
  ID_ASC
  ID_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SENDING_TIME_FOR_DEFERRED_NOTIFICATIONS_ASC
  SENDING_TIME_FOR_DEFERRED_NOTIFICATIONS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
}

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
  userEmailId: UUID!
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
